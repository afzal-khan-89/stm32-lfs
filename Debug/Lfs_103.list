
Lfs_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c650  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017dc  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df38  0800df38  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800df38  0800df38  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df38  0800df38  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df38  0800df38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800df40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200000dc  0800e01c  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800e01c  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118fa  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002258  00000000  00000000  00031a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00033ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0f  00000000  00000000  00034cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e26  00000000  00000000  00035acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010fd6  00000000  00000000  0004e8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000892ea  00000000  00000000  0005f8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005098  00000000  00000000  000e8bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000edc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c744 	.word	0x0800c744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	0800c744 	.word	0x0800c744

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__popcountsi2>:
 800015c:	0843      	lsrs	r3, r0, #1
 800015e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	0883      	lsrs	r3, r0, #2
 8000166:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800016a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800016e:	4418      	add	r0, r3
 8000170:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000174:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000178:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800017c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000180:	0e00      	lsrs	r0, r0, #24
 8000182:	4770      	bx	lr

08000184 <_write>:
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */


int _write(int file, char *ptr, int len)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	b29a      	uxth	r2, r3
 8000194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000198:	68b9      	ldr	r1, [r7, #8]
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <_write+0x28>)
 800019c:	f00a ffe2 	bl	800b164 <HAL_UART_Transmit>
  return len;
 80001a0:	687b      	ldr	r3, [r7, #4]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000150 	.word	0x20000150

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c4      	sub	sp, #272	; 0x110
 80001b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f009 fae7 	bl	8009788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f875 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f919 	bl	80003f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001c2:	f000 f8b7 	bl	8000334 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80001c6:	f000 f8eb 	bl	80003a0 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Storage_error_t  err = init_storage(&hspi1 ,GPIOB, GPIO_PIN_0);
 80001ca:	2201      	movs	r2, #1
 80001cc:	492e      	ldr	r1, [pc, #184]	; (8000288 <main+0xd8>)
 80001ce:	482f      	ldr	r0, [pc, #188]	; (800028c <main+0xdc>)
 80001d0:	f007 fb14 	bl	80077fc <init_storage>
 80001d4:	4603      	mov	r3, r0
 80001d6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  if(err != STORAGE_OK )
 80001da:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d003      	beq.n	80001ea <main+0x3a>
  {
	  printf("main : fail to initialize local storage \n");	while(1);
 80001e2:	482b      	ldr	r0, [pc, #172]	; (8000290 <main+0xe0>)
 80001e4:	f00b fc3a 	bl	800ba5c <puts>
 80001e8:	e7fe      	b.n	80001e8 <main+0x38>
  }
  Storage_t * _storage = get_storage_instance();
 80001ea:	f007 fc6b 	bl	8007ac4 <get_storage_instance>
 80001ee:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if(_storage == NULL)
 80001f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d103      	bne.n	8000202 <main+0x52>
  {
	  printf("local storage instance null \n "); while(1);
 80001fa:	4826      	ldr	r0, [pc, #152]	; (8000294 <main+0xe4>)
 80001fc:	f00b fbc8 	bl	800b990 <iprintf>
 8000200:	e7fe      	b.n	8000200 <main+0x50>
  }
  char lb[48];
  for(int i=0 ; i<28; i++)
 8000202:	2300      	movs	r3, #0
 8000204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000208:	e01c      	b.n	8000244 <main+0x94>
  {
  		  memset(lb, 0, sizeof(lb));
 800020a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800020e:	2230      	movs	r2, #48	; 0x30
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f00b fd12 	bl	800bc3c <memset>
//  		  itoa(i, lb, 10);
//  		  strcat(lb, " : location data \n") ;
//  		 _storage->push(lb, 19);
		  _storage->pop(lb, 15);
 8000218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000222:	210f      	movs	r1, #15
 8000224:	4610      	mov	r0, r2
 8000226:	4798      	blx	r3
		  printf("read lfs %s \n", lb);
 8000228:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800022c:	4619      	mov	r1, r3
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <main+0xe8>)
 8000230:	f00b fbae 	bl	800b990 <iprintf>
		  HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	; 0x32
 8000236:	f009 fb09 	bl	800984c <HAL_Delay>
  for(int i=0 ; i<28; i++)
 800023a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800023e:	3301      	adds	r3, #1
 8000240:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000248:	2b1b      	cmp	r3, #27
 800024a:	ddde      	ble.n	800020a <main+0x5a>
  }

  Info_firmware_t _firmware ;
  err = get_firmware_info(&_firmware);
 800024c:	463b      	mov	r3, r7
 800024e:	4618      	mov	r0, r3
 8000250:	f008 f94c 	bl	80084ec <get_firmware_info>
 8000254:	4603      	mov	r3, r0
 8000256:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
  if(err != 1)
 800025a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800025e:	2b01      	cmp	r3, #1
 8000260:	d003      	beq.n	800026a <main+0xba>
  {
	  printf("fail to get firmware info \n");	while(1);
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <main+0xec>)
 8000264:	f00b fbfa 	bl	800ba5c <puts>
 8000268:	e7fe      	b.n	8000268 <main+0xb8>
  }

  printf("firmware local dir : %s \n", _firmware.local_firmwre_dir);
 800026a:	463b      	mov	r3, r7
 800026c:	3398      	adds	r3, #152	; 0x98
 800026e:	4619      	mov	r1, r3
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <main+0xf0>)
 8000272:	f00b fb8d 	bl	800b990 <iprintf>
//	  }
//
//	  //_storage.pop(lb, 15);
//	  while(1)
//	  {
		  printf("Main Loop ... \n");
 8000276:	480b      	ldr	r0, [pc, #44]	; (80002a4 <main+0xf4>)
 8000278:	f00b fbf0 	bl	800ba5c <puts>
		  HAL_Delay(1000);
 800027c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000280:	f009 fae4 	bl	800984c <HAL_Delay>
		  printf("Main Loop ... \n");
 8000284:	e7f7      	b.n	8000276 <main+0xc6>
 8000286:	bf00      	nop
 8000288:	40010c00 	.word	0x40010c00
 800028c:	200000f8 	.word	0x200000f8
 8000290:	0800c75c 	.word	0x0800c75c
 8000294:	0800c788 	.word	0x0800c788
 8000298:	0800c7a8 	.word	0x0800c7a8
 800029c:	0800c7b8 	.word	0x0800c7b8
 80002a0:	0800c7d4 	.word	0x0800c7d4
 80002a4:	0800c7f0 	.word	0x0800c7f0

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f00b fcc0 	bl	800bc3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002e6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4618      	mov	r0, r3
 80002f2:	f009 fd4f 	bl	8009d94 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002fc:	f000 f8c4 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2302      	movs	r3, #2
 8000306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800030c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000310:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2102      	movs	r1, #2
 800031a:	4618      	mov	r0, r3
 800031c:	f009 ffbc 	bl	800a298 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000326:	f000 f8af 	bl	8000488 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3740      	adds	r7, #64	; 0x40
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
	...

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_SPI1_Init+0x64>)
 800033a:	4a18      	ldr	r2, [pc, #96]	; (800039c <MX_SPI1_Init+0x68>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_SPI1_Init+0x64>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_SPI1_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_SPI1_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_SPI1_Init+0x64>)
 8000360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_SPI1_Init+0x64>)
 8000368:	2208      	movs	r2, #8
 800036a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036c:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_SPI1_Init+0x64>)
 8000380:	220a      	movs	r2, #10
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_SPI1_Init+0x64>)
 8000386:	f00a f915 	bl	800a5b4 <HAL_SPI_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000390:	f000 f87a 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000f8 	.word	0x200000f8
 800039c:	40013000 	.word	0x40013000

080003a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <MX_USART3_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_USART3_UART_Init+0x4c>)
 80003d8:	f00a fe74 	bl	800b0c4 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f851 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000150 	.word	0x20000150
 80003f0:	40004800 	.word	0x40004800

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_GPIO_Init+0x8c>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_GPIO_Init+0x8c>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a16      	ldr	r2, [pc, #88]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_GPIO_Init+0x8c>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_GPIO_Init+0x8c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <MX_GPIO_Init+0x8c>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_GPIO_Init+0x8c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0308 	and.w	r3, r3, #8
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2101      	movs	r1, #1
 8000454:	480b      	ldr	r0, [pc, #44]	; (8000484 <MX_GPIO_Init+0x90>)
 8000456:	f009 fc85 	bl	8009d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045a:	2301      	movs	r3, #1
 800045c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0x90>)
 8000472:	f009 faf3 	bl	8009a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	40010c00 	.word	0x40010c00

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_MspInit+0x5c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x5c>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_MspInit+0x60>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_MspInit+0x60>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010000 	.word	0x40010000

080004f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <HAL_SPI_MspInit+0x88>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d12f      	bne.n	8000578 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <HAL_SPI_MspInit+0x8c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a19      	ldr	r2, [pc, #100]	; (8000584 <HAL_SPI_MspInit+0x8c>)
 800051e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <HAL_SPI_MspInit+0x8c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_SPI_MspInit+0x8c>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <HAL_SPI_MspInit+0x8c>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_SPI_MspInit+0x8c>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000548:	23a0      	movs	r3, #160	; 0xa0
 800054a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000550:	2303      	movs	r3, #3
 8000552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <HAL_SPI_MspInit+0x90>)
 800055c:	f009 fa7e 	bl	8009a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <HAL_SPI_MspInit+0x90>)
 8000574:	f009 fa72 	bl	8009a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013000 	.word	0x40013000
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <HAL_UART_MspInit+0x8c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d131      	bne.n	8000610 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <HAL_UART_MspInit+0x90>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	4a1a      	ldr	r2, [pc, #104]	; (800061c <HAL_UART_MspInit+0x90>)
 80005b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b6:	61d3      	str	r3, [r2, #28]
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <HAL_UART_MspInit+0x90>)
 80005ba:	69db      	ldr	r3, [r3, #28]
 80005bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_UART_MspInit+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <HAL_UART_MspInit+0x90>)
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_UART_MspInit+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <HAL_UART_MspInit+0x94>)
 80005f2:	f009 fa33 	bl	8009a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <HAL_UART_MspInit+0x94>)
 800060c:	f009 fa26 	bl	8009a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40004800 	.word	0x40004800
 800061c:	40021000 	.word	0x40021000
 8000620:	40010c00 	.word	0x40010c00

08000624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000628:	e7fe      	b.n	8000628 <NMI_Handler+0x4>

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <MemManage_Handler+0x4>

08000636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <UsageFault_Handler+0x4>

08000642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066a:	f009 f8d3 	bl	8009814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}

08000672 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  return 1;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <_kill>:

int _kill(int pid, int sig)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800068a:	f00b fb73 	bl	800bd74 <__errno>
 800068e:	4603      	mov	r3, r0
 8000690:	2216      	movs	r2, #22
 8000692:	601a      	str	r2, [r3, #0]
  return -1;
 8000694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_exit>:

void _exit (int status)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffe7 	bl	8000680 <_kill>
  while (1) {}    /* Make sure we hang here */
 80006b2:	e7fe      	b.n	80006b2 <_exit+0x12>

080006b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e00a      	b.n	80006dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006c6:	f3af 8000 	nop.w
 80006ca:	4601      	mov	r1, r0
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	60ba      	str	r2, [r7, #8]
 80006d2:	b2ca      	uxtb	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf0      	blt.n	80006c6 <_read+0x12>
  }

  return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000714:	605a      	str	r2, [r3, #4]
  return 0;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_isatty>:

int _isatty(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
	...

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f00b faf8 	bl	800bd74 <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <_sbrk+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20005000 	.word	0x20005000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	20000198 	.word	0x20000198
 80007b8:	20000388 	.word	0x20000388

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007c8:	f7ff fff8 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ce:	490c      	ldr	r1, [pc, #48]	; (8000800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a09      	ldr	r2, [pc, #36]	; (8000808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e4:	4c09      	ldr	r4, [pc, #36]	; (800080c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f2:	f00b fac5 	bl	800bd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fcdb 	bl	80001b0 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000804:	0800df40 	.word	0x0800df40
  ldr r2, =_sbss
 8000808:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 800080c:	20000384 	.word	0x20000384

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>

08000812 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4293      	cmp	r3, r2
 8000822:	bf38      	it	cc
 8000824:	4613      	movcc	r3, r2
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4293      	cmp	r3, r2
 8000840:	bf28      	it	cs
 8000842:	4613      	movcs	r3, r2
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000860:	6839      	ldr	r1, [r7, #0]
 8000862:	fb01 f202 	mul.w	r2, r1, r2
 8000866:	1a9b      	subs	r3, r3, r2
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	1ad3      	subs	r3, r2, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4413      	add	r3, r2
 8000886:	3b01      	subs	r3, #1
 8000888:	6839      	ldr	r1, [r7, #0]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ffdf 	bl	800084e <lfs_aligndown>
 8000890:	4603      	mov	r3, r0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	fab3 f383 	clz	r3, r3
 80008aa:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	fa93 f3a3 	rbit	r3, r3
 80008c6:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff fc3d 	bl	800015c <__popcountsi2>
 80008e2:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	1ad3      	subs	r3, r2, r3
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800090e:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffef 	bl	8000906 <lfs_fromle32>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ffee 	bl	8000932 <lfs_frombe32>
 8000956:	4603      	mov	r3, r0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f00a fdb7 	bl	800b4dc <malloc>
 800096e:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f00a fdb3 	bl	800b4ec <free>
#else
    (void)p;
#endif
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68d8      	ldr	r0, [r3, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009be:	461a      	mov	r2, r3
 80009c0:	21ff      	movs	r1, #255	; 0xff
 80009c2:	f00b f93b 	bl	800bc3c <memset>
    pcache->block = LFS_BLOCK_NULL;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009cc:	601a      	str	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af02      	add	r7, sp, #8
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80009e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e8:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 80009ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009ee:	441a      	add	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d80a      	bhi.n	8000a10 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8124 	beq.w	8000c4c <lfs_bd_read+0x274>
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	f0c0 811e 	bcc.w	8000c4c <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000a10:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000a14:	e11f      	b.n	8000c56 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a18:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d03f      	beq.n	8000aa0 <lfs_bd_read+0xc8>
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d13a      	bne.n	8000aa0 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d232      	bcs.n	8000aa0 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d324      	bcc.n	8000a8e <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	6859      	ldr	r1, [r3, #4]
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4e:	1acb      	subs	r3, r1, r3
 8000a50:	4413      	add	r3, r2
 8000a52:	4619      	mov	r1, r3
 8000a54:	69b8      	ldr	r0, [r7, #24]
 8000a56:	f7ff feeb 	bl	8000830 <lfs_min>
 8000a5a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a66:	1acb      	subs	r3, r1, r3
 8000a68:	4413      	add	r3, r2
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	69f8      	ldr	r0, [r7, #28]
 8000a70:	f00b f9b5 	bl	800bdde <memcpy>

                data += diff;
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4413      	add	r3, r2
 8000a7a:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4413      	add	r3, r2
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000a8c:	e0de      	b.n	8000c4c <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	69b8      	ldr	r0, [r7, #24]
 8000a9a:	f7ff fec9 	bl	8000830 <lfs_min>
 8000a9e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d13a      	bne.n	8000b20 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d232      	bcs.n	8000b20 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d324      	bcc.n	8000b0e <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6859      	ldr	r1, [r3, #4]
 8000acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ace:	1acb      	subs	r3, r1, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	69b8      	ldr	r0, [r7, #24]
 8000ad6:	f7ff feab 	bl	8000830 <lfs_min>
 8000ada:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ae6:	1acb      	subs	r3, r1, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4619      	mov	r1, r3
 8000aee:	69f8      	ldr	r0, [r7, #28]
 8000af0:	f00b f975 	bl	800bdde <memcpy>

                data += diff;
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4413      	add	r3, r2
 8000afa:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000afc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	4413      	add	r3, r2
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000b0c:	e09e      	b.n	8000c4c <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	69b8      	ldr	r0, [r7, #24]
 8000b1a:	f7ff fe89 	bl	8000830 <lfs_min>
 8000b1e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d336      	bcc.n	8000b96 <lfs_bd_read+0x1be>
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b34:	fb01 f202 	mul.w	r2, r1, r2
 8000b38:	1a9b      	subs	r3, r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d12b      	bne.n	8000b96 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b42:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d325      	bcc.n	8000b96 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	4619      	mov	r1, r3
 8000b52:	69b8      	ldr	r0, [r7, #24]
 8000b54:	f7ff fe7b 	bl	800084e <lfs_aligndown>
 8000b58:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b5e:	685c      	ldr	r4, [r3, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b6e:	47a0      	blx	r4
 8000b70:	6178      	str	r0, [r7, #20]
            if (err) {
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <lfs_bd_read+0x1a4>
                return err;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	e06c      	b.n	8000c56 <lfs_bd_read+0x27e>
            }

            data += diff;
 8000b7c:	69fa      	ldr	r2, [r7, #28]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4413      	add	r3, r2
 8000b82:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4413      	add	r3, r2
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000b94:	e05a      	b.n	8000c4c <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00a      	beq.n	8000bb4 <lfs_bd_read+0x1dc>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d305      	bcc.n	8000bb4 <lfs_bd_read+0x1dc>
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <lfs_bd_read+0x288>)
 8000baa:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <lfs_bd_read+0x28c>)
 8000bac:	216b      	movs	r1, #107	; 0x6b
 8000bae:	482e      	ldr	r0, [pc, #184]	; (8000c68 <lfs_bd_read+0x290>)
 8000bb0:	f00a fc58 	bl	800b464 <__assert_func>
        rcache->block = block;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bb8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bc4:	f7ff fe43 	bl	800084e <lfs_aligndown>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bd8:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4610      	mov	r0, r2
 8000bde:	f7ff fe4a 	bl	8000876 <lfs_alignup>
 8000be2:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000be8:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8000bea:	4619      	mov	r1, r3
 8000bec:	4610      	mov	r0, r2
 8000bee:	f7ff fe1f 	bl	8000830 <lfs_min>
 8000bf2:	4602      	mov	r2, r0
                - rcache->off,
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000bf8:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f7ff fe14 	bl	8000830 <lfs_min>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c12:	685c      	ldr	r4, [r3, #4]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	462b      	mov	r3, r5
 8000c2c:	47a0      	blx	r4
 8000c2e:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	dd05      	ble.n	8000c42 <lfs_bd_read+0x26a>
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <lfs_bd_read+0x294>)
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <lfs_bd_read+0x28c>)
 8000c3a:	2176      	movs	r1, #118	; 0x76
 8000c3c:	480a      	ldr	r0, [pc, #40]	; (8000c68 <lfs_bd_read+0x290>)
 8000c3e:	f00a fc11 	bl	800b464 <__assert_func>
        if (err) {
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <lfs_bd_read+0x274>
            return err;
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	e004      	b.n	8000c56 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f47f aee1 	bne.w	8000a16 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3720      	adds	r7, #32
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	0800c800 	.word	0x0800c800
 8000c64:	0800db64 	.word	0x0800db64
 8000c68:	0800c830 	.word	0x0800c830
 8000c6c:	0800c850 	.word	0x0800c850

08000c70 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b090      	sub	sp, #64	; 0x40
 8000c74:	af04      	add	r7, sp, #16
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
 8000c7c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8a:	e039      	b.n	8000d00 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2108      	movs	r1, #8
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fdcb 	bl	8000830 <lfs_min>
 8000c9a:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca0:	1ad1      	subs	r1, r2, r3
 8000ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	4413      	add	r3, r2
 8000ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000caa:	9203      	str	r2, [sp, #12]
 8000cac:	f107 0214 	add.w	r2, r7, #20
 8000cb0:	9202      	str	r2, [sp, #8]
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68b9      	ldr	r1, [r7, #8]
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fe8a 	bl	80009d8 <lfs_bd_read>
 8000cc4:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000cc6:	6a3b      	ldr	r3, [r7, #32]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <lfs_bd_cmp+0x60>
            return err;
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	e01c      	b.n	8000d0a <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd4:	18d1      	adds	r1, r2, r3
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00a ff9d 	bl	800bc1c <memcmp>
 8000ce2:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da01      	bge.n	8000cf4 <lfs_bd_cmp+0x84>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e00a      	b.n	8000d0a <lfs_bd_cmp+0x9a>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e008      	b.n	8000d0a <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	4413      	add	r3, r2
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3c1      	bcc.n	8000c8c <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3730      	adds	r7, #48	; 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b08e      	sub	sp, #56	; 0x38
 8000d16:	af04      	add	r7, sp, #16
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	e030      	b.n	8000d8c <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2108      	movs	r1, #8
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fd7c 	bl	8000830 <lfs_min>
 8000d38:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	1ad1      	subs	r1, r2, r3
 8000d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	4413      	add	r3, r2
 8000d46:	6a3a      	ldr	r2, [r7, #32]
 8000d48:	9203      	str	r2, [sp, #12]
 8000d4a:	f107 0214 	add.w	r2, r7, #20
 8000d4e:	9202      	str	r2, [sp, #8]
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	460b      	mov	r3, r1
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fe3b 	bl	80009d8 <lfs_bd_read>
 8000d62:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <lfs_bd_crc+0x5c>
            return err;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	e013      	b.n	8000d96 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f107 0114 	add.w	r1, r7, #20
 8000d76:	6a3a      	ldr	r2, [r7, #32]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f006 fcb1 	bl	80076e0 <lfs_crc>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d82:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	4413      	add	r3, r2
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3ca      	bcc.n	8000d2a <lfs_bd_crc+0x18>
    }

    return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000db6:	d060      	beq.n	8000e7a <lfs_bd_flush+0xda>
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f113 0f02 	cmn.w	r3, #2
 8000dc0:	d05b      	beq.n	8000e7a <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d305      	bcc.n	8000dda <lfs_bd_flush+0x3a>
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <lfs_bd_flush+0xe4>)
 8000dd0:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <lfs_bd_flush+0xe8>)
 8000dd2:	21b3      	movs	r1, #179	; 0xb3
 8000dd4:	482d      	ldr	r0, [pc, #180]	; (8000e8c <lfs_bd_flush+0xec>)
 8000dd6:	f00a fb45 	bl	800b464 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4619      	mov	r1, r3
 8000de6:	4610      	mov	r0, r2
 8000de8:	f7ff fd45 	bl	8000876 <lfs_alignup>
 8000dec:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000df2:	689c      	ldr	r4, [r3, #8]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	462b      	mov	r3, r5
 8000e0a:	47a0      	blx	r4
 8000e0c:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	dd05      	ble.n	8000e20 <lfs_bd_flush+0x80>
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <lfs_bd_flush+0xf0>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <lfs_bd_flush+0xe8>)
 8000e18:	21b7      	movs	r1, #183	; 0xb7
 8000e1a:	481c      	ldr	r0, [pc, #112]	; (8000e8c <lfs_bd_flush+0xec>)
 8000e1c:	f00a fb22 	bl	800b464 <__assert_func>
        if (err) {
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <lfs_bd_flush+0x8a>
            return err;
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	e028      	b.n	8000e7c <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d020      	beq.n	8000e72 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f7ff fdab 	bl	800098e <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000e44:	69f8      	ldr	r0, [r7, #28]
 8000e46:	9003      	str	r0, [sp, #12]
 8000e48:	9102      	str	r1, [sp, #8]
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	2100      	movs	r1, #0
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff ff0b 	bl	8000c70 <lfs_bd_cmp>
 8000e5a:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da01      	bge.n	8000e66 <lfs_bd_flush+0xc6>
                return res;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	e00a      	b.n	8000e7c <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000e6c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000e70:	e004      	b.n	8000e7c <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000e72:	68b9      	ldr	r1, [r7, #8]
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff fd98 	bl	80009aa <lfs_cache_zero>
    }

    return 0;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bdb0      	pop	{r4, r5, r7, pc}
 8000e84:	0800c85c 	.word	0x0800c85c
 8000e88:	0800db70 	.word	0x0800db70
 8000e8c:	0800c830 	.word	0x0800c830
 8000e90:	0800c850 	.word	0x0800c850

08000e94 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fd72 	bl	800098e <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f7ff ff75 	bl	8000da0 <lfs_bd_flush>
 8000eb6:	6178      	str	r0, [r7, #20]
    if (err) {
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <lfs_bd_sync+0x2e>
        return err;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	e011      	b.n	8000ee6 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4798      	blx	r3
 8000ed0:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	dd05      	ble.n	8000ee4 <lfs_bd_sync+0x50>
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <lfs_bd_sync+0x5c>)
 8000eda:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <lfs_bd_sync+0x60>)
 8000edc:	21dd      	movs	r1, #221	; 0xdd
 8000ede:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <lfs_bd_sync+0x64>)
 8000ee0:	f00a fac0 	bl	800b464 <__assert_func>
    return err;
 8000ee4:	697b      	ldr	r3, [r7, #20]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	0800c850 	.word	0x0800c850
 8000ef4:	0800db80 	.word	0x0800db80
 8000ef8:	0800c830 	.word	0x0800c830

08000efc <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0c:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	f113 0f02 	cmn.w	r3, #2
 8000f14:	d00a      	beq.n	8000f2c <lfs_bd_prog+0x30>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d305      	bcc.n	8000f2c <lfs_bd_prog+0x30>
 8000f20:	4b47      	ldr	r3, [pc, #284]	; (8001040 <lfs_bd_prog+0x144>)
 8000f22:	4a48      	ldr	r2, [pc, #288]	; (8001044 <lfs_bd_prog+0x148>)
 8000f24:	21e8      	movs	r1, #232	; 0xe8
 8000f26:	4848      	ldr	r0, [pc, #288]	; (8001048 <lfs_bd_prog+0x14c>)
 8000f28:	f00a fa9c 	bl	800b464 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8000f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f30:	441a      	add	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d978      	bls.n	800102e <lfs_bd_prog+0x132>
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <lfs_bd_prog+0x150>)
 8000f3e:	4a41      	ldr	r2, [pc, #260]	; (8001044 <lfs_bd_prog+0x148>)
 8000f40:	21e9      	movs	r1, #233	; 0xe9
 8000f42:	4841      	ldr	r0, [pc, #260]	; (8001048 <lfs_bd_prog+0x14c>)
 8000f44:	f00a fa8e 	bl	800b464 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d151      	bne.n	8000ff6 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8000f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d34c      	bcc.n	8000ff6 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	4413      	add	r3, r2
                off >= pcache->off &&
 8000f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d243      	bcs.n	8000ff6 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f82:	f7ff fc55 	bl	8000830 <lfs_min>
 8000f86:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	69f9      	ldr	r1, [r7, #28]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f00a ff1f 	bl	800bdde <memcpy>

            data += diff;
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4413      	add	r3, r2
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8000fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fc24 	bl	8000812 <lfs_max>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d127      	bne.n	800102e <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff fedb 	bl	8000da0 <lfs_bd_flush>
 8000fea:	6178      	str	r0, [r7, #20]
                if (err) {
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01d      	beq.n	800102e <lfs_bd_prog+0x132>
                    return err;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	e01f      	b.n	8001036 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ffe:	d006      	beq.n	800100e <lfs_bd_prog+0x112>
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <lfs_bd_prog+0x154>)
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <lfs_bd_prog+0x148>)
 8001004:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <lfs_bd_prog+0x14c>)
 800100a:	f00a fa2b 	bl	800b464 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001012:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4619      	mov	r1, r3
 800101c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800101e:	f7ff fc16 	bl	800084e <lfs_aligndown>
 8001022:	4602      	mov	r2, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800102e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001030:	2b00      	cmp	r3, #0
 8001032:	d189      	bne.n	8000f48 <lfs_bd_prog+0x4c>
    }

    return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800c880 	.word	0x0800c880
 8001044:	0800db8c 	.word	0x0800db8c
 8001048:	0800c830 	.word	0x0800c830
 800104c:	0800c8b8 	.word	0x0800c8b8
 8001050:	0800c8dc 	.word	0x0800c8dc

08001054 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d306      	bcc.n	8001076 <lfs_bd_erase+0x22>
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <lfs_bd_erase+0x54>)
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <lfs_bd_erase+0x58>)
 800106c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <lfs_bd_erase+0x5c>)
 8001072:	f00a f9f7 	bl	800b464 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001080:	6839      	ldr	r1, [r7, #0]
 8001082:	4610      	mov	r0, r2
 8001084:	4798      	blx	r3
 8001086:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	dd06      	ble.n	800109c <lfs_bd_erase+0x48>
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <lfs_bd_erase+0x60>)
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <lfs_bd_erase+0x58>)
 8001092:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <lfs_bd_erase+0x5c>)
 8001098:	f00a f9e4 	bl	800b464 <__assert_func>
    return err;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800c900 	.word	0x0800c900
 80010ac:	0800db98 	.word	0x0800db98
 80010b0:	0800c830 	.word	0x0800c830
 80010b4:	0800c850 	.word	0x0800c850

080010b8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3304      	adds	r3, #4
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010f0:	d005      	beq.n	80010fe <lfs_pair_isnull+0x1e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010fc:	d101      	bne.n	8001102 <lfs_pair_isnull+0x22>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <lfs_pair_isnull+0x24>
 8001102:	2300      	movs	r3, #0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d017      	beq.n	800115a <lfs_pair_cmp+0x46>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d00f      	beq.n	800115a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3304      	adds	r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001144:	429a      	cmp	r2, r3
 8001146:	d008      	beq.n	800115a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001152:	429a      	cmp	r2, r3
 8001154:	d001      	beq.n	800115a <lfs_pair_cmp+0x46>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <lfs_pair_cmp+0x48>
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d107      	bne.n	800118c <lfs_pair_issync+0x26>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3304      	adds	r3, #4
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	3304      	adds	r3, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d00d      	beq.n	80011a8 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001196:	429a      	cmp	r2, r3
 8001198:	d108      	bne.n	80011ac <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d101      	bne.n	80011ac <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <lfs_pair_issync+0x48>
 80011ac:	2300      	movs	r3, #0
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80011be:	b590      	push	{r4, r7, lr}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fb9b 	bl	8000906 <lfs_fromle32>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	1d1c      	adds	r4, r3, #4
 80011e0:	4610      	mov	r0, r2
 80011e2:	f7ff fb90 	bl	8000906 <lfs_fromle32>
 80011e6:	4603      	mov	r3, r0
 80011e8:	6023      	str	r3, [r4, #0]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd90      	pop	{r4, r7, pc}

080011f2 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80011f2:	b590      	push	{r4, r7, lr}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fb8b 	bl	800091a <lfs_tole32>
 8001204:	4602      	mov	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1d1c      	adds	r4, r3, #4
 8001214:	4610      	mov	r0, r2
 8001216:	f7ff fb80 	bl	800091a <lfs_tole32>
 800121a:	4603      	mov	r3, r0
 800121c:	6023      	str	r3, [r4, #0]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}

08001226 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	43db      	mvns	r3, r3
 8001232:	0fdb      	lsrs	r3, r3, #31
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	059b      	lsls	r3, r3, #22
 800124c:	159b      	asrs	r3, r3, #22
 800124e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001252:	bf0c      	ite	eq
 8001254:	2301      	moveq	r3, #1
 8001256:	2300      	movne	r3, #0
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	0d1b      	lsrs	r3, r3, #20
 8001270:	b29b      	uxth	r3, r3
 8001272:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001276:	b29b      	uxth	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0d1b      	lsrs	r3, r3, #20
 800128e:	b29b      	uxth	r3, r3
 8001290:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001294:	b29b      	uxth	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	0d1b      	lsrs	r3, r3, #20
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b2:	b29b      	uxth	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0d1b      	lsrs	r3, r3, #20
 80012ca:	b2db      	uxtb	r3, r3
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffed 	bl	80012be <lfs_tag_chunk>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b25b      	sxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	0a9b      	lsrs	r3, r3, #10
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001302:	b29b      	uxth	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff86 	bl	8001240 <lfs_tag_isdelete>
 8001334:	4603      	mov	r3, r0
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffe6 	bl	800130e <lfs_tag_size>
 8001342:	4603      	mov	r3, r0
 8001344:	3304      	adds	r3, #4
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e012      	b.n	8001384 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4403      	add	r3, r0
 800137a:	404a      	eors	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b02      	cmp	r3, #2
 8001388:	dde9      	ble.n	800135e <lfs_gstate_xor+0x10>
    }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	e00b      	b.n	80013bc <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <lfs_gstate_iszero+0x20>
            return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e006      	b.n	80013c4 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	ddf0      	ble.n	80013a4 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff97 	bl	800130e <lfs_tag_size>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bf14      	ite	ne
 80013e6:	2301      	movne	r3, #1
 80013e8:	2300      	moveq	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff84 	bl	800130e <lfs_tag_size>
 8001406:	4603      	mov	r3, r0
 8001408:	b2db      	uxtb	r3, r3
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ff20 	bl	8001264 <lfs_tag_type1>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff62 	bl	800130e <lfs_tag_size>
 800144a:	4603      	mov	r3, r0
 800144c:	0a5b      	lsrs	r3, r3, #9
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fef8 	bl	8001264 <lfs_tag_type1>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <lfs_gstate_hasmovehere+0x30>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe47 	bl	8001114 <lfs_pair_cmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <lfs_gstate_hasmovehere+0x30>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <lfs_gstate_hasmovehere+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fa2a 	bl	8000906 <lfs_fromle32>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fa22 	bl	8000906 <lfs_fromle32>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fa1a 	bl	8000906 <lfs_fromle32>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fa14 	bl	800091a <lfs_tole32>
 80014f2:	4602      	mov	r2, r0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fa0c 	bl	800091a <lfs_tole32>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fa04 	bl	800091a <lfs_tole32>
 8001512:	4602      	mov	r2, r0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	609a      	str	r2, [r3, #8]
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f9ea 	bl	8000906 <lfs_fromle32>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f9e2 	bl	8000906 <lfs_fromle32>
 8001542:	4602      	mov	r2, r0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f9dc 	bl	800091a <lfs_tole32>
 8001562:	4602      	mov	r2, r0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f9d4 	bl	800091a <lfs_tole32>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f9ba 	bl	8000906 <lfs_fromle32>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f9b2 	bl	8000906 <lfs_fromle32>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	605a      	str	r2, [r3, #4]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f9ac 	bl	800091a <lfs_tole32>
 80015c2:	4602      	mov	r2, r0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff f9a4 	bl	800091a <lfs_tole32>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	605a      	str	r2, [r3, #4]
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f98a 	bl	8000906 <lfs_fromle32>
 80015f2:	4602      	mov	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f982 	bl	8000906 <lfs_fromle32>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f97a 	bl	8000906 <lfs_fromle32>
 8001612:	4602      	mov	r2, r0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f972 	bl	8000906 <lfs_fromle32>
 8001622:	4602      	mov	r2, r0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f96a 	bl	8000906 <lfs_fromle32>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f962 	bl	8000906 <lfs_fromle32>
 8001642:	4602      	mov	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	615a      	str	r2, [r3, #20]
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f95c 	bl	800091a <lfs_tole32>
 8001662:	4602      	mov	r2, r0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f954 	bl	800091a <lfs_tole32>
 8001672:	4602      	mov	r2, r0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff f94c 	bl	800091a <lfs_tole32>
 8001682:	4602      	mov	r2, r0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f944 	bl	800091a <lfs_tole32>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff f93c 	bl	800091a <lfs_tole32>
 80016a2:	4602      	mov	r2, r0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f934 	bl	800091a <lfs_tole32>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	615a      	str	r2, [r3, #20]
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e009      	b.n	80016e4 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d101      	bne.n	80016de <lfs_mlist_isopen+0x1e>
            return true;
 80016da:	2301      	movs	r3, #1
 80016dc:	e007      	b.n	80016ee <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f1      	bne.n	80016d0 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3328      	adds	r3, #40	; 0x28
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e00d      	b.n	8001726 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d105      	bne.n	8001720 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]
            break;
 800171e:	e007      	b.n	8001730 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ed      	bne.n	800170a <lfs_mlist_remove+0x12>
        }
    }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <lfs_fs_disk_version+0x14>)
    }
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	00020001 	.word	0x00020001

08001774 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffed 	bl	800175c <lfs_fs_disk_version>
 8001782:	4603      	mov	r3, r0
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	b29b      	uxth	r3, r3

}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffdf 	bl	800175c <lfs_fs_disk_version>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29b      	uxth	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	661a      	str	r2, [r3, #96]	; 0x60
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->lookahead.next = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ckpoint(lfs);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe6 	bl	80017aa <lfs_alloc_ckpoint>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001800:	4413      	add	r3, r2
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001806:	fbb3 f1f2 	udiv	r1, r3, r2
 800180a:	fb01 f202 	mul.w	r2, r1, r2
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	429a      	cmp	r2, r3
 800181a:	d212      	bcs.n	8001842 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	441a      	add	r2, r3
 8001826:	7811      	ldrb	r1, [r2, #0]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	2001      	movs	r0, #1
 8001830:	fa00 f202 	lsl.w	r2, r0, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800183a:	4403      	add	r3, r0
 800183c:	430a      	orrs	r2, r1
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	4413      	add	r3, r2
            % lfs->block_count;
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001866:	fbb3 f1f2 	udiv	r1, r3, r2
 800186a:	fb01 f202 	mul.w	r2, r1, r2
 800186e:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->lookahead.next = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    lfs->lookahead.size = lfs_min(
 8001880:	00da      	lsls	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7fe ffd1 	bl	8000830 <lfs_min>
 800188e:	4602      	mov	r2, r0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	461a      	mov	r2, r3
 80018a0:	2100      	movs	r1, #0
 80018a2:	f00a f9cb 	bl	800bc3c <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80018a6:	2301      	movs	r3, #1
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4909      	ldr	r1, [pc, #36]	; (80018d0 <lfs_alloc_scan+0x80>)
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f005 f809 	bl	80068c4 <lfs_fs_traverse_>
 80018b2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff82 	bl	80017c4 <lfs_alloc_drop>
        return err;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	e000      	b.n	80018c6 <lfs_alloc_scan+0x76>
    }

    return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	080017e7 	.word	0x080017e7

080018d4 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80018de:	e04d      	b.n	800197c <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d131      	bne.n	8001968 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	4413      	add	r3, r2
                        % lfs->block_count;
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001912:	fbb3 f1f2 	udiv	r1, r3, r2
 8001916:	fb01 f202 	mul.w	r2, r1, r2
 800191a:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	661a      	str	r2, [r3, #96]	; 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	429a      	cmp	r2, r3
 800193e:	d211      	bcs.n	8001964 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1dd      	bne.n	8001920 <lfs_alloc+0x4c>
                        return 0;
 8001964:	2300      	movs	r3, #0
 8001966:	e033      	b.n	80019d0 <lfs_alloc+0xfc>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->lookahead.ckpoint -= 1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	661a      	str	r2, [r3, #96]	; 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	429a      	cmp	r2, r3
 8001986:	d3ab      	bcc.n	80018e0 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198c:	2b00      	cmp	r3, #0
 800198e:	d117      	bne.n	80019c0 <lfs_alloc+0xec>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	4413      	add	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800199e:	6a12      	ldr	r2, [r2, #32]
 80019a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80019a4:	fb01 f202 	mul.w	r2, r1, r2
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <lfs_alloc+0x104>)
 80019ac:	9200      	str	r2, [sp, #0]
 80019ae:	f240 22b1 	movw	r2, #689	; 0x2b1
 80019b2:	490a      	ldr	r1, [pc, #40]	; (80019dc <lfs_alloc+0x108>)
 80019b4:	480a      	ldr	r0, [pc, #40]	; (80019e0 <lfs_alloc+0x10c>)
 80019b6:	f009 ffeb 	bl	800b990 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->cfg->block_count);
            return LFS_ERR_NOSPC;
 80019ba:	f06f 031b 	mvn.w	r3, #27
 80019be:	e007      	b.n	80019d0 <lfs_alloc+0xfc>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff45 	bl	8001850 <lfs_alloc_scan>
 80019c6:	60f8      	str	r0, [r7, #12]
        if(err) {
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d087      	beq.n	80018de <lfs_alloc+0xa>
            return err;
 80019ce:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	0800c948 	.word	0x0800c948
 80019dc:	0800c830 	.word	0x0800c830
 80019e0:	0800c91c 	.word	0x0800c91c

080019e4 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b08f      	sub	sp, #60	; 0x3c
 80019e8:	af04      	add	r7, sp, #16
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	333c      	adds	r3, #60	; 0x3c
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd28 	bl	8001460 <lfs_gstate_hasmovehere>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80ba 	beq.w	8001b8c <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fc69 	bl	80012f0 <lfs_tag_id>
 8001a1e:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80b3 	beq.w	8001b8c <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fc60 	bl	80012f0 <lfs_tag_id>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461c      	mov	r4, r3
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff fc5b 	bl	80012f0 <lfs_tag_id>
 8001a3a:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	f200 80a5 	bhi.w	8001b8c <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001a48:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001a4a:	e09f      	b.n	8001b8c <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fc69 	bl	8001326 <lfs_tag_dsize>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001a60:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8001a66:	2204      	movs	r2, #4
 8001a68:	9203      	str	r2, [sp, #12]
 8001a6a:	f107 0210 	add.w	r2, r7, #16
 8001a6e:	9202      	str	r2, [sp, #8]
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2304      	movs	r3, #4
 8001a78:	460a      	mov	r2, r1
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7fe ffab 	bl	80009d8 <lfs_bd_read>
 8001a82:	61b8      	str	r0, [r7, #24]
        if (err) {
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <lfs_dir_getslice+0xaa>
            return err;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	e08a      	b.n	8001ba4 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe ff4e 	bl	8000932 <lfs_frombe32>
 8001a96:	4602      	mov	r2, r0
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4053      	eors	r3, r2
 8001a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001aa0:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fc24 	bl	80012f0 <lfs_tag_id>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d02b      	beq.n	8001b06 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001aae:	69f8      	ldr	r0, [r7, #28]
 8001ab0:	f7ff fbd8 	bl	8001264 <lfs_tag_type1>
 8001ab4:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d124      	bne.n	8001b06 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001abc:	69f8      	ldr	r0, [r7, #28]
 8001abe:	f7ff fc17 	bl	80012f0 <lfs_tag_id>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fc0f 	bl	80012f0 <lfs_tag_id>
 8001ad2:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d816      	bhi.n	8001b06 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	1ad2      	subs	r2, r2, r3
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <lfs_dir_getslice+0x1c8>)
 8001ae0:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001ae2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d102      	bne.n	8001af6 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001af0:	f06f 0301 	mvn.w	r3, #1
 8001af4:	e056      	b.n	8001ba4 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001af6:	69f8      	ldr	r0, [r7, #28]
 8001af8:	f7ff fbed 	bl	80012d6 <lfs_tag_splice>
 8001afc:	4603      	mov	r3, r0
 8001afe:	029a      	lsls	r2, r3, #10
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	4413      	add	r3, r2
 8001b04:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	1ac9      	subs	r1, r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	400b      	ands	r3, r1
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d138      	bne.n	8001b8c <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8001b1a:	69f8      	ldr	r0, [r7, #28]
 8001b1c:	f7ff fb90 	bl	8001240 <lfs_tag_isdelete>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8001b26:	f06f 0301 	mvn.w	r3, #1
 8001b2a:	e03b      	b.n	8001ba4 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001b2c:	69f8      	ldr	r0, [r7, #28]
 8001b2e:	f7ff fbee 	bl	800130e <lfs_tag_size>
 8001b32:	4603      	mov	r3, r0
 8001b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fe7a 	bl	8000830 <lfs_min>
 8001b3c:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001b3e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b48:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001b4a:	3204      	adds	r2, #4
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	9103      	str	r1, [sp, #12]
 8001b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b52:	9102      	str	r1, [sp, #8]
 8001b54:	9201      	str	r2, [sp, #4]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7fe ff3a 	bl	80009d8 <lfs_bd_read>
 8001b64:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <lfs_dir_getslice+0x18c>
                return err;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	e019      	b.n	8001ba4 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001b70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	18d0      	adds	r0, r2, r3
 8001b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f00a f85c 	bl	800bc3c <memset>

            return tag + gdiff;
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	4413      	add	r3, r2
 8001b8a:	e00b      	b.n	8001ba4 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fbc9 	bl	8001326 <lfs_tag_dsize>
 8001b94:	4603      	mov	r3, r0
 8001b96:	3304      	adds	r3, #4
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	f4bf af56 	bcs.w	8001a4c <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001ba0:	f06f 0301 	mvn.w	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	372c      	adds	r7, #44	; 0x2c
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	000ffc00 	.word	0x000ffc00

08001bb0 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af04      	add	r7, sp, #16
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f7ff fba5 	bl	800130e <lfs_tag_size>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff ff04 	bl	80019e4 <lfs_dir_getslice>
 8001bdc:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b08c      	sub	sp, #48	; 0x30
 8001bea:	af04      	add	r7, sp, #16
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bfc:	441a      	add	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	f240 80c0 	bls.w	8001d8a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001c0a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001c0e:	e0c1      	b.n	8001d94 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c12:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d03f      	beq.n	8001c9a <lfs_dir_getread+0xb4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f113 0f02 	cmn.w	r3, #2
 8001c22:	d13a      	bne.n	8001c9a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d232      	bcs.n	8001c9a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d324      	bcc.n	8001c88 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c48:	1acb      	subs	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	69b8      	ldr	r0, [r7, #24]
 8001c50:	f7fe fdee 	bl	8000830 <lfs_min>
 8001c54:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c60:	1acb      	subs	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4619      	mov	r1, r3
 8001c68:	69f8      	ldr	r0, [r7, #28]
 8001c6a:	f00a f8b8 	bl	800bdde <memcpy>

                data += diff;
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	4413      	add	r3, r2
 8001c74:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001c86:	e080      	b.n	8001d8a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4619      	mov	r1, r3
 8001c92:	69b8      	ldr	r0, [r7, #24]
 8001c94:	f7fe fdcc 	bl	8000830 <lfs_min>
 8001c98:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f113 0f02 	cmn.w	r3, #2
 8001ca2:	d13a      	bne.n	8001d1a <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d232      	bcs.n	8001d1a <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d324      	bcc.n	8001d08 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc8:	1acb      	subs	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	69b8      	ldr	r0, [r7, #24]
 8001cd0:	f7fe fdae 	bl	8000830 <lfs_min>
 8001cd4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ce0:	1acb      	subs	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	69f8      	ldr	r0, [r7, #28]
 8001cea:	f00a f878 	bl	800bdde <memcpy>

                data += diff;
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001d06:	e040      	b.n	8001d8a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	69b8      	ldr	r0, [r7, #24]
 8001d14:	f7fe fd8c 	bl	8000830 <lfs_min>
 8001d18:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f06f 0201 	mvn.w	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d2c:	f7fe fd8f 	bl	800084e <lfs_aligndown>
 8001d30:	4602      	mov	r2, r0
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	441a      	add	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f7fe fd96 	bl	8000876 <lfs_alignup>
 8001d4a:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f7fe fd6b 	bl	8000830 <lfs_min>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001d68:	6839      	ldr	r1, [r7, #0]
 8001d6a:	6889      	ldr	r1, [r1, #8]
 8001d6c:	9102      	str	r1, [sp, #8]
 8001d6e:	9201      	str	r2, [sp, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fe33 	bl	80019e4 <lfs_dir_getslice>
 8001d7e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	da01      	bge.n	8001d8a <lfs_dir_getread+0x1a4>
            return err;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	e004      	b.n	8001d94 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f af3f 	bne.w	8001c10 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <lfs_dir_traverse_filter+0x1e>
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <lfs_dir_traverse_filter+0xac>)
 8001db8:	e000      	b.n	8001dbc <lfs_dir_traverse_filter+0x20>
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001dbc:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	405a      	eors	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d014      	beq.n	8001df8 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fa34 	bl	8001240 <lfs_tag_isdelete>
 8001dd8:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <lfs_dir_traverse_filter+0xac>)
 8001de2:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	6819      	ldr	r1, [r3, #0]
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <lfs_dir_traverse_filter+0xb4>)
 8001dea:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001dec:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001df0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d104      	bne.n	8001e02 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
        return true;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e01e      	b.n	8001e40 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7ff fa2e 	bl	8001264 <lfs_tag_type1>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0e:	d116      	bne.n	8001e3e <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001e10:	68b8      	ldr	r0, [r7, #8]
 8001e12:	f7ff fa6d 	bl	80012f0 <lfs_tag_id>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461c      	mov	r4, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fa66 	bl	80012f0 <lfs_tag_id>
 8001e24:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001e26:	429c      	cmp	r4, r3
 8001e28:	d809      	bhi.n	8001e3e <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001e2a:	68b8      	ldr	r0, [r7, #8]
 8001e2c:	f7ff fa53 	bl	80012d6 <lfs_tag_splice>
 8001e30:	4603      	mov	r3, r0
 8001e32:	029a      	lsls	r2, r3, #10
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	441a      	add	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd90      	pop	{r4, r7, pc}
 8001e48:	7ffffc00 	.word	0x7ffffc00
 8001e4c:	700ffc00 	.word	0x700ffc00
 8001e50:	000ffc00 	.word	0x000ffc00

08001e54 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b0c1      	sub	sp, #260	; 0x104
 8001e58:	af04      	add	r7, sp, #16
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001e68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001e72:	6838      	ldr	r0, [r7, #0]
 8001e74:	f7ff fa57 	bl	8001326 <lfs_tag_dsize>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	441a      	add	r2, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d237      	bcs.n	8001ef6 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f7ff fa4d 	bl	8001326 <lfs_tag_dsize>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001e94:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	9203      	str	r2, [sp, #12]
 8001e9e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ea2:	9202      	str	r2, [sp, #8]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2304      	movs	r3, #4
 8001eac:	460a      	mov	r2, r1
 8001eae:	2100      	movs	r1, #0
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7fe fd91 	bl	80009d8 <lfs_bd_read>
 8001eb6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8001eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <lfs_dir_traverse+0x74>
                    return err;
 8001ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ec6:	e3a5      	b.n	8002614 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fd31 	bl	8000932 <lfs_frombe32>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	4053      	eors	r3, r2
 8001ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001ee8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	e01b      	b.n	8001f2e <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	dd13      	ble.n	8001f26 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8001efe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8001f06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8001f10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001f14:	3308      	adds	r3, #8
 8001f16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8001f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f24:	e003      	b.n	8001f2e <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8001f2c:	e2a1      	b.n	8002472 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8001f2e:	4b7e      	ldr	r3, [pc, #504]	; (8002128 <lfs_dir_traverse+0x2d4>)
 8001f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8001f34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f3a:	405a      	eors	r2, r3
 8001f3c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001f40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f44:	400b      	ands	r3, r1
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 8284 	bne.w	8002456 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8001f4e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001f52:	f7ff f9cd 	bl	80012f0 <lfs_tag_id>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80ef 	beq.w	800213c <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8001f5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d906      	bls.n	8001f74 <lfs_dir_traverse+0x120>
 8001f66:	4b71      	ldr	r3, [pc, #452]	; (800212c <lfs_dir_traverse+0x2d8>)
 8001f68:	4a71      	ldr	r2, [pc, #452]	; (8002130 <lfs_dir_traverse+0x2dc>)
 8001f6a:	f240 31b3 	movw	r1, #947	; 0x3b3
 8001f6e:	4871      	ldr	r0, [pc, #452]	; (8002134 <lfs_dir_traverse+0x2e0>)
 8001f70:	f009 fa78 	bl	800b464 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8001f74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	33f0      	adds	r3, #240	; 0xf0
 8001f84:	443b      	add	r3, r7
 8001f86:	3b98      	subs	r3, #152	; 0x98
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	33f0      	adds	r3, #240	; 0xf0
 8001f9a:	443b      	add	r3, r7
 8001f9c:	3b94      	subs	r3, #148	; 0x94
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	33f0      	adds	r3, #240	; 0xf0
 8001fb0:	443b      	add	r3, r7
 8001fb2:	3b90      	subs	r3, #144	; 0x90
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	33f0      	adds	r3, #240	; 0xf0
 8001fc6:	443b      	add	r3, r7
 8001fc8:	3b8c      	subs	r3, #140	; 0x8c
 8001fca:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	33f0      	adds	r3, #240	; 0xf0
 8001fde:	443b      	add	r3, r7
 8001fe0:	3b88      	subs	r3, #136	; 0x88
 8001fe2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	33f0      	adds	r3, #240	; 0xf0
 8001ff6:	443b      	add	r3, r7
 8001ff8:	3b84      	subs	r3, #132	; 0x84
 8001ffa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	33f0      	adds	r3, #240	; 0xf0
 800200e:	443b      	add	r3, r7
 8002010:	3b80      	subs	r3, #128	; 0x80
 8002012:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800201c:	4613      	mov	r3, r2
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	33f0      	adds	r3, #240	; 0xf0
 8002026:	443b      	add	r3, r7
 8002028:	3b7c      	subs	r3, #124	; 0x7c
 800202a:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	33f0      	adds	r3, #240	; 0xf0
 800203e:	443b      	add	r3, r7
 8002040:	3b7a      	subs	r3, #122	; 0x7a
 8002042:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002046:	801a      	strh	r2, [r3, #0]
 8002048:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800204c:	4613      	mov	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	33f0      	adds	r3, #240	; 0xf0
 8002056:	443b      	add	r3, r7
 8002058:	3b78      	subs	r3, #120	; 0x78
 800205a:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800205e:	801a      	strh	r2, [r3, #0]
 8002060:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	33f0      	adds	r3, #240	; 0xf0
 800206e:	443b      	add	r3, r7
 8002070:	3b74      	subs	r3, #116	; 0x74
 8002072:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	33f0      	adds	r3, #240	; 0xf0
 8002086:	443b      	add	r3, r7
 8002088:	3b70      	subs	r3, #112	; 0x70
 800208a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002094:	4613      	mov	r3, r2
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	33f0      	adds	r3, #240	; 0xf0
 800209e:	443b      	add	r3, r7
 80020a0:	3b6c      	subs	r3, #108	; 0x6c
 80020a2:	6019      	str	r1, [r3, #0]
 80020a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020a8:	4613      	mov	r3, r2
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	33f0      	adds	r3, #240	; 0xf0
 80020b2:	443b      	add	r3, r7
 80020b4:	3b68      	subs	r3, #104	; 0x68
 80020b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	33f0      	adds	r3, #240	; 0xf0
 80020ca:	443b      	add	r3, r7
 80020cc:	3b68      	subs	r3, #104	; 0x68
 80020ce:	3304      	adds	r3, #4
 80020d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80020d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d8:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80020dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80020e0:	3301      	adds	r3, #1
 80020e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <lfs_dir_traverse+0x2e4>)
 8002106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 800210a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800210e:	1e5a      	subs	r2, r3, #1
 8002110:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002114:	4613      	mov	r3, r2
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3328      	adds	r3, #40	; 0x28
 800211e:	440b      	add	r3, r1
 8002120:	3304      	adds	r3, #4
 8002122:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8002126:	e19d      	b.n	8002464 <lfs_dir_traverse+0x610>
 8002128:	7ff00000 	.word	0x7ff00000
 800212c:	0800c94c 	.word	0x0800c94c
 8002130:	0800dba8 	.word	0x0800dba8
 8002134:	0800c830 	.word	0x0800c830
 8002138:	08001d9d 	.word	0x08001d9d
            }
        }

popped:
 800213c:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800213e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002142:	f7ff f8d5 	bl	80012f0 <lfs_tag_id>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800214c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f8ce 	bl	80012f0 <lfs_tag_id>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002158:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800215c:	4293      	cmp	r3, r2
 800215e:	f200 817c 	bhi.w	800245a <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f8c3 	bl	80012f0 <lfs_tag_id>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8002172:	4293      	cmp	r3, r2
 8002174:	f240 8171 	bls.w	800245a <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f890 	bl	80012a0 <lfs_tag_type3>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	f43f ae75 	beq.w	8001e72 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f888 	bl	80012a0 <lfs_tag_type3>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	f240 1301 	movw	r3, #257	; 0x101
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 80e0 	bne.w	800235e <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800219e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021a2:	4ab1      	ldr	r2, [pc, #708]	; (8002468 <lfs_dir_traverse+0x614>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	f000 815a 	beq.w	800245e <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80021aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	33f0      	adds	r3, #240	; 0xf0
 80021b8:	443b      	add	r3, r7
 80021ba:	3b98      	subs	r3, #152	; 0x98
 80021bc:	4618      	mov	r0, r3
 80021be:	233c      	movs	r3, #60	; 0x3c
 80021c0:	461a      	mov	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	f009 fd3a 	bl	800bc3c <memset>
 80021c8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	33f0      	adds	r3, #240	; 0xf0
 80021d6:	443b      	add	r3, r7
 80021d8:	3b98      	subs	r3, #152	; 0x98
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	33f0      	adds	r3, #240	; 0xf0
 80021ec:	443b      	add	r3, r7
 80021ee:	3b94      	subs	r3, #148	; 0x94
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	33f0      	adds	r3, #240	; 0xf0
 8002202:	443b      	add	r3, r7
 8002204:	3b90      	subs	r3, #144	; 0x90
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	33f0      	adds	r3, #240	; 0xf0
 8002218:	443b      	add	r3, r7
 800221a:	3b8c      	subs	r3, #140	; 0x8c
 800221c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	33f0      	adds	r3, #240	; 0xf0
 8002230:	443b      	add	r3, r7
 8002232:	3b88      	subs	r3, #136	; 0x88
 8002234:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	33f0      	adds	r3, #240	; 0xf0
 8002248:	443b      	add	r3, r7
 800224a:	3b84      	subs	r3, #132	; 0x84
 800224c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	33f0      	adds	r3, #240	; 0xf0
 8002260:	443b      	add	r3, r7
 8002262:	3b80      	subs	r3, #128	; 0x80
 8002264:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	33f0      	adds	r3, #240	; 0xf0
 8002278:	443b      	add	r3, r7
 800227a:	3b7c      	subs	r3, #124	; 0x7c
 800227c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8002280:	801a      	strh	r2, [r3, #0]
 8002282:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	33f0      	adds	r3, #240	; 0xf0
 8002290:	443b      	add	r3, r7
 8002292:	3b7a      	subs	r3, #122	; 0x7a
 8002294:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	33f0      	adds	r3, #240	; 0xf0
 80022a8:	443b      	add	r3, r7
 80022aa:	3b78      	subs	r3, #120	; 0x78
 80022ac:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	33f0      	adds	r3, #240	; 0xf0
 80022c0:	443b      	add	r3, r7
 80022c2:	3b74      	subs	r3, #116	; 0x74
 80022c4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	33f0      	adds	r3, #240	; 0xf0
 80022d8:	443b      	add	r3, r7
 80022da:	3b70      	subs	r3, #112	; 0x70
 80022dc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80022e0:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80022e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80022e6:	3301      	adds	r3, #1
 80022e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f80d 	bl	800130e <lfs_tag_size>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe fff7 	bl	80012f0 <lfs_tag_id>
 8002302:	4603      	mov	r3, r0
 8002304:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230c:	60bb      	str	r3, [r7, #8]
            off = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002316:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002324:	4b51      	ldr	r3, [pc, #324]	; (800246c <lfs_dir_traverse+0x618>)
 8002326:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800232a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800232e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8002332:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002336:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 800233a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800233e:	3301      	adds	r3, #1
 8002340:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8002344:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002348:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	b29a      	uxth	r2, r3
 8002350:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002354:	4413      	add	r3, r2
 8002356:	b29b      	uxth	r3, r3
 8002358:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 800235c:	e589      	b.n	8001e72 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff9d 	bl	80012a0 <lfs_tag_type3>
 8002366:	4603      	mov	r3, r0
 8002368:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800236c:	d159      	bne.n	8002422 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002374:	e04b      	b.n	800240e <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800237e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	461a      	mov	r2, r3
 800238c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002398:	051c      	lsls	r4, r3, #20
 800239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ffa7 	bl	80012f0 <lfs_tag_id>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80023aa:	4413      	add	r3, r2
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	ea44 0103 	orr.w	r1, r4, r3
 80023b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	461a      	mov	r2, r3
 80023c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023c4:	4413      	add	r3, r2
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80023ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	461a      	mov	r2, r3
 80023d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023dc:	4413      	add	r3, r2
 80023de:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80023e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023e4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80023e8:	4798      	blx	r3
 80023ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80023ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da02      	bge.n	80023fc <lfs_dir_traverse+0x5a8>
                    return res;
 80023f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80023fa:	e10b      	b.n	8002614 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 80023fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d12e      	bne.n	8002462 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002408:	3301      	adds	r3, #1
 800240a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800240e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ff7c 	bl	800130e <lfs_tag_size>
 8002416:	4602      	mov	r2, r0
 8002418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800241c:	4293      	cmp	r3, r2
 800241e:	d3aa      	bcc.n	8002376 <lfs_dir_traverse+0x522>
 8002420:	e527      	b.n	8001e72 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8002422:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002426:	029a      	lsls	r2, r3, #10
 8002428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800242a:	18d1      	adds	r1, r2, r3
 800242c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002430:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002434:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002438:	4798      	blx	r3
 800243a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 800243e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002442:	2b00      	cmp	r3, #0
 8002444:	da02      	bge.n	800244c <lfs_dir_traverse+0x5f8>
                return res;
 8002446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800244a:	e0e3      	b.n	8002614 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800244c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <lfs_dir_traverse+0x61c>
 8002454:	e50d      	b.n	8001e72 <lfs_dir_traverse+0x1e>
                continue;
 8002456:	bf00      	nop
 8002458:	e50b      	b.n	8001e72 <lfs_dir_traverse+0x1e>
            continue;
 800245a:	bf00      	nop
 800245c:	e509      	b.n	8001e72 <lfs_dir_traverse+0x1e>
                continue;
 800245e:	bf00      	nop
 8002460:	e507      	b.n	8001e72 <lfs_dir_traverse+0x1e>
                    break;
 8002462:	bf00      	nop
        {
 8002464:	e505      	b.n	8001e72 <lfs_dir_traverse+0x1e>
 8002466:	bf00      	nop
 8002468:	08001d9d 	.word	0x08001d9d
 800246c:	600ffc00 	.word	0x600ffc00
                break;
 8002470:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8002472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80ca 	beq.w	8002610 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800247c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	33f0      	adds	r3, #240	; 0xf0
 800248c:	443b      	add	r3, r7
 800248e:	3b98      	subs	r3, #152	; 0x98
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002494:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	33f0      	adds	r3, #240	; 0xf0
 80024a4:	443b      	add	r3, r7
 80024a6:	3b94      	subs	r3, #148	; 0x94
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80024ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024b0:	1e5a      	subs	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	33f0      	adds	r3, #240	; 0xf0
 80024bc:	443b      	add	r3, r7
 80024be:	3b90      	subs	r3, #144	; 0x90
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80024c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	33f0      	adds	r3, #240	; 0xf0
 80024d4:	443b      	add	r3, r7
 80024d6:	3b8c      	subs	r3, #140	; 0x8c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80024de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	33f0      	adds	r3, #240	; 0xf0
 80024ee:	443b      	add	r3, r7
 80024f0:	3b88      	subs	r3, #136	; 0x88
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80024f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	33f0      	adds	r3, #240	; 0xf0
 8002508:	443b      	add	r3, r7
 800250a:	3b84      	subs	r3, #132	; 0x84
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 8002512:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002516:	1e5a      	subs	r2, r3, #1
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	33f0      	adds	r3, #240	; 0xf0
 8002522:	443b      	add	r3, r7
 8002524:	3b80      	subs	r3, #128	; 0x80
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 800252c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	33f0      	adds	r3, #240	; 0xf0
 800253c:	443b      	add	r3, r7
 800253e:	3b7c      	subs	r3, #124	; 0x7c
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8002546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	33f0      	adds	r3, #240	; 0xf0
 8002556:	443b      	add	r3, r7
 8002558:	3b7a      	subs	r3, #122	; 0x7a
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 8002560:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	33f0      	adds	r3, #240	; 0xf0
 8002570:	443b      	add	r3, r7
 8002572:	3b78      	subs	r3, #120	; 0x78
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800257a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800257e:	1e5a      	subs	r2, r3, #1
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	33f0      	adds	r3, #240	; 0xf0
 800258a:	443b      	add	r3, r7
 800258c:	3b74      	subs	r3, #116	; 0x74
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8002594:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	33f0      	adds	r3, #240	; 0xf0
 80025a4:	443b      	add	r3, r7
 80025a6:	3b70      	subs	r3, #112	; 0x70
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80025ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025b2:	1e5a      	subs	r2, r3, #1
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	33f0      	adds	r3, #240	; 0xf0
 80025be:	443b      	add	r3, r7
 80025c0:	3b6c      	subs	r3, #108	; 0x6c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80025c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025ca:	1e5a      	subs	r2, r3, #1
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	33f0      	adds	r3, #240	; 0xf0
 80025d6:	443b      	add	r3, r7
 80025d8:	3b68      	subs	r3, #104	; 0x68
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80025e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	33f0      	adds	r3, #240	; 0xf0
 80025f0:	443b      	add	r3, r7
 80025f2:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80025f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025fa:	3204      	adds	r2, #4
 80025fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002600:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002604:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002608:	3b01      	subs	r3, #1
 800260a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 800260e:	e596      	b.n	800213e <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 8002610:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002614:	4618      	mov	r0, r3
 8002616:	37f4      	adds	r7, #244	; 0xf4
 8002618:	46bd      	mov	sp, r7
 800261a:	bd90      	pop	{r4, r7, pc}

0800261c <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800261c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261e:	b0a5      	sub	sp, #148	; 0x94
 8002620:	af04      	add	r7, sp, #16
 8002622:	6178      	str	r0, [r7, #20]
 8002624:	6139      	str	r1, [r7, #16]
 8002626:	60fa      	str	r2, [r7, #12]
 8002628:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800262e:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00f      	beq.n	8002658 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002640:	429a      	cmp	r2, r3
 8002642:	d206      	bcs.n	8002652 <lfs_dir_fetchmatch+0x36>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3304      	adds	r3, #4
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264e:	429a      	cmp	r2, r3
 8002650:	d302      	bcc.n	8002658 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 8002652:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002656:	e3a4      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002658:	2300      	movs	r3, #0
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
 800265c:	2300      	movs	r3, #0
 800265e:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002664:	2300      	movs	r3, #0
 8002666:	677b      	str	r3, [r7, #116]	; 0x74
 8002668:	e05a      	b.n	8002720 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800266a:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800266c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002674:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002676:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800267a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8002680:	2104      	movs	r1, #4
 8002682:	9103      	str	r1, [sp, #12]
 8002684:	9202      	str	r2, [sp, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	9201      	str	r2, [sp, #4]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2304      	movs	r3, #4
 800268e:	4602      	mov	r2, r0
 8002690:	2100      	movs	r1, #0
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7fe f9a0 	bl	80009d8 <lfs_bd_read>
 8002698:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800269a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3378      	adds	r3, #120	; 0x78
 80026a0:	f107 0208 	add.w	r2, r7, #8
 80026a4:	4413      	add	r3, r2
 80026a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe f92b 	bl	8000906 <lfs_fromle32>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3378      	adds	r3, #120	; 0x78
 80026b8:	f107 0108 	add.w	r1, r7, #8
 80026bc:	440b      	add	r3, r1
 80026be:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80026c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <lfs_dir_fetchmatch+0xb8>
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80026ce:	d001      	beq.n	80026d4 <lfs_dir_fetchmatch+0xb8>
            return err;
 80026d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d2:	e366      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 80026d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80026da:	d01e      	beq.n	800271a <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80026dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	3378      	adds	r3, #120	; 0x78
 80026e2:	f107 0208 	add.w	r2, r7, #8
 80026e6:	4413      	add	r3, r2
 80026e8:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80026ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ee:	3301      	adds	r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	bfb8      	it	lt
 80026f8:	425b      	neglt	r3, r3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	3378      	adds	r3, #120	; 0x78
 80026fe:	f107 0108 	add.w	r1, r7, #8
 8002702:	440b      	add	r3, r1
 8002704:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7fe f8ee 	bl	80008ec <lfs_scmp>
 8002710:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	dd01      	ble.n	800271a <lfs_dir_fetchmatch+0xfe>
            r = i;
 8002716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002718:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 800271a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271c:	3301      	adds	r3, #1
 800271e:	677b      	str	r3, [r7, #116]	; 0x74
 8002720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002722:	2b01      	cmp	r3, #1
 8002724:	dda1      	ble.n	800266a <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002728:	2b00      	cmp	r3, #0
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	bfb8      	it	lt
 8002730:	425b      	neglt	r3, r3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800273e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002740:	3301      	adds	r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	bfb8      	it	lt
 800274a:	425b      	neglt	r3, r3
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275a:	2b00      	cmp	r3, #0
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	bfb8      	it	lt
 8002762:	425b      	neglt	r3, r3
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3378      	adds	r3, #120	; 0x78
 8002768:	f107 0208 	add.w	r2, r7, #8
 800276c:	4413      	add	r3, r2
 800276e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800277c:	2300      	movs	r3, #0
 800277e:	673b      	str	r3, [r7, #112]	; 0x70
 8002780:	e2fb      	b.n	8002d7a <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8002792:	4aa9      	ldr	r2, [pc, #676]	; (8002a38 <lfs_dir_fetchmatch+0x41c>)
 8002794:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279c:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80027a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a8:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe f8ad 	bl	800091a <lfs_tole32>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3308      	adds	r3, #8
 80027ca:	2204      	movs	r2, #4
 80027cc:	4619      	mov	r1, r3
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d2:	f004 ff85 	bl	80076e0 <lfs_crc>
 80027d6:	4603      	mov	r3, r0
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe f891 	bl	8000906 <lfs_fromle32>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80027ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027ec:	f7fe fd9b 	bl	8001326 <lfs_tag_dsize>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f4:	4413      	add	r3, r2
 80027f6:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 80027f8:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027fe:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2204      	movs	r2, #4
 8002806:	9203      	str	r2, [sp, #12]
 8002808:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800280c:	9202      	str	r2, [sp, #8]
 800280e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002810:	9201      	str	r2, [sp, #4]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4603      	mov	r3, r0
 8002816:	460a      	mov	r2, r1
 8002818:	2100      	movs	r1, #0
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7fe f8dc 	bl	80009d8 <lfs_bd_read>
 8002820:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8002822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8002828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800282e:	f000 81d6 	beq.w	8002bde <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 8002832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002834:	e2b5      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800283c:	2204      	movs	r2, #4
 800283e:	4618      	mov	r0, r3
 8002840:	f004 ff4e 	bl	80076e0 <lfs_crc>
 8002844:	4603      	mov	r3, r0
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f871 	bl	8000932 <lfs_frombe32>
 8002850:	4602      	mov	r2, r0
 8002852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002854:	4053      	eors	r3, r2
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fce3 	bl	8001226 <lfs_tag_isvalid>
 8002860:	4603      	mov	r3, r0
 8002862:	f083 0301 	eor.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800286c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800286e:	f7fe fd08 	bl	8001282 <lfs_tag_type2>
 8002872:	4603      	mov	r3, r0
 8002874:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 8002882:	e1bb      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fd4d 	bl	8001326 <lfs_tag_dsize>
 800288c:	4602      	mov	r2, r0
 800288e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002890:	441a      	add	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	429a      	cmp	r2, r3
 800289a:	f200 81a2 	bhi.w	8002be2 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fcec 	bl	8001282 <lfs_tag_type2>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028b0:	d15e      	bne.n	8002970 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80028b2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c0:	3204      	adds	r2, #4
 80028c2:	2104      	movs	r1, #4
 80028c4:	9103      	str	r1, [sp, #12]
 80028c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80028ca:	9102      	str	r1, [sp, #8]
 80028cc:	9201      	str	r2, [sp, #4]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	4623      	mov	r3, r4
 80028d2:	4602      	mov	r2, r0
 80028d4:	2100      	movs	r1, #0
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7fe f87e 	bl	80009d8 <lfs_bd_read>
 80028dc:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80028de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d006      	beq.n	80028f2 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 80028e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80028ea:	f000 817c 	beq.w	8002be6 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 80028ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 80028f0:	e257      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe f806 	bl	8000906 <lfs_fromle32>
 80028fa:	4603      	mov	r3, r0
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 80028fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	429a      	cmp	r2, r3
 8002904:	f040 8171 	bne.w	8002bea <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fcd7 	bl	80012be <lfs_tag_chunk>
 8002910:	4603      	mov	r3, r0
 8002912:	07db      	lsls	r3, r3, #31
 8002914:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002916:	4053      	eors	r3, r2
 8002918:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002922:	2204      	movs	r2, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f004 fedb 	bl	80076e0 <lfs_crc>
 800292a:	4602      	mov	r2, r0
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002932:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fcf5 	bl	8001326 <lfs_tag_dsize>
 800293c:	4602      	mov	r2, r0
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002940:	441a      	add	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800294a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002952:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800295a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002966:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
 800296e:	e73c      	b.n	80027ea <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002970:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fcce 	bl	8001326 <lfs_tag_dsize>
 800298a:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800298c:	3b04      	subs	r3, #4
 800298e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002992:	9203      	str	r2, [sp, #12]
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	9501      	str	r5, [sp, #4]
 8002998:	9400      	str	r4, [sp, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4632      	mov	r2, r6
 800299e:	2100      	movs	r1, #0
 80029a0:	6978      	ldr	r0, [r7, #20]
 80029a2:	f7fe f9b6 	bl	8000d12 <lfs_bd_crc>
 80029a6:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 80029a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 80029ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029b4:	f000 811b 	beq.w	8002bee <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 80029b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ba:	e1f2      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fc50 	bl	8001264 <lfs_tag_type1>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d113      	bne.n	80029f2 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fc8f 	bl	80012f0 <lfs_tag_id>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80029da:	4293      	cmp	r3, r2
 80029dc:	f200 80b6 	bhi.w	8002b4c <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fc84 	bl	80012f0 <lfs_tag_id>
 80029e8:	4603      	mov	r3, r0
 80029ea:	3301      	adds	r3, #1
 80029ec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80029f0:	e0ac      	b.n	8002b4c <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fc35 	bl	8001264 <lfs_tag_type1>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a00:	d13a      	bne.n	8002a78 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fc66 	bl	80012d6 <lfs_tag_splice>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a12:	4413      	add	r3, r2
 8002a14:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <lfs_dir_fetchmatch+0x420>)
 8002a1c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002a1e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002a22:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d109      	bne.n	8002a40 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8002a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a32:	663b      	str	r3, [r7, #96]	; 0x60
 8002a34:	e08a      	b.n	8002b4c <lfs_dir_fetchmatch+0x530>
 8002a36:	bf00      	nop
 8002a38:	0800c98c 	.word	0x0800c98c
 8002a3c:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a46:	f000 8081 	beq.w	8002b4c <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fc4f 	bl	80012f0 <lfs_tag_id>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461c      	mov	r4, r3
 8002a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fc49 	bl	80012f0 <lfs_tag_id>
 8002a5e:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d873      	bhi.n	8002b4c <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fc35 	bl	80012d6 <lfs_tag_splice>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	029a      	lsls	r2, r3, #10
 8002a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a72:	4413      	add	r3, r2
 8002a74:	663b      	str	r3, [r7, #96]	; 0x60
 8002a76:	e069      	b.n	8002b4c <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fbf2 	bl	8001264 <lfs_tag_type1>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a86:	d132      	bne.n	8002aee <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fc17 	bl	80012be <lfs_tag_chunk>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8002aa2:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aa8:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ab0:	3204      	adds	r2, #4
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	9103      	str	r1, [sp, #12]
 8002ab6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002aba:	9102      	str	r1, [sp, #8]
 8002abc:	9201      	str	r2, [sp, #4]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4623      	mov	r3, r4
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7fd ff86 	bl	80009d8 <lfs_bd_read>
 8002acc:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8002ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ada:	f000 808a 	beq.w	8002bf2 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	e15f      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8002ae2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fb69 	bl	80011be <lfs_pair_fromle32>
 8002aec:	e02e      	b.n	8002b4c <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fbd5 	bl	80012a0 <lfs_tag_type3>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d124      	bne.n	8002b4c <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8002b02:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b08:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b10:	3204      	adds	r2, #4
 8002b12:	2108      	movs	r1, #8
 8002b14:	9103      	str	r1, [sp, #12]
 8002b16:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002b1a:	9102      	str	r1, [sp, #8]
 8002b1c:	9201      	str	r2, [sp, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	4623      	mov	r3, r4
 8002b22:	4602      	mov	r2, r0
 8002b24:	2100      	movs	r1, #0
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7fd ff56 	bl	80009d8 <lfs_bd_read>
 8002b2c:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8002b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b36:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002b3a:	d05c      	beq.n	8002bf6 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002b3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fced 	bl	8001520 <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b52:	405a      	eors	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f ae46 	bne.w	80027ea <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002b64:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	f107 0220 	add.w	r2, r7, #32
 8002b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b74:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002b78:	4798      	blx	r3
 8002b7a:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da05      	bge.n	8002b8e <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8002b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b84:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002b88:	d037      	beq.n	8002bfa <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002b8c:	e109      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	663b      	str	r3, [r7, #96]	; 0x60
 8002b98:	e627      	b.n	80027ea <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b9e:	405a      	eors	r2, r3
 8002ba0:	4b82      	ldr	r3, [pc, #520]	; (8002dac <lfs_dir_fetchmatch+0x790>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bac:	663b      	str	r3, [r7, #96]	; 0x60
 8002bae:	e61c      	b.n	80027ea <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f47f ae19 	bne.w	80027ea <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fb98 	bl	80012f0 <lfs_tag_id>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461c      	mov	r4, r3
 8002bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fb92 	bl	80012f0 <lfs_tag_id>
 8002bcc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	f63f ae0b 	bhi.w	80027ea <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bda:	663b      	str	r3, [r7, #96]	; 0x60
 8002bdc:	e605      	b.n	80027ea <lfs_dir_fetchmatch+0x1ce>
                    break;
 8002bde:	bf00      	nop
 8002be0:	e00c      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                break;
 8002be2:	bf00      	nop
 8002be4:	e00a      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002be6:	bf00      	nop
 8002be8:	e008      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002bea:	bf00      	nop
 8002bec:	e006      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002bee:	bf00      	nop
 8002bf0:	e004      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002bfa:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d000      	beq.n	8002c06 <lfs_dir_fetchmatch+0x5ea>
 8002c04:	e017      	b.n	8002c36 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fa55 	bl	80010b8 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c10:	3301      	adds	r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	bfb8      	it	lt
 8002c1a:	425b      	neglt	r3, r3
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	3378      	adds	r3, #120	; 0x78
 8002c20:	f107 0208 	add.w	r2, r7, #8
 8002c24:	4413      	add	r3, r2
 8002c26:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c30:	3301      	adds	r3, #1
 8002c32:	673b      	str	r3, [r7, #112]	; 0x70
 8002c34:	e0a1      	b.n	8002d7a <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d03a      	beq.n	8002cba <lfs_dir_fetchmatch+0x69e>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c4c:	6992      	ldr	r2, [r2, #24]
 8002c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c52:	fb01 f202 	mul.w	r2, r1, r2
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12e      	bne.n	8002cba <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002c5c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02a      	beq.n	8002cba <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c68:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002c6a:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c70:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c7c:	f107 001c 	add.w	r0, r7, #28
 8002c80:	9003      	str	r0, [sp, #12]
 8002c82:	9102      	str	r1, [sp, #8]
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	462b      	mov	r3, r5
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7fe f83f 	bl	8000d12 <lfs_bd_crc>
 8002c94:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <lfs_dir_fetchmatch+0x68c>
 8002c9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c9e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ca2:	d001      	beq.n	8002ca8 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8002ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca6:	e07c      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	333c      	adds	r3, #60	; 0x3c
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fbcc 	bl	8001460 <lfs_gstate_hasmovehere>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d028      	beq.n	8002d20 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fb0c 	bl	80012f0 <lfs_tag_id>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461c      	mov	r4, r3
 8002cdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fb06 	bl	80012f0 <lfs_tag_id>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	429c      	cmp	r4, r3
 8002ce8:	d104      	bne.n	8002cf4 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8002cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cf2:	e015      	b.n	8002d20 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8002cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d011      	beq.n	8002d20 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe faf5 	bl	80012f0 <lfs_tag_id>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461c      	mov	r4, r3
 8002d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe faef 	bl	80012f0 <lfs_tag_id>
 8002d12:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002d14:	429c      	cmp	r4, r3
 8002d16:	d203      	bcs.n	8002d20 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002d18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d1a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d010      	beq.n	8002d4a <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002d28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fae0 	bl	80012f0 <lfs_tag_id>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	8a9b      	ldrh	r3, [r3, #20]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7fd fd78 	bl	8000830 <lfs_min>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d48:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002d4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fa6a 	bl	8001226 <lfs_tag_isvalid>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <lfs_dir_fetchmatch+0x740>
            return besttag;
 8002d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d5a:	e022      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fac6 	bl	80012f0 <lfs_tag_id>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	8a9b      	ldrh	r3, [r3, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d202      	bcs.n	8002d76 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8002d70:	f06f 0301 	mvn.w	r3, #1
 8002d74:	e015      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e013      	b.n	8002da2 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f77f ad00 	ble.w	8002782 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4909      	ldr	r1, [pc, #36]	; (8002db0 <lfs_dir_fetchmatch+0x794>)
 8002d8c:	9101      	str	r1, [sp, #4]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	f240 5256 	movw	r2, #1366	; 0x556
 8002d96:	4907      	ldr	r1, [pc, #28]	; (8002db4 <lfs_dir_fetchmatch+0x798>)
 8002d98:	4807      	ldr	r0, [pc, #28]	; (8002db8 <lfs_dir_fetchmatch+0x79c>)
 8002d9a:	f008 fdf9 	bl	800b990 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002d9e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3784      	adds	r7, #132	; 0x84
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	7ffffc00 	.word	0x7ffffc00
 8002db0:	0800c948 	.word	0x0800c948
 8002db4:	0800c830 	.word	0x0800c830
 8002db8:	0800c954 	.word	0x0800c954

08002dbc <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fc1a 	bl	800261c <lfs_dir_fetchmatch>
 8002de8:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002e00:	f107 0310 	add.w	r3, r7, #16
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <lfs_dir_getgstate+0x5c>)
 8002e08:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <lfs_dir_getgstate+0x60>)
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7fe fecf 	bl	8001bb0 <lfs_dir_get>
 8002e12:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da05      	bge.n	8002e26 <lfs_dir_getgstate+0x32>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f113 0f02 	cmn.w	r3, #2
 8002e20:	d001      	beq.n	8002e26 <lfs_dir_getgstate+0x32>
        return res;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	e00f      	b.n	8002e46 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f113 0f02 	cmn.w	r3, #2
 8002e2c:	d00a      	beq.n	8002e44 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fb34 	bl	80014a0 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002e38:	f107 0310 	add.w	r3, r7, #16
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fa85 	bl	800134e <lfs_gstate_xor>
    }

    return 0;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	7ff0000c 	.word	0x7ff0000c
 8002e54:	7ff00000 	.word	0x7ff00000

08002e58 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b08f      	sub	sp, #60	; 0x3c
 8002e5c:	af04      	add	r7, sp, #16
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	689c      	ldr	r4, [r3, #8]
 8002e76:	68b8      	ldr	r0, [r7, #8]
 8002e78:	f7fe fa49 	bl	800130e <lfs_tag_size>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4620      	mov	r0, r4
 8002e82:	f7fd fcd5 	bl	8000830 <lfs_min>
 8002e86:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002e88:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8002e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e94:	6849      	ldr	r1, [r1, #4]
 8002e96:	69b8      	ldr	r0, [r7, #24]
 8002e98:	9003      	str	r0, [sp, #12]
 8002e9a:	9102      	str	r1, [sp, #8]
 8002e9c:	9201      	str	r2, [sp, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	6a38      	ldr	r0, [r7, #32]
 8002ea8:	f7fd fee2 	bl	8000c70 <lfs_bd_cmp>
 8002eac:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <lfs_dir_find_match+0x60>
        return res;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	e014      	b.n	8002ee2 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	689c      	ldr	r4, [r3, #8]
 8002ebc:	68b8      	ldr	r0, [r7, #8]
 8002ebe:	f7fe fa26 	bl	800130e <lfs_tag_size>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d00b      	beq.n	8002ee0 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	689c      	ldr	r4, [r3, #8]
 8002ecc:	68b8      	ldr	r0, [r7, #8]
 8002ece:	f7fe fa1e 	bl	800130e <lfs_tag_size>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	d201      	bcs.n	8002edc <lfs_dir_find_match+0x84>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e002      	b.n	8002ee2 <lfs_dir_find_match+0x8a>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e000      	b.n	8002ee2 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	372c      	adds	r7, #44	; 0x2c
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}
	...

08002eec <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b093      	sub	sp, #76	; 0x4c
 8002ef0:	af04      	add	r7, sp, #16
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <lfs_dir_find+0x22>
        *id = 0x3ff;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002f0c:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8002f0e:	4b6e      	ldr	r3, [pc, #440]	; (80030c8 <lfs_dir_find+0x1dc>)
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8002f22:	496a      	ldr	r1, [pc, #424]	; (80030cc <lfs_dir_find+0x1e0>)
 8002f24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f26:	f008 febe 	bl	800bca6 <strspn>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2e:	4413      	add	r3, r2
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8002f32:	4966      	ldr	r1, [pc, #408]	; (80030cc <lfs_dir_find+0x1e0>)
 8002f34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f36:	f008 fea5 	bl	800bc84 <strcspn>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <lfs_dir_find+0x62>
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	4b62      	ldr	r3, [pc, #392]	; (80030d0 <lfs_dir_find+0x1e4>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d00a      	beq.n	8002f64 <lfs_dir_find+0x78>
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d10c      	bne.n	8002f6e <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8002f54:	2202      	movs	r2, #2
 8002f56:	495f      	ldr	r1, [pc, #380]	; (80030d4 <lfs_dir_find+0x1e8>)
 8002f58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f5a:	f008 fe5f 	bl	800bc1c <memcmp>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <lfs_dir_find+0x82>
            name += namelen;
 8002f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	4413      	add	r3, r2
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8002f6c:	e7d9      	b.n	8002f22 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8002f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	4413      	add	r3, r2
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8002f7a:	4954      	ldr	r1, [pc, #336]	; (80030cc <lfs_dir_find+0x1e0>)
 8002f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f7e:	f008 fe92 	bl	800bca6 <strspn>
 8002f82:	4602      	mov	r2, r0
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	4413      	add	r3, r2
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8002f8a:	4950      	ldr	r1, [pc, #320]	; (80030cc <lfs_dir_find+0x1e0>)
 8002f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f8e:	f008 fe79 	bl	800bc84 <strcspn>
 8002f92:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01d      	beq.n	8002fd6 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d112      	bne.n	8002fc6 <lfs_dir_find+0xda>
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	494c      	ldr	r1, [pc, #304]	; (80030d4 <lfs_dir_find+0x1e8>)
 8002fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fa6:	f008 fe39 	bl	800bc1c <memcmp>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <lfs_dir_find+0xda>
                depth -= 1;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8002fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8002fc4:	e7ad      	b.n	8002f22 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	3301      	adds	r3, #1
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8002fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8002fd4:	e7d1      	b.n	8002f7a <lfs_dir_find+0x8e>
                break;
 8002fd6:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <lfs_dir_find+0xf8>
            return tag;
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	e06c      	b.n	80030be <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe8:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe f957 	bl	80012a0 <lfs_tag_type3>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d002      	beq.n	8002ffe <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8002ff8:	f06f 0313 	mvn.w	r3, #19
 8002ffc:	e05f      	b.n	80030be <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	4618      	mov	r0, r3
 8003002:	f7fe f975 	bl	80012f0 <lfs_tag_id>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800300e:	429a      	cmp	r2, r3
 8003010:	d01c      	beq.n	800304c <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe f96b 	bl	80012f0 <lfs_tag_id>
 800301a:	4603      	mov	r3, r0
 800301c:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800301e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003022:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <lfs_dir_find+0x1ec>)
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7fe fdbd 	bl	8001bb0 <lfs_dir_get>
 8003036:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	da01      	bge.n	8003042 <lfs_dir_find+0x156>
                return res;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	e03d      	b.n	80030be <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3318      	adds	r3, #24
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f8b9 	bl	80011be <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8003052:	212f      	movs	r1, #47	; 0x2f
 8003054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003056:	f008 fe08 	bl	800bc6a <strchr>
 800305a:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <lfs_dir_find+0x178>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	e000      	b.n	8003066 <lfs_dir_find+0x17a>
 8003064:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	613a      	str	r2, [r7, #16]
 800306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306c:	617a      	str	r2, [r7, #20]
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003072:	f107 0210 	add.w	r2, r7, #16
 8003076:	9203      	str	r2, [sp, #12]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <lfs_dir_find+0x1f0>)
 800307a:	9202      	str	r2, [sp, #8]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8003086:	4622      	mov	r2, r4
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff fac6 	bl	800261c <lfs_dir_fetchmatch>
 8003090:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	da01      	bge.n	800309c <lfs_dir_find+0x1b0>
                return tag;
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	e010      	b.n	80030be <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80030a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	4413      	add	r3, r2
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80030aa:	e73a      	b.n	8002f22 <lfs_dir_find+0x36>
            if (!dir->split) {
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	7ddb      	ldrb	r3, [r3, #23]
 80030b0:	f083 0301 	eor.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0c8      	beq.n	800304c <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80030ba:	f06f 0301 	mvn.w	r3, #1
    }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	373c      	adds	r7, #60	; 0x3c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd90      	pop	{r4, r7, pc}
 80030c6:	bf00      	nop
 80030c8:	002ffc00 	.word	0x002ffc00
 80030cc:	0800c994 	.word	0x0800c994
 80030d0:	0800c998 	.word	0x0800c998
 80030d4:	0800c99c 	.word	0x0800c99c
 80030d8:	700ffc00 	.word	0x700ffc00
 80030dc:	08002e59 	.word	0x08002e59

080030e0 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b08b      	sub	sp, #44	; 0x2c
 80030e4:	af04      	add	r7, sp, #16
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f103 0010 	add.w	r0, r3, #16
 80030f4:	68fc      	ldr	r4, [r7, #12]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	6852      	ldr	r2, [r2, #4]
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	9103      	str	r1, [sp, #12]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	9102      	str	r1, [sp, #8]
 8003106:	9201      	str	r2, [sp, #4]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	4622      	mov	r2, r4
 800310e:	4601      	mov	r1, r0
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7fd fef3 	bl	8000efc <lfs_bd_prog>
 8003116:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <lfs_dir_commitprog+0x42>
        return err;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	e010      	b.n	8003144 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4618      	mov	r0, r3
 800312c:	f004 fad8 	bl	80076e0 <lfs_crc>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	441a      	add	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	605a      	str	r2, [r3, #4]
    return 0;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}

0800314c <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800314c:	b590      	push	{r4, r7, lr}
 800314e:	b08f      	sub	sp, #60	; 0x3c
 8003150:	af04      	add	r7, sp, #16
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe f8e3 	bl	8001326 <lfs_tag_dsize>
 8003160:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	441a      	add	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	429a      	cmp	r2, r3
 8003170:	d902      	bls.n	8003178 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8003172:	f06f 031b 	mvn.w	r3, #27
 8003176:	e065      	b.n	8003244 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4053      	eors	r3, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fbdf 	bl	8000948 <lfs_tobe32>
 800318a:	4603      	mov	r3, r0
 800318c:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800318e:	f107 0214 	add.w	r2, r7, #20
 8003192:	2304      	movs	r3, #4
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff ffa2 	bl	80030e0 <lfs_dir_commitprog>
 800319c:	61f8      	str	r0, [r7, #28]
    if (err) {
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <lfs_dir_commitattr+0x5c>
        return err;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	e04d      	b.n	8003244 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0c      	blt.n	80031c8 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	3b04      	subs	r3, #4
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff ff92 	bl	80030e0 <lfs_dir_commitprog>
 80031bc:	61f8      	str	r0, [r7, #28]
        if (err) {
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d039      	beq.n	8003238 <lfs_dir_commitattr+0xec>
            return err;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	e03d      	b.n	8003244 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
 80031d0:	e02d      	b.n	800322e <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80031d2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80031da:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	440a      	add	r2, r1
 80031e8:	2101      	movs	r1, #1
 80031ea:	9103      	str	r1, [sp, #12]
 80031ec:	f107 0113 	add.w	r1, r7, #19
 80031f0:	9102      	str	r1, [sp, #8]
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	4623      	mov	r3, r4
 80031f8:	4602      	mov	r2, r0
 80031fa:	2100      	movs	r1, #0
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7fd fbeb 	bl	80009d8 <lfs_bd_read>
 8003202:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <lfs_dir_commitattr+0xc2>
                return err;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	e01a      	b.n	8003244 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800320e:	f107 0213 	add.w	r2, r7, #19
 8003212:	2301      	movs	r3, #1
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff ff62 	bl	80030e0 <lfs_dir_commitprog>
 800321c:	61f8      	str	r0, [r7, #28]
            if (err) {
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <lfs_dir_commitattr+0xdc>
                return err;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	e00d      	b.n	8003244 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	3301      	adds	r3, #1
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	3b04      	subs	r3, #4
 8003232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003234:	429a      	cmp	r2, r3
 8003236:	d3cc      	bcc.n	80031d2 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	609a      	str	r2, [r3, #8]
    return 0;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	372c      	adds	r7, #44	; 0x2c
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b097      	sub	sp, #92	; 0x5c
 8003250:	af04      	add	r7, sp, #16
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800325a:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003262:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7fd fae2 	bl	8000830 <lfs_min>
 800326c:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003272:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f7fd fafd 	bl	8000876 <lfs_alignup>
 800327c:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8003286:	e0fe      	b.n	8003486 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	3b04      	subs	r3, #4
 8003292:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd faca 	bl	8000830 <lfs_min>
 800329c:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	4413      	add	r3, r2
        lfs_off_t noff = (
 80032a4:	3304      	adds	r3, #4
 80032a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80032a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d206      	bcs.n	80032be <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	3b14      	subs	r3, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032b8:	f7fd faba 	bl	8000830 <lfs_min>
 80032bc:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80032be:	23ff      	movs	r3, #255	; 0xff
 80032c0:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80032c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d35f      	bcc.n	800338a <lfs_dir_commitcrc+0x13e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d855      	bhi.n	800338a <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80032de:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e4:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2201      	movs	r2, #1
 80032ec:	9203      	str	r2, [sp, #12]
 80032ee:	f107 021b 	add.w	r2, r7, #27
 80032f2:	9202      	str	r2, [sp, #8]
 80032f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032f6:	9201      	str	r2, [sp, #4]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	4603      	mov	r3, r0
 80032fc:	460a      	mov	r2, r1
 80032fe:	2100      	movs	r1, #0
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7fd fb69 	bl	80009d8 <lfs_bd_read>
 8003306:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <lfs_dir_commitcrc+0xce>
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003314:	d001      	beq.n	800331a <lfs_dir_commitcrc+0xce>
                return err;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	e101      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331e:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003326:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003328:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332e:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	f107 0108 	add.w	r1, r7, #8
 800333a:	3104      	adds	r1, #4
 800333c:	9103      	str	r1, [sp, #12]
 800333e:	9202      	str	r2, [sp, #8]
 8003340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003342:	9201      	str	r2, [sp, #4]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4623      	mov	r3, r4
 8003348:	4602      	mov	r2, r0
 800334a:	2100      	movs	r1, #0
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd fce0 	bl	8000d12 <lfs_bd_crc>
 8003352:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <lfs_dir_commitcrc+0x11a>
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003360:	d001      	beq.n	8003366 <lfs_dir_commitcrc+0x11a>
                    return err;
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	e0db      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f8f0 	bl	8001550 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 8003370:	f107 0308 	add.w	r3, r7, #8
 8003374:	4a6c      	ldr	r2, [pc, #432]	; (8003528 <lfs_dir_commitcrc+0x2dc>)
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fee7 	bl	800314c <lfs_dir_commitattr>
 800337e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <lfs_dir_commitcrc+0x13e>
                    return err;
 8003386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003388:	e0c9      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800338a:	7efb      	ldrb	r3, [r7, #27]
 800338c:	43db      	mvns	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	09db      	lsrs	r3, r3, #7
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	051a      	lsls	r2, r3, #20
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033a0:	1acb      	subs	r3, r1, r3
 80033a2:	3b04      	subs	r3, #4
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80033aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	4053      	eors	r3, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fac5 	bl	8000948 <lfs_tobe32>
 80033be:	4603      	mov	r3, r0
 80033c0:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f107 0110 	add.w	r1, r7, #16
 80033ca:	2204      	movs	r2, #4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 f987 	bl	80076e0 <lfs_crc>
 80033d2:	4602      	mov	r2, r0
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd fa9c 	bl	800091a <lfs_tole32>
 80033e2:	4603      	mov	r3, r0
 80033e4:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0010 	add.w	r0, r3, #16
 80033ec:	687c      	ldr	r4, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	6852      	ldr	r2, [r2, #4]
 80033f6:	2108      	movs	r1, #8
 80033f8:	9103      	str	r1, [sp, #12]
 80033fa:	f107 0110 	add.w	r1, r7, #16
 80033fe:	9102      	str	r1, [sp, #8]
 8003400:	9201      	str	r2, [sp, #4]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	4622      	mov	r2, r4
 8003408:	4601      	mov	r1, r0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fd76 	bl	8000efc <lfs_bd_prog>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <lfs_dir_commitcrc+0x1d0>
            return err;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	e080      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800341c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003434:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003436:	7efb      	ldrb	r3, [r7, #27]
 8003438:	43db      	mvns	r3, r3
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	405a      	eors	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800344e:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8003450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	429a      	cmp	r2, r3
 8003456:	d208      	bcs.n	800346a <lfs_dir_commitcrc+0x21e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	4413      	add	r3, r2
 8003464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003466:	429a      	cmp	r2, r3
 8003468:	d30d      	bcc.n	8003486 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f103 0110 	add.w	r1, r3, #16
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	2300      	movs	r3, #0
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd fd0d 	bl	8000e94 <lfs_bd_sync>
 800347a:	6238      	str	r0, [r7, #32]
            if (err) {
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <lfs_dir_commitcrc+0x23a>
                return err;
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	e04b      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800348c:	429a      	cmp	r2, r3
 800348e:	f63f aefb 	bhi.w	8003288 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800349c:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	1d1c      	adds	r4, r3, #4
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ac:	1a8a      	subs	r2, r1, r2
 80034ae:	f107 011c 	add.w	r1, r7, #28
 80034b2:	9103      	str	r1, [sp, #12]
 80034b4:	9202      	str	r2, [sp, #8]
 80034b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b8:	9201      	str	r2, [sp, #4]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4623      	mov	r3, r4
 80034be:	4602      	mov	r2, r0
 80034c0:	2100      	movs	r1, #0
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fc25 	bl	8000d12 <lfs_bd_crc>
 80034c8:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <lfs_dir_commitcrc+0x288>
        return err;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	e024      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d8:	429a      	cmp	r2, r3
 80034da:	d002      	beq.n	80034e2 <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80034dc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80034e0:	e01d      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f107 021c 	add.w	r2, r7, #28
 80034ec:	9203      	str	r2, [sp, #12]
 80034ee:	2204      	movs	r2, #4
 80034f0:	9202      	str	r2, [sp, #8]
 80034f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034f4:	9201      	str	r2, [sp, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	2304      	movs	r3, #4
 80034fa:	460a      	mov	r2, r1
 80034fc:	2100      	movs	r1, #0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fc07 	bl	8000d12 <lfs_bd_crc>
 8003504:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <lfs_dir_commitcrc+0x2c4>
        return err;
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	e006      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003516:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800351a:	e000      	b.n	800351e <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	374c      	adds	r7, #76	; 0x4c
 8003522:	46bd      	mov	sp, r7
 8003524:	bd90      	pop	{r4, r7, pc}
 8003526:	bf00      	nop
 8003528:	5ffffc08 	.word	0x5ffffc08

0800352c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af04      	add	r7, sp, #16
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e016      	b.n	800356a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3301      	adds	r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	bfb8      	it	lt
 8003548:	425b      	neglt	r3, r3
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	4413      	add	r3, r2
 8003550:	4619      	mov	r1, r3
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe f9be 	bl	80018d4 <lfs_alloc>
 8003558:	60f8      	str	r0, [r7, #12]
        if (err) {
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <lfs_dir_alloc+0x38>
            return err;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	e058      	b.n	8003616 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b01      	cmp	r3, #1
 800356e:	dde5      	ble.n	800353c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8003580:	2004      	movs	r0, #4
 8003582:	9003      	str	r0, [sp, #12]
 8003584:	9202      	str	r2, [sp, #8]
 8003586:	2200      	movs	r2, #0
 8003588:	9201      	str	r2, [sp, #4]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2304      	movs	r3, #4
 800358e:	460a      	mov	r2, r1
 8003590:	2100      	movs	r1, #0
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fa20 	bl	80009d8 <lfs_bd_read>
 8003598:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd f9b1 	bl	8000906 <lfs_fromle32>
 80035a4:	4602      	mov	r2, r0
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <lfs_dir_alloc+0x90>
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80035b6:	d001      	beq.n	80035bc <lfs_dir_alloc+0x90>
        return err;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	e02c      	b.n	8003616 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	dd0e      	ble.n	80035e4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	3301      	adds	r3, #1
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f7fd f94c 	bl	8000876 <lfs_alignup>
 80035de:	4602      	mov	r2, r0
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2204      	movs	r2, #4
 80035e8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2200      	movs	r2, #0
 80035f6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035fe:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003606:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2200      	movs	r2, #0
 8003612:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800361e:	b580      	push	{r7, lr}
 8003620:	b092      	sub	sp, #72	; 0x48
 8003622:	af04      	add	r7, sp, #16
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	4619      	mov	r1, r3
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff ff7a 	bl	800352c <lfs_dir_alloc>
 8003638:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <lfs_dir_split+0x26>
        return err;
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	e03c      	b.n	80036be <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	7ddb      	ldrb	r3, [r3, #23]
 8003648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8003658:	f107 0110 	add.w	r1, r7, #16
 800365c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003660:	9302      	str	r3, [sp, #8]
 8003662:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f879 	bl	8003768 <lfs_dir_compact>
 8003676:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	da01      	bge.n	8003682 <lfs_dir_split+0x64>
        return res;
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	e01d      	b.n	80036be <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2201      	movs	r2, #1
 8003692:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3320      	adds	r3, #32
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7fd fd39 	bl	8001114 <lfs_pair_cmp>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <lfs_dir_split+0x9e>
 80036a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3738      	adds	r7, #56	; 0x38
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	f7fd fe25 	bl	8001326 <lfs_tag_dsize>
 80036dc:	4602      	mov	r2, r0
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	441a      	add	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]
    return 0;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	f7ff fd1d 	bl	800314c <lfs_dir_commitattr>
 8003712:	4603      	mov	r3, r0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800372c:	2b00      	cmp	r3, #0
 800372e:	dd11      	ble.n	8003754 <lfs_dir_needsrelocation+0x38>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800373a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800373c:	3201      	adds	r2, #1
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	fbb3 f1f2 	udiv	r1, r3, r2
 8003746:	fb01 f202 	mul.w	r2, r1, r2
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <lfs_dir_needsrelocation+0x38>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <lfs_dir_needsrelocation+0x3a>
 8003754:	2300      	movs	r3, #0
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
	...

08003768 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b0a4      	sub	sp, #144	; 0x90
 800376c:	af0a      	add	r7, sp, #40	; 0x28
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f7ff ffcc 	bl	800371c <lfs_dir_needsrelocation>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003794:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <lfs_dir_compact+0x52>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	657a      	str	r2, [r7, #84]	; 0x54
 80037a2:	2201      	movs	r2, #1
 80037a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80037a6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fcb1 	bl	8001114 <lfs_pair_cmp>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 8155 	bne.w	8003a64 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	2300      	movs	r3, #0
 80037c2:	643b      	str	r3, [r7, #64]	; 0x40
 80037c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d0:	2300      	movs	r3, #0
 80037d2:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <lfs_dir_compact+0x80>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	3b08      	subs	r3, #8
 80037e6:	e003      	b.n	80037f0 <lfs_dir_compact+0x88>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80037f0:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	4619      	mov	r1, r3
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fd fc2b 	bl	8001054 <lfs_bd_erase>
 80037fe:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d006      	beq.n	8003814 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8003806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003808:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800380c:	f000 812c 	beq.w	8003a68 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003812:	e188      	b.n	8003b26 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd f87e 	bl	800091a <lfs_tole32>
 800381e:	4602      	mov	r2, r0
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800382a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800382e:	2304      	movs	r3, #4
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7ff fc55 	bl	80030e0 <lfs_dir_commitprog>
 8003836:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd f862 	bl	8000906 <lfs_fromle32>
 8003842:	4602      	mov	r2, r0
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
            if (err) {
 8003848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800384e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003850:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003854:	f000 810a 	beq.w	8003a6c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8003858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385a:	e164      	b.n	8003b26 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800385c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003860:	425b      	negs	r3, r3
 8003862:	b29b      	uxth	r3, r3
 8003864:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	637a      	str	r2, [r7, #52]	; 0x34
 800386a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800386e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8003870:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003874:	9208      	str	r2, [sp, #32]
 8003876:	4aae      	ldr	r2, [pc, #696]	; (8003b30 <lfs_dir_compact+0x3c8>)
 8003878:	9207      	str	r2, [sp, #28]
 800387a:	9306      	str	r3, [sp, #24]
 800387c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8003880:	9305      	str	r3, [sp, #20]
 8003882:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	2300      	movs	r3, #0
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	4ba9      	ldr	r3, [pc, #676]	; (8003b34 <lfs_dir_compact+0x3cc>)
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800389c:	2200      	movs	r2, #0
 800389e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f7fe fad7 	bl	8001e54 <lfs_dir_traverse>
 80038a6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80038a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80038ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80038b4:	f000 80dc 	beq.w	8003a70 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80038b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ba:	e134      	b.n	8003b26 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	3318      	adds	r3, #24
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fc0d 	bl	80010e0 <lfs_pair_isnull>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f083 0301 	eor.w	r3, r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d022      	beq.n	8003918 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3318      	adds	r3, #24
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fc8b 	bl	80011f2 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	7ddb      	ldrb	r3, [r3, #23]
 80038e0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80038e4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80038e6:	4a94      	ldr	r2, [pc, #592]	; (8003b38 <lfs_dir_compact+0x3d0>)
 80038e8:	431a      	orrs	r2, r3
                        dir->tail);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80038ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff fc2a 	bl	800314c <lfs_dir_commitattr>
 80038f8:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3318      	adds	r3, #24
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fd fc5d 	bl	80011be <lfs_pair_fromle32>
                if (err) {
 8003904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d006      	beq.n	8003918 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800390a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800390c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003910:	f000 80b0 	beq.w	8003a74 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003916:	e106      	b.n	8003b26 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003918:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003924:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003928:	f083 0301 	eor.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d011      	beq.n	8003956 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fd05 	bl	800134e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800394a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd fcfc 	bl	800134e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800395c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003960:	4611      	mov	r1, r2
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fcf3 	bl	800134e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003974:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003978:	461a      	mov	r2, r3
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff fa39 	bl	8002df4 <lfs_dir_getgstate>
 8003982:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <lfs_dir_compact+0x226>
                return err;
 800398a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398c:	e0cb      	b.n	8003b26 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800398e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fcff 	bl	8001396 <lfs_gstate_iszero>
 8003998:	4603      	mov	r3, r0
 800399a:	f083 0301 	eor.w	r3, r3, #1
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d016      	beq.n	80039d2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80039a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd fd99 	bl	80014e0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80039ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039b2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80039b6:	4a61      	ldr	r2, [pc, #388]	; (8003b3c <lfs_dir_compact+0x3d4>)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fbc7 	bl	800314c <lfs_dir_commitattr>
 80039be:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80039c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80039c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80039cc:	d054      	beq.n	8003a78 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80039ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d0:	e0a9      	b.n	8003b26 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80039d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039d6:	4619      	mov	r1, r3
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fc37 	bl	800324c <lfs_dir_commitcrc>
 80039de:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80039e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80039ec:	d046      	beq.n	8003a7c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80039ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f0:	e099      	b.n	8003b26 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80039f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039f8:	6992      	ldr	r2, [r2, #24]
 80039fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80039fe:	fb01 f202 	mul.w	r2, r1, r2
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <lfs_dir_compact+0x2ae>
 8003a08:	4b4d      	ldr	r3, [pc, #308]	; (8003b40 <lfs_dir_compact+0x3d8>)
 8003a0a:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <lfs_dir_compact+0x3dc>)
 8003a0c:	f640 0103 	movw	r1, #2051	; 0x803
 8003a10:	484d      	ldr	r0, [pc, #308]	; (8003b48 <lfs_dir_compact+0x3e0>)
 8003a12:	f007 fd27 	bl	800b464 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fd fb4d 	bl	80010b8 <lfs_pair_swap>
            dir->count = end - begin;
 8003a1e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003a22:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3348      	adds	r3, #72	; 0x48
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003a46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a4a:	f083 0301 	eor.w	r3, r3, #1
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d065      	beq.n	8003b20 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	333c      	adds	r3, #60	; 0x3c
 8003a5a:	3230      	adds	r2, #48	; 0x30
 8003a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003a62:	e05d      	b.n	8003b20 <lfs_dir_compact+0x3b8>
        goto relocate;
 8003a64:	bf00      	nop
 8003a66:	e00a      	b.n	8003a7e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a68:	bf00      	nop
 8003a6a:	e008      	b.n	8003a7e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a6c:	bf00      	nop
 8003a6e:	e006      	b.n	8003a7e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a70:	bf00      	nop
 8003a72:	e004      	b.n	8003a7e <lfs_dir_compact+0x316>
                        goto relocate;
 8003a74:	bf00      	nop
 8003a76:	e002      	b.n	8003a7e <lfs_dir_compact+0x316>
                        goto relocate;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <lfs_dir_compact+0x316>
                    goto relocate;
 8003a7c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3310      	adds	r3, #16
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7fc ff7f 	bl	800098e <lfs_cache_drop>
        if (!tired) {
 8003a90:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003a94:	f083 0301 	eor.w	r3, r3, #1
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <lfs_dir_compact+0x3e4>)
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	f640 0215 	movw	r2, #2069	; 0x815
 8003aaa:	4927      	ldr	r1, [pc, #156]	; (8003b48 <lfs_dir_compact+0x3e0>)
 8003aac:	4828      	ldr	r0, [pc, #160]	; (8003b50 <lfs_dir_compact+0x3e8>)
 8003aae:	f007 ff6f 	bl	800b990 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	617a      	str	r2, [r7, #20]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	61ba      	str	r2, [r7, #24]
 8003abc:	f107 0214 	add.w	r2, r7, #20
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fb26 	bl	8001114 <lfs_pair_cmp>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10c      	bne.n	8003ae8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <lfs_dir_compact+0x3e4>)
 8003ad4:	9200      	str	r2, [sp, #0]
 8003ad6:	f640 021a 	movw	r2, #2074	; 0x81a
 8003ada:	491b      	ldr	r1, [pc, #108]	; (8003b48 <lfs_dir_compact+0x3e0>)
 8003adc:	481d      	ldr	r0, [pc, #116]	; (8003b54 <lfs_dir_compact+0x3ec>)
 8003ade:	f007 ff57 	bl	800b990 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003ae2:	f06f 031b 	mvn.w	r3, #27
 8003ae6:	e01e      	b.n	8003b26 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7fd fef0 	bl	80018d4 <lfs_alloc>
 8003af4:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00c      	beq.n	8003b16 <lfs_dir_compact+0x3ae>
 8003afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003afe:	f113 0f1c 	cmn.w	r3, #28
 8003b02:	d106      	bne.n	8003b12 <lfs_dir_compact+0x3aa>
 8003b04:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003b08:	f083 0301 	eor.w	r3, r3, #1
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <lfs_dir_compact+0x3ae>
            return err;
 8003b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b14:	e007      	b.n	8003b26 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8003b1c:	bf00      	nop
    while (true) {
 8003b1e:	e64c      	b.n	80037ba <lfs_dir_compact+0x52>
        break;
 8003b20:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003b22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3768      	adds	r7, #104	; 0x68
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	080036f3 	.word	0x080036f3
 8003b34:	400ffc00 	.word	0x400ffc00
 8003b38:	000ffc08 	.word	0x000ffc08
 8003b3c:	7ffffc0c 	.word	0x7ffffc0c
 8003b40:	0800c9a0 	.word	0x0800c9a0
 8003b44:	0800dbbc 	.word	0x0800dbbc
 8003b48:	0800c830 	.word	0x0800c830
 8003b4c:	0800c948 	.word	0x0800c948
 8003b50:	0800c9c8 	.word	0x0800c9c8
 8003b54:	0800c9ec 	.word	0x0800c9ec

08003b58 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b097      	sub	sp, #92	; 0x5c
 8003b5c:	af0a      	add	r7, sp, #40	; 0x28
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003b66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003b6c:	e058      	b.n	8003c20 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	4252      	negs	r2, r2
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	b212      	sxth	r2, r2
 8003b80:	f107 0118 	add.w	r1, r7, #24
 8003b84:	9108      	str	r1, [sp, #32]
 8003b86:	497a      	ldr	r1, [pc, #488]	; (8003d70 <lfs_dir_splittingcompact+0x218>)
 8003b88:	9107      	str	r1, [sp, #28]
 8003b8a:	9206      	str	r2, [sp, #24]
 8003b8c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003b90:	9205      	str	r2, [sp, #20]
 8003b92:	9304      	str	r3, [sp, #16]
 8003b94:	2300      	movs	r3, #0
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <lfs_dir_splittingcompact+0x21c>)
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f7fe f951 	bl	8001e54 <lfs_dir_traverse>
 8003bb2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <lfs_dir_splittingcompact+0x66>
                return err;
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	e0d3      	b.n	8003d66 <lfs_dir_splittingcompact+0x20e>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003bbe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2bfe      	cmp	r3, #254	; 0xfe
 8003bc8:	d822      	bhi.n	8003c10 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bce:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003bd0:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	e003      	b.n	8003bf0 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bec:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003bee:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bf4:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fe3c 	bl	8000876 <lfs_alignup>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4619      	mov	r1, r3
 8003c02:	4620      	mov	r0, r4
 8003c04:	f7fc fe14 	bl	8000830 <lfs_min>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d20e      	bcs.n	8003c2e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003c10:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1c:	4413      	add	r3, r2
 8003c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003c20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d8a0      	bhi.n	8003b6e <lfs_dir_splittingcompact+0x16>
 8003c2c:	e000      	b.n	8003c30 <lfs_dir_splittingcompact+0xd8>
                break;
 8003c2e:	bf00      	nop
        }

        if (split == begin) {
 8003c30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d02d      	beq.n	8003c96 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003c42:	9202      	str	r2, [sp, #8]
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff fce4 	bl	800361e <lfs_dir_split>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <lfs_dir_splittingcompact+0x112>
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f113 0f1c 	cmn.w	r3, #28
 8003c64:	d001      	beq.n	8003c6a <lfs_dir_splittingcompact+0x112>
            return err;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	e07d      	b.n	8003d66 <lfs_dir_splittingcompact+0x20e>
        }

        if (err) {
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	493f      	ldr	r1, [pc, #252]	; (8003d78 <lfs_dir_splittingcompact+0x220>)
 8003c7a:	9101      	str	r1, [sp, #4]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	f640 026d 	movw	r2, #2157	; 0x86d
 8003c84:	493d      	ldr	r1, [pc, #244]	; (8003d7c <lfs_dir_splittingcompact+0x224>)
 8003c86:	483e      	ldr	r0, [pc, #248]	; (8003d80 <lfs_dir_splittingcompact+0x228>)
 8003c88:	f007 fe82 	bl	800b990 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003c8c:	e004      	b.n	8003c98 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003c94:	e767      	b.n	8003b66 <lfs_dir_splittingcompact+0xe>
            break;
 8003c96:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fd3e 	bl	800371c <lfs_dir_needsrelocation>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d050      	beq.n	8003d48 <lfs_dir_splittingcompact+0x1f0>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	613a      	str	r2, [r7, #16]
 8003cac:	2201      	movs	r2, #1
 8003cae:	617a      	str	r2, [r7, #20]
 8003cb0:	f107 0210 	add.w	r2, r7, #16
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fa2c 	bl	8001114 <lfs_pair_cmp>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d142      	bne.n	8003d48 <lfs_dir_splittingcompact+0x1f0>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f003 fbf0 	bl	80074a8 <lfs_fs_size_>
 8003cc8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	da01      	bge.n	8003cd4 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	e048      	b.n	8003d66 <lfs_dir_splittingcompact+0x20e>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	1ad2      	subs	r2, r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d930      	bls.n	8003d48 <lfs_dir_splittingcompact+0x1f0>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <lfs_dir_splittingcompact+0x220>)
 8003cec:	9200      	str	r2, [sp, #0]
 8003cee:	f640 0283 	movw	r2, #2179	; 0x883
 8003cf2:	4922      	ldr	r1, [pc, #136]	; (8003d7c <lfs_dir_splittingcompact+0x224>)
 8003cf4:	4823      	ldr	r0, [pc, #140]	; (8003d84 <lfs_dir_splittingcompact+0x22c>)
 8003cf6:	f007 fe4b 	bl	800b990 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003cfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cfe:	9302      	str	r3, [sp, #8]
 8003d00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fc84 	bl	800361e <lfs_dir_split>
 8003d16:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <lfs_dir_splittingcompact+0x1d2>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f113 0f1c 	cmn.w	r3, #28
 8003d24:	d001      	beq.n	8003d2a <lfs_dir_splittingcompact+0x1d2>
                return err;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	e01d      	b.n	8003d66 <lfs_dir_splittingcompact+0x20e>
            }

            if (err) {
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <lfs_dir_splittingcompact+0x220>)
 8003d32:	f640 028d 	movw	r2, #2189	; 0x88d
 8003d36:	4911      	ldr	r1, [pc, #68]	; (8003d7c <lfs_dir_splittingcompact+0x224>)
 8003d38:	4813      	ldr	r0, [pc, #76]	; (8003d88 <lfs_dir_splittingcompact+0x230>)
 8003d3a:	f007 fe29 	bl	800b990 <iprintf>
 8003d3e:	e003      	b.n	8003d48 <lfs_dir_splittingcompact+0x1f0>
            } else {
                end = begin;
 8003d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003d48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fd02 	bl	8003768 <lfs_dir_compact>
 8003d64:	4603      	mov	r3, r0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3734      	adds	r7, #52	; 0x34
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	080036c7 	.word	0x080036c7
 8003d74:	400ffc00 	.word	0x400ffc00
 8003d78:	0800c948 	.word	0x0800c948
 8003d7c:	0800c830 	.word	0x0800c830
 8003d80:	0800ca24 	.word	0x0800ca24
 8003d84:	0800ca54 	.word	0x0800ca54
 8003d88:	0800ca84 	.word	0x0800ca84

08003d8c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003d8c:	b5b0      	push	{r4, r5, r7, lr}
 8003d8e:	b0a6      	sub	sp, #152	; 0x98
 8003d90:	af0a      	add	r7, sp, #40	; 0x28
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003da4:	2300      	movs	r3, #0
 8003da6:	667b      	str	r3, [r7, #100]	; 0x64
 8003da8:	e06d      	b.n	8003e86 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	4413      	add	r3, r2
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fd fa73 	bl	80012a0 <lfs_tag_type3>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f240 4301 	movw	r3, #1025	; 0x401
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d106      	bne.n	8003dd4 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	8a9b      	ldrh	r3, [r3, #20]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	829a      	strh	r2, [r3, #20]
 8003dd2:	e055      	b.n	8003e80 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fa5e 	bl	80012a0 <lfs_tag_type3>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d114      	bne.n	8003e1a <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	8a9b      	ldrh	r3, [r3, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <lfs_dir_relocatingcommit+0x7a>
 8003df8:	4ba4      	ldr	r3, [pc, #656]	; (800408c <lfs_dir_relocatingcommit+0x300>)
 8003dfa:	4aa5      	ldr	r2, [pc, #660]	; (8004090 <lfs_dir_relocatingcommit+0x304>)
 8003dfc:	f640 01a5 	movw	r1, #2213	; 0x8a5
 8003e00:	48a4      	ldr	r0, [pc, #656]	; (8004094 <lfs_dir_relocatingcommit+0x308>)
 8003e02:	f007 fb2f 	bl	800b464 <__assert_func>
            dir->count -= 1;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	8a9b      	ldrh	r3, [r3, #20]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003e18:	e032      	b.n	8003e80 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd fa1d 	bl	8001264 <lfs_tag_type1>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e30:	d126      	bne.n	8003e80 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	4413      	add	r3, r2
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fd fa2e 	bl	80012be <lfs_tag_chunk>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf14      	ite	ne
 8003e6c:	2301      	movne	r3, #1
 8003e6e:	2300      	moveq	r3, #0
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3318      	adds	r3, #24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f99f 	bl	80011be <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003e80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e82:	3301      	adds	r3, #1
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
 8003e86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	db8c      	blt.n	8003daa <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8003e90:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02b      	beq.n	8003ef0 <lfs_dir_relocatingcommit+0x164>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	8a9b      	ldrh	r3, [r3, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d127      	bne.n	8003ef0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8003ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <lfs_dir_relocatingcommit+0x12a>
 8003ea8:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <lfs_dir_relocatingcommit+0x30c>)
 8003eaa:	4a79      	ldr	r2, [pc, #484]	; (8004090 <lfs_dir_relocatingcommit+0x304>)
 8003eac:	f640 01b2 	movw	r1, #2226	; 0x8b2
 8003eb0:	4878      	ldr	r0, [pc, #480]	; (8004094 <lfs_dir_relocatingcommit+0x308>)
 8003eb2:	f007 fad7 	bl	800b464 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f002 fe50 	bl	8006b64 <lfs_fs_pred>
 8003ec4:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8003ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <lfs_dir_relocatingcommit+0x14c>
 8003ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ece:	f113 0f02 	cmn.w	r3, #2
 8003ed2:	d001      	beq.n	8003ed8 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8003ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ed6:	e204      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8003ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eda:	f113 0f02 	cmn.w	r3, #2
 8003ede:	d007      	beq.n	8003ef0 <lfs_dir_relocatingcommit+0x164>
 8003ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ee4:	7ddb      	ldrb	r3, [r3, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8003eea:	2302      	movs	r3, #2
 8003eec:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8003eee:	e121      	b.n	8004134 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	7d9b      	ldrb	r3, [r3, #22]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80fb 	beq.w	80040f0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f10:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8003f16:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d004      	beq.n	8003f2c <lfs_dir_relocatingcommit+0x1a0>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f28:	3b08      	subs	r3, #8
 8003f2a:	e003      	b.n	8003f34 <lfs_dir_relocatingcommit+0x1a8>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8003f34:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd f959 	bl	80011f2 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8003f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f56:	9308      	str	r3, [sp, #32]
 8003f58:	4b50      	ldr	r3, [pc, #320]	; (800409c <lfs_dir_relocatingcommit+0x310>)
 8003f5a:	9307      	str	r3, [sp, #28]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9306      	str	r3, [sp, #24]
 8003f60:	2300      	movs	r3, #0
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	2300      	movs	r3, #0
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9303      	str	r3, [sp, #12]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7fd ff68 	bl	8001e54 <lfs_dir_traverse>
 8003f84:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3318      	adds	r3, #24
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd f917 	bl	80011be <lfs_pair_fromle32>
        if (err) {
 8003f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8003f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f98:	f113 0f1c 	cmn.w	r3, #28
 8003f9c:	f000 80aa 	beq.w	80040f4 <lfs_dir_relocatingcommit+0x368>
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003fa6:	f000 80a5 	beq.w	80040f4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8003faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fac:	e199      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8003fae:	f107 031c 	add.w	r3, r7, #28
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003fc0:	f107 031c 	add.w	r3, r7, #28
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd f9c1 	bl	800134e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003fd2:	f107 031c 	add.w	r3, r7, #28
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fd f9b8 	bl	800134e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003fe4:	f107 031c 	add.w	r3, r7, #28
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f9af 	bl	800134e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	4618      	mov	r0, r3
 8004002:	f7fd f9c8 	bl	8001396 <lfs_gstate_iszero>
 8004006:	4603      	mov	r3, r0
 8004008:	f083 0301 	eor.w	r3, r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d027      	beq.n	8004062 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	461a      	mov	r2, r3
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7fe feea 	bl	8002df4 <lfs_dir_getgstate>
 8004020:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8004022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8004028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402a:	e15a      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 800402c:	f107 031c 	add.w	r3, r7, #28
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fa55 	bl	80014e0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <lfs_dir_relocatingcommit+0x314>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff f883 	bl	800314c <lfs_dir_commitattr>
 8004046:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8004048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	f113 0f1c 	cmn.w	r3, #28
 8004054:	d050      	beq.n	80040f8 <lfs_dir_relocatingcommit+0x36c>
 8004056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004058:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800405c:	d04c      	beq.n	80040f8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800405e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004060:	e13f      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8004062:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004066:	4619      	mov	r1, r3
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff f8ef 	bl	800324c <lfs_dir_commitcrc>
 800406e:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8004076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004078:	f113 0f1c 	cmn.w	r3, #28
 800407c:	d03e      	beq.n	80040fc <lfs_dir_relocatingcommit+0x370>
 800407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004080:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004084:	d03a      	beq.n	80040fc <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8004086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004088:	e12b      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
 800408a:	bf00      	nop
 800408c:	0800cab0 	.word	0x0800cab0
 8004090:	0800dbcc 	.word	0x0800dbcc
 8004094:	0800c830 	.word	0x0800c830
 8004098:	0800cac0 	.word	0x0800cac0
 800409c:	080036f3 	.word	0x080036f3
 80040a0:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80040a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040aa:	6992      	ldr	r2, [r2, #24]
 80040ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80040b0:	fb01 f202 	mul.w	r2, r1, r2
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d006      	beq.n	80040c8 <lfs_dir_relocatingcommit+0x33c>
 80040ba:	4b8c      	ldr	r3, [pc, #560]	; (80042ec <lfs_dir_relocatingcommit+0x560>)
 80040bc:	4a8c      	ldr	r2, [pc, #560]	; (80042f0 <lfs_dir_relocatingcommit+0x564>)
 80040be:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80040c2:	488c      	ldr	r0, [pc, #560]	; (80042f4 <lfs_dir_relocatingcommit+0x568>)
 80040c4:	f007 f9ce 	bl	800b464 <__assert_func>
        dir->off = commit.off;
 80040c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80040ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	333c      	adds	r3, #60	; 0x3c
 80040da:	3230      	adds	r2, #48	; 0x30
 80040dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80040de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3348      	adds	r3, #72	; 0x48
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	e021      	b.n	8004134 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80040f0:	bf00      	nop
 80040f2:	e004      	b.n	80040fe <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80040f4:	bf00      	nop
 80040f6:	e002      	b.n	80040fe <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80040f8:	bf00      	nop
 80040fa:	e000      	b.n	80040fe <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80040fc:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3310      	adds	r3, #16
 8004102:	4619      	mov	r1, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fc fc42 	bl	800098e <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	8a9b      	ldrh	r3, [r3, #20]
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	2300      	movs	r3, #0
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff fd19 	bl	8003b58 <lfs_dir_splittingcompact>
 8004126:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	2b00      	cmp	r3, #0
 800412c:	da01      	bge.n	8004132 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800412e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004130:	e0d7      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8004132:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3304      	adds	r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	663b      	str	r3, [r7, #96]	; 0x60
 8004148:	e0c6      	b.n	80042d8 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800414a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414c:	3308      	adds	r3, #8
 800414e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc ffdd 	bl	8001114 <lfs_pair_cmp>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 80b8 	bne.w	80042d2 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8004162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	f103 0408 	add.w	r4, r3, #8
 800416a:	4615      	mov	r5, r2
 800416c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800416e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004170:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8004178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417a:	3308      	adds	r3, #8
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	429a      	cmp	r2, r3
 8004180:	f000 809d 	beq.w	80042be <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8004184:	2300      	movs	r3, #0
 8004186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004188:	e07b      	b.n	8004282 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800418a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4413      	add	r3, r2
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7fd f883 	bl	80012a0 <lfs_tag_type3>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d115      	bne.n	80041d2 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80041a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a8:	889c      	ldrh	r4, [r3, #4]
 80041aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd f89b 	bl	80012f0 <lfs_tag_id>
 80041ba:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80041bc:	429c      	cmp	r4, r3
 80041be:	d108      	bne.n	80041d2 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80041c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c6:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80041c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e054      	b.n	800427c <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	4413      	add	r3, r2
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd f85f 	bl	80012a0 <lfs_tag_type3>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11c      	bne.n	8004228 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80041ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f0:	889c      	ldrh	r4, [r3, #4]
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	4413      	add	r3, r2
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fd f877 	bl	80012f0 <lfs_tag_id>
 8004202:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004204:	429c      	cmp	r4, r3
 8004206:	d90f      	bls.n	8004228 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8004208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420a:	889b      	ldrh	r3, [r3, #4]
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004212:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004216:	799b      	ldrb	r3, [r3, #6]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d12f      	bne.n	800427c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 800421c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004224:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8004226:	e029      	b.n	800427c <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8004228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	4413      	add	r3, r2
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd f834 	bl	80012a0 <lfs_tag_type3>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	f240 4301 	movw	r3, #1025	; 0x401
 8004240:	429a      	cmp	r2, r3
 8004242:	d11b      	bne.n	800427c <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8004244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004246:	889c      	ldrh	r4, [r3, #4]
 8004248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	4413      	add	r3, r2
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd f84c 	bl	80012f0 <lfs_tag_id>
 8004258:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800425a:	429c      	cmp	r4, r3
 800425c:	d30e      	bcc.n	800427c <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800425e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004260:	889b      	ldrh	r3, [r3, #4]
 8004262:	3301      	adds	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004268:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800426a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800426c:	799b      	ldrb	r3, [r3, #6]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d104      	bne.n	800427c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8004272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	3301      	adds	r3, #1
 8004280:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004282:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004284:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004288:	429a      	cmp	r2, r3
 800428a:	f6ff af7e 	blt.w	800418a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800428e:	e016      	b.n	80042be <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8004290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004292:	889a      	ldrh	r2, [r3, #4]
 8004294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004296:	8b9b      	ldrh	r3, [r3, #28]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	b29a      	uxth	r2, r3
 800429c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800429e:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80042a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a2:	f103 0108 	add.w	r1, r3, #8
 80042a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a8:	3320      	adds	r3, #32
 80042aa:	461a      	mov	r2, r3
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7fe fd85 	bl	8002dbc <lfs_dir_fetch>
 80042b2:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80042b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <lfs_dir_relocatingcommit+0x532>
                    return err;
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	e011      	b.n	80042e2 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c0:	889a      	ldrh	r2, [r3, #4]
 80042c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c4:	8b9b      	ldrh	r3, [r3, #28]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d303      	bcc.n	80042d2 <lfs_dir_relocatingcommit+0x546>
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	7fdb      	ldrb	r3, [r3, #31]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1de      	bne.n	8004290 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	663b      	str	r3, [r7, #96]	; 0x60
 80042d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f47f af35 	bne.w	800414a <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80042e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3770      	adds	r7, #112	; 0x70
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bdb0      	pop	{r4, r5, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	0800c9a0 	.word	0x0800c9a0
 80042f0:	0800dbcc 	.word	0x0800dbcc
 80042f4:	0800c830 	.word	0x0800c830

080042f8 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80042f8:	b5b0      	push	{r4, r5, r7, lr}
 80042fa:	b0bc      	sub	sp, #240	; 0xf0
 80042fc:	af04      	add	r7, sp, #16
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800430e:	e045      	b.n	800439c <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004314:	3308      	adds	r3, #8
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	429a      	cmp	r2, r3
 800431a:	d03a      	beq.n	8004392 <lfs_dir_orphaningcommit+0x9a>
 800431c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004320:	3308      	adds	r3, #8
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fef4 	bl	8001114 <lfs_pair_cmp>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d12f      	bne.n	8004392 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004336:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004338:	2b01      	cmp	r3, #1
 800433a:	d12a      	bne.n	8004392 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800433c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d023      	beq.n	8004392 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800434a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8004356:	429a      	cmp	r2, r3
 8004358:	d91b      	bls.n	8004392 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800435a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f001 f932 	bl	80055c8 <lfs_file_outline>
 8004364:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004368:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8004370:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004374:	e2ad      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8004376:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 f946 	bl	800560c <lfs_file_flush>
 8004380:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8004384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <lfs_dir_orphaningcommit+0x9a>
                return err;
 800438c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004390:	e29f      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800439c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1b5      	bne.n	8004310 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80043ba:	461d      	mov	r5, r3
 80043bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80043ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff fcd6 	bl	8003d8c <lfs_dir_relocatingcommit>
 80043e0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80043e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	da02      	bge.n	80043f2 <lfs_dir_orphaningcommit+0xfa>
        return state;
 80043ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043f0:	e26f      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fc fe8a 	bl	8001114 <lfs_pair_cmp>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d109      	bne.n	800441a <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	461d      	mov	r5, r3
 800440a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800440e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004412:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004416:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800441a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800441e:	2b02      	cmp	r3, #2
 8004420:	d14a      	bne.n	80044b8 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3348      	adds	r3, #72	; 0x48
 8004426:	461a      	mov	r2, r3
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7fe fce2 	bl	8002df4 <lfs_dir_getgstate>
 8004430:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8004434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <lfs_dir_orphaningcommit+0x14a>
            return err;
 800443c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004440:	e247      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8004442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8004448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800444a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	3318      	adds	r3, #24
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc fecd 	bl	80011f2 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	7ddb      	ldrb	r3, [r3, #23]
 800445c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004460:	051a      	lsls	r2, r3, #20
 8004462:	4bc2      	ldr	r3, [pc, #776]	; (800476c <lfs_dir_orphaningcommit+0x474>)
 8004464:	4313      	orrs	r3, r2
 8004466:	667b      	str	r3, [r7, #100]	; 0x64
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	3318      	adds	r3, #24
 800446c:	66bb      	str	r3, [r7, #104]	; 0x68
 800446e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004472:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004476:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800447a:	2000      	movs	r0, #0
 800447c:	9001      	str	r0, [sp, #4]
 800447e:	2001      	movs	r0, #1
 8004480:	9000      	str	r0, [sp, #0]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fc82 	bl	8003d8c <lfs_dir_relocatingcommit>
 8004488:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3318      	adds	r3, #24
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc fe94 	bl	80011be <lfs_pair_fromle32>
        if (state < 0) {
 8004496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800449a:	2b00      	cmp	r3, #0
 800449c:	da02      	bge.n	80044a4 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800449e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a2:	e216      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80044a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80044a8:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80044ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80044be:	e1fc      	b.n	80048ba <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80044c0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80044c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80044cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044d0:	4ca7      	ldr	r4, [pc, #668]	; (8004770 <lfs_dir_orphaningcommit+0x478>)
 80044d2:	9403      	str	r4, [sp, #12]
 80044d4:	9102      	str	r1, [sp, #8]
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	4603      	mov	r3, r0
 80044dc:	f640 1286 	movw	r2, #2438	; 0x986
 80044e0:	49a4      	ldr	r1, [pc, #656]	; (8004774 <lfs_dir_orphaningcommit+0x47c>)
 80044e2:	48a5      	ldr	r0, [pc, #660]	; (8004778 <lfs_dir_orphaningcommit+0x480>)
 80044e4:	f007 fa54 	bl	800b990 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f103 0220 	add.w	r2, r3, #32
 80044f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc fe0a 	bl	8001114 <lfs_pair_cmp>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8004506:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800450e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800451e:	e037      	b.n	8004590 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004520:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004524:	f103 0208 	add.w	r2, r3, #8
 8004528:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f7fc fdf0 	bl	8001114 <lfs_pair_cmp>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 800453a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800453e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004542:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8004544:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004548:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800454c:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800454e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004552:	799b      	ldrb	r3, [r3, #6]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d116      	bne.n	8004586 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8004558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800455c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004560:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc fdd4 	bl	8001114 <lfs_pair_cmp>
 800456c:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8004572:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800457a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800457c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004580:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004586:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004590:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1c3      	bne.n	8004520 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8004598:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800459c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045a0:	4619      	mov	r1, r3
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f002 fb90 	bl	8006cc8 <lfs_fs_parent>
 80045a8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80045ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da07      	bge.n	80045c4 <lfs_dir_orphaningcommit+0x2cc>
 80045b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045b8:	f113 0f02 	cmn.w	r3, #2
 80045bc:	d002      	beq.n	80045c4 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80045be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045c2:	e186      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80045c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045c8:	f113 0f02 	cmn.w	r3, #2
 80045cc:	bf14      	ite	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	2300      	moveq	r3, #0
 80045d2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80045d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045da:	f113 0f02 	cmn.w	r3, #2
 80045de:	f000 809e 	beq.w	800471e <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80045e2:	2101      	movs	r1, #1
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f002 fc05 	bl	8006df4 <lfs_fs_preporphans>
 80045ea:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80045ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <lfs_dir_orphaningcommit+0x304>
                return err;
 80045f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045fa:	e16a      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80045fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004600:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3330      	adds	r3, #48	; 0x30
 8004608:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f7fc ff26 	bl	8001460 <lfs_gstate_hasmovehere>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d02d      	beq.n	8004676 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc fe66 	bl	80012f0 <lfs_tag_id>
 8004624:	4603      	mov	r3, r0
 8004626:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800462a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800462c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462e:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 8004632:	484f      	ldr	r0, [pc, #316]	; (8004770 <lfs_dir_orphaningcommit+0x478>)
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	460b      	mov	r3, r1
 800463c:	f640 12b3 	movw	r2, #2483	; 0x9b3
 8004640:	494c      	ldr	r1, [pc, #304]	; (8004774 <lfs_dir_orphaningcommit+0x47c>)
 8004642:	484e      	ldr	r0, [pc, #312]	; (800477c <lfs_dir_orphaningcommit+0x484>)
 8004644:	f007 f9a4 	bl	800b990 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004648:	2200      	movs	r2, #0
 800464a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f002 fc20 	bl	8006e94 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8004654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc fe49 	bl	80012f0 <lfs_tag_id>
 800465e:	4603      	mov	r3, r0
 8004660:	461a      	mov	r2, r3
 8004662:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004666:	4293      	cmp	r3, r2
 8004668:	d205      	bcs.n	8004676 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 800466a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800466e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8004676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004678:	657b      	str	r3, [r7, #84]	; 0x54
 800467a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800467c:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 800467e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fdb5 	bl	80011f2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8004688:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800468c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <lfs_dir_orphaningcommit+0x3ac>
 8004694:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800469e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80046a2:	e000      	b.n	80046a6 <lfs_dir_orphaningcommit+0x3ae>
 80046a4:	2300      	movs	r3, #0
 80046a6:	647b      	str	r3, [r7, #68]	; 0x44
 80046a8:	2300      	movs	r3, #0
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80046b6:	653b      	str	r3, [r7, #80]	; 0x50
 80046b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046bc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80046c0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80046c4:	2000      	movs	r0, #0
 80046c6:	9001      	str	r0, [sp, #4]
 80046c8:	2002      	movs	r0, #2
 80046ca:	9000      	str	r0, [sp, #0]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fb5d 	bl	8003d8c <lfs_dir_relocatingcommit>
 80046d2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80046d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fd6f 	bl	80011be <lfs_pair_fromle32>
            if (state < 0) {
 80046e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da02      	bge.n	80046ee <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80046e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ec:	e0f1      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80046ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d113      	bne.n	800471e <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 80046f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 80046fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004702:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004706:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800470a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800470c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800470e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800471c:	e0cd      	b.n	80048ba <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800471e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004726:	4619      	mov	r1, r3
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f002 fa1b 	bl	8006b64 <lfs_fs_pred>
 800472e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8004732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <lfs_dir_orphaningcommit+0x452>
 800473a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800473e:	f113 0f02 	cmn.w	r3, #2
 8004742:	d002      	beq.n	800474a <lfs_dir_orphaningcommit+0x452>
            return err;
 8004744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004748:	e0c3      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800474a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01a      	beq.n	8004788 <lfs_dir_orphaningcommit+0x490>
 8004752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004756:	f113 0f02 	cmn.w	r3, #2
 800475a:	d115      	bne.n	8004788 <lfs_dir_orphaningcommit+0x490>
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <lfs_dir_orphaningcommit+0x488>)
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <lfs_dir_orphaningcommit+0x48c>)
 8004760:	f640 11d6 	movw	r1, #2518	; 0x9d6
 8004764:	4803      	ldr	r0, [pc, #12]	; (8004774 <lfs_dir_orphaningcommit+0x47c>)
 8004766:	f006 fe7d 	bl	800b464 <__assert_func>
 800476a:	bf00      	nop
 800476c:	000ffc08 	.word	0x000ffc08
 8004770:	0800c948 	.word	0x0800c948
 8004774:	0800c830 	.word	0x0800c830
 8004778:	0800cac8 	.word	0x0800cac8
 800477c:	0800cb04 	.word	0x0800cb04
 8004780:	0800cb48 	.word	0x0800cb48
 8004784:	0800dbe8 	.word	0x0800dbe8

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8004788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800478c:	f113 0f02 	cmn.w	r3, #2
 8004790:	f000 8093 	beq.w	80048ba <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3330      	adds	r3, #48	; 0x30
 8004798:	4618      	mov	r0, r3
 800479a:	f7fc fe18 	bl	80013ce <lfs_gstate_hasorphans>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d011      	beq.n	80047c8 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80047a4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80047a8:	425b      	negs	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	b25b      	sxtb	r3, r3
 80047ae:	4619      	mov	r1, r3
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f002 fb1f 	bl	8006df4 <lfs_fs_preporphans>
 80047b6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80047ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80047c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047c6:	e084      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80047c8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80047cc:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3330      	adds	r3, #48	; 0x30
 80047d4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80047d8:	4611      	mov	r1, r2
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc fe40 	bl	8001460 <lfs_gstate_hasmovehere>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01c      	beq.n	8004820 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc fd80 	bl	80012f0 <lfs_tag_id>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80047f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047fa:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80047fe:	4837      	ldr	r0, [pc, #220]	; (80048dc <lfs_dir_orphaningcommit+0x5e4>)
 8004800:	9002      	str	r0, [sp, #8]
 8004802:	9201      	str	r2, [sp, #4]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	460b      	mov	r3, r1
 8004808:	f640 12e7 	movw	r2, #2535	; 0x9e7
 800480c:	4934      	ldr	r1, [pc, #208]	; (80048e0 <lfs_dir_orphaningcommit+0x5e8>)
 800480e:	4835      	ldr	r0, [pc, #212]	; (80048e4 <lfs_dir_orphaningcommit+0x5ec>)
 8004810:	f007 f8be 	bl	800b990 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004814:	2200      	movs	r2, #0
 8004816:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f002 fb3a 	bl	8006e94 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8004826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 800482c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004830:	4618      	mov	r0, r3
 8004832:	f7fc fcde 	bl	80011f2 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8004836:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800483a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <lfs_dir_orphaningcommit+0x55a>
 8004842:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800484c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004850:	e000      	b.n	8004854 <lfs_dir_orphaningcommit+0x55c>
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
 800485a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800485e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004862:	051a      	lsls	r2, r3, #20
 8004864:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <lfs_dir_orphaningcommit+0x5f0>)
 8004866:	4313      	orrs	r3, r2
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
 8004870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004874:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004878:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800487c:	2000      	movs	r0, #0
 800487e:	9001      	str	r0, [sp, #4]
 8004880:	2002      	movs	r0, #2
 8004882:	9000      	str	r0, [sp, #0]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fa81 	bl	8003d8c <lfs_dir_relocatingcommit>
 800488a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800488e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fc93 	bl	80011be <lfs_pair_fromle32>
            if (state < 0) {
 8004898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800489c:	2b00      	cmp	r3, #0
 800489e:	da02      	bge.n	80048a6 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80048a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048a4:	e015      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80048a6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80048aa:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80048ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80048ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048be:	2b01      	cmp	r3, #1
 80048c0:	f43f adfe 	beq.w	80044c0 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80048c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <lfs_dir_orphaningcommit+0x5d8>
 80048cc:	2303      	movs	r3, #3
 80048ce:	e000      	b.n	80048d2 <lfs_dir_orphaningcommit+0x5da>
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	37e0      	adds	r7, #224	; 0xe0
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bdb0      	pop	{r4, r5, r7, pc}
 80048da:	bf00      	nop
 80048dc:	0800c948 	.word	0x0800c948
 80048e0:	0800c830 	.word	0x0800c830
 80048e4:	0800cb04 	.word	0x0800cb04
 80048e8:	000ffc08 	.word	0x000ffc08

080048ec <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fcf9 	bl	80042f8 <lfs_dir_orphaningcommit>
 8004906:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	da01      	bge.n	8004912 <lfs_dir_commit+0x26>
        return orphans;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	e00d      	b.n	800492e <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004918:	2100      	movs	r1, #0
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f002 fbdc 	bl	80070d8 <lfs_fs_deorphan>
 8004920:	6138      	str	r0, [r7, #16]
        if (err) {
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <lfs_dir_commit+0x40>
            return err;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	e000      	b.n	800492e <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8004938:	b5b0      	push	{r4, r5, r7, lr}
 800493a:	b0b8      	sub	sp, #224	; 0xe0
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f002 fd78 	bl	8007438 <lfs_fs_forceconsistency>
 8004948:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800494c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <lfs_mkdir_+0x22>
        return err;
 8004954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004958:	e128      	b.n	8004bac <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8004962:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8004966:	463a      	mov	r2, r7
 8004968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800496c:	f103 0108 	add.w	r1, r3, #8
 8004970:	4603      	mov	r3, r0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fe faba 	bl	8002eec <lfs_dir_find>
 8004978:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800497c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004980:	f113 0f02 	cmn.w	r3, #2
 8004984:	d105      	bne.n	8004992 <lfs_mkdir_+0x5a>
 8004986:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800498a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800498e:	4293      	cmp	r3, r2
 8004990:	d109      	bne.n	80049a6 <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004996:	2b00      	cmp	r3, #0
 8004998:	da02      	bge.n	80049a0 <lfs_mkdir_+0x68>
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	e105      	b.n	8004bac <lfs_mkdir_+0x274>
 80049a0:	f06f 0310 	mvn.w	r3, #16
 80049a4:	e102      	b.n	8004bac <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fb fbcf 	bl	800014c <strlen>
 80049ae:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d902      	bls.n	80049c4 <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80049be:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80049c2:	e0f3      	b.n	8004bac <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fc fef0 	bl	80017aa <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80049ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fe fdab 	bl	800352c <lfs_dir_alloc>
 80049d6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80049da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <lfs_mkdir_+0xb0>
        return err;
 80049e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e6:	e0e1      	b.n	8004bac <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80049e8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80049ec:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80049f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80049f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 80049fc:	e012      	b.n	8004a24 <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 80049fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a02:	f103 0218 	add.w	r2, r3, #24
 8004a06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7fe f9d5 	bl	8002dbc <lfs_dir_fetch>
 8004a12:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <lfs_mkdir_+0xec>
            return err;
 8004a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a22:	e0c3      	b.n	8004bac <lfs_mkdir_+0x274>
    while (pred.split) {
 8004a24:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e8      	bne.n	80049fe <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8004a2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a30:	3318      	adds	r3, #24
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc fbdd 	bl	80011f2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8004a38:	4b5e      	ldr	r3, [pc, #376]	; (8004bb4 <lfs_mkdir_+0x27c>)
 8004a3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a40:	3318      	adds	r3, #24
 8004a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a44:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004a48:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff4c 	bl	80048ec <lfs_dir_commit>
 8004a54:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8004a58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fc fbad 	bl	80011be <lfs_pair_fromle32>
    if (err) {
 8004a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <lfs_mkdir_+0x13a>
        return err;
 8004a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a70:	e09c      	b.n	8004bac <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 8004a72:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04c      	beq.n	8004b14 <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f002 f9b9 	bl	8006df4 <lfs_fs_preporphans>
 8004a82:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8004a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <lfs_mkdir_+0x15c>
            return err;
 8004a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a92:	e08b      	b.n	8004bac <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8004aa8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc fba0 	bl	80011f2 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8004ab2:	4b40      	ldr	r3, [pc, #256]	; (8004bb4 <lfs_mkdir_+0x27c>)
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	f107 0214 	add.w	r2, r7, #20
 8004ac0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ff10 	bl	80048ec <lfs_dir_commit>
 8004acc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8004ad0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc fb72 	bl	80011be <lfs_pair_fromle32>
        if (err) {
 8004ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 8004ae2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8004aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aee:	e05d      	b.n	8004bac <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 8004af0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f002 f979 	bl	8006df4 <lfs_fs_preporphans>
 8004b02:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <lfs_mkdir_+0x1dc>
            return err;
 8004b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b12:	e04b      	b.n	8004bac <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8004b14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fc fb6a 	bl	80011f2 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8004b1e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2e:	2300      	movs	r3, #0
 8004b30:	643b      	str	r3, [r7, #64]	; 0x40
 8004b32:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004b36:	029a      	lsls	r2, r3, #10
 8004b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b42:	647b      	str	r3, [r7, #68]	; 0x44
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b48:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004b4c:	029b      	lsls	r3, r3, #10
 8004b4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b52:	f043 0308 	orr.w	r3, r3, #8
 8004b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b5e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8004b62:	f083 0301 	eor.w	r3, r3, #1
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <lfs_mkdir_+0x238>
 8004b6c:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <lfs_mkdir_+0x27c>)
 8004b6e:	e000      	b.n	8004b72 <lfs_mkdir_+0x23a>
 8004b70:	2300      	movs	r3, #0
 8004b72:	657b      	str	r3, [r7, #84]	; 0x54
 8004b74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004b7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004b82:	f103 0108 	add.w	r1, r3, #8
 8004b86:	2304      	movs	r3, #4
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff feaf 	bl	80048ec <lfs_dir_commit>
 8004b8e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8004b92:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fc fb11 	bl	80011be <lfs_pair_fromle32>
    if (err) {
 8004b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <lfs_mkdir_+0x272>
        return err;
 8004ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba8:	e000      	b.n	8004bac <lfs_mkdir_+0x274>
    }

    return 0;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	37e0      	adds	r7, #224	; 0xe0
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb4:	600ffc08 	.word	0x600ffc08

08004bb8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	3b08      	subs	r3, #8
 8004bd0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <lfs_ctz_index+0x2e>
        return 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e01c      	b.n	8004c20 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb fe72 	bl	80008d4 <lfs_popc>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	1ad2      	subs	r2, r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	fb02 f303 	mul.w	r3, r2, r3
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	1ad4      	subs	r4, r2, r3
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7fb fe60 	bl	80008d4 <lfs_popc>
 8004c14:	4603      	mov	r3, r0
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	1ae2      	subs	r2, r4, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	601a      	str	r2, [r3, #0]
    return i;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}

08004c28 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b08f      	sub	sp, #60	; 0x3c
 8004c2c:	af04      	add	r7, sp, #16
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d108      	bne.n	8004c4e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c42:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
        return 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e053      	b.n	8004cf6 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	3b01      	subs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4619      	mov	r1, r3
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f7ff ffac 	bl	8004bb8 <lfs_ctz_index>
 8004c60:	4603      	mov	r3, r0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004c68:	4619      	mov	r1, r3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ffa4 	bl	8004bb8 <lfs_ctz_index>
 8004c70:	4603      	mov	r3, r0
 8004c72:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004c74:	e034      	b.n	8004ce0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fb fe0b 	bl	800089a <lfs_npw2>
 8004c84:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004c86:	1e5c      	subs	r4, r3, #1
 8004c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c8a:	f7fb fe15 	bl	80008b8 <lfs_ctz>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4619      	mov	r1, r3
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7fb fdcc 	bl	8000830 <lfs_min>
 8004c98:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	0092      	lsls	r2, r2, #2
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	9103      	str	r1, [sp, #12]
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	9102      	str	r1, [sp, #8]
 8004ca8:	9201      	str	r2, [sp, #4]
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2304      	movs	r3, #4
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7fb fe90 	bl	80009d8 <lfs_bd_read>
 8004cb8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fe22 	bl	8000906 <lfs_fromle32>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	603b      	str	r3, [r7, #0]
        if (err) {
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <lfs_ctz_find+0xa8>
            return err;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	e012      	b.n	8004cf6 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d8c6      	bhi.n	8004c76 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf2:	601a      	str	r2, [r3, #0]
    return 0;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	372c      	adds	r7, #44	; 0x2c
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd90      	pop	{r4, r7, pc}
	...

08004d00 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b092      	sub	sp, #72	; 0x48
 8004d04:	af04      	add	r7, sp, #16
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004d0e:	f107 0320 	add.w	r3, r7, #32
 8004d12:	4619      	mov	r1, r3
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7fc fddd 	bl	80018d4 <lfs_alloc>
 8004d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <lfs_ctz_extend+0x26>
            return err;
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	e0e9      	b.n	8004efa <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	4619      	mov	r1, r3
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7fc f992 	bl	8001054 <lfs_bd_erase>
 8004d30:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004d3e:	f000 80cb 	beq.w	8004ed8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	e0d9      	b.n	8004efa <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d107      	bne.n	8004d5c <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004d4c:	6a3a      	ldr	r2, [r7, #32]
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d50:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
                return 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e0ce      	b.n	8004efa <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004d62:	f107 031c 	add.w	r3, r7, #28
 8004d66:	4619      	mov	r1, r3
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff ff25 	bl	8004bb8 <lfs_ctz_index>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	3301      	adds	r3, #1
 8004d76:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d044      	beq.n	8004e0e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004d84:	2300      	movs	r3, #0
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	e035      	b.n	8004df6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	2301      	movs	r3, #1
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	f107 0317 	add.w	r3, r7, #23
 8004d98:	9302      	str	r3, [sp, #8]
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	4613      	mov	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	2100      	movs	r1, #0
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7fb fe15 	bl	80009d8 <lfs_bd_read>
 8004dae:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <lfs_ctz_extend+0xba>
                        return err;
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	e09f      	b.n	8004efa <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	9203      	str	r2, [sp, #12]
 8004dc0:	f107 0217 	add.w	r2, r7, #23
 8004dc4:	9202      	str	r2, [sp, #8]
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	9201      	str	r2, [sp, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7fc f892 	bl	8000efc <lfs_bd_prog>
 8004dd8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004de6:	d101      	bne.n	8004dec <lfs_ctz_extend+0xec>
                            goto relocate;
 8004de8:	bf00      	nop
                    goto relocate;
 8004dea:	e075      	b.n	8004ed8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004dee:	e084      	b.n	8004efa <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df2:	3301      	adds	r3, #1
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3c5      	bcc.n	8004d8a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004dfe:	6a3a      	ldr	r2, [r7, #32]
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	601a      	str	r2, [r3, #0]
                return 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e075      	b.n	8004efa <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	3301      	adds	r3, #1
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e16:	f7fb fd4f 	bl	80008b8 <lfs_ctz>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004e24:	2300      	movs	r3, #0
 8004e26:	633b      	str	r3, [r7, #48]	; 0x30
 8004e28:	e049      	b.n	8004ebe <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fb fd74 	bl	800091a <lfs_tole32>
 8004e32:	4603      	mov	r3, r0
 8004e34:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3a:	0092      	lsls	r2, r2, #2
 8004e3c:	2104      	movs	r1, #4
 8004e3e:	9103      	str	r1, [sp, #12]
 8004e40:	f107 0118 	add.w	r1, r7, #24
 8004e44:	9102      	str	r1, [sp, #8]
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7fc f853 	bl	8000efc <lfs_bd_prog>
 8004e56:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fd53 	bl	8000906 <lfs_fromle32>
 8004e60:	4603      	mov	r3, r0
 8004e62:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004e70:	d034      	beq.n	8004edc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	e041      	b.n	8004efa <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d01b      	beq.n	8004eb8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e84:	0092      	lsls	r2, r2, #2
 8004e86:	2104      	movs	r1, #4
 8004e88:	9103      	str	r1, [sp, #12]
 8004e8a:	f107 0118 	add.w	r1, r7, #24
 8004e8e:	9102      	str	r1, [sp, #8]
 8004e90:	9201      	str	r2, [sp, #4]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2304      	movs	r3, #4
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	2100      	movs	r1, #0
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7fb fd9c 	bl	80009d8 <lfs_bd_read>
 8004ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fb fd2e 	bl	8000906 <lfs_fromle32>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8004eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <lfs_ctz_extend+0x1b8>
                        return err;
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	e020      	b.n	8004efa <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	3301      	adds	r3, #1
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d3b1      	bcc.n	8004e2a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	009a      	lsls	r2, r3, #2
 8004ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed2:	601a      	str	r2, [r3, #0]
            return 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e010      	b.n	8004efa <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8004ed8:	bf00      	nop
 8004eda:	e000      	b.n	8004ede <lfs_ctz_extend+0x1de>
                        goto relocate;
 8004edc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <lfs_ctz_extend+0x204>)
 8004ee2:	9200      	str	r2, [sp, #0]
 8004ee4:	f44f 623a 	mov.w	r2, #2976	; 0xba0
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <lfs_ctz_extend+0x208>)
 8004eea:	4808      	ldr	r0, [pc, #32]	; (8004f0c <lfs_ctz_extend+0x20c>)
 8004eec:	f006 fd50 	bl	800b990 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7fb fd4b 	bl	800098e <lfs_cache_drop>
    while (true) {
 8004ef8:	e709      	b.n	8004d0e <lfs_ctz_extend+0xe>
    }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3738      	adds	r7, #56	; 0x38
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	0800c948 	.word	0x0800c948
 8004f08:	0800c830 	.word	0x0800c830
 8004f0c:	0800c9c8 	.word	0x0800c9c8

08004f10 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b090      	sub	sp, #64	; 0x40
 8004f14:	af04      	add	r7, sp, #16
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <lfs_ctz_traverse+0x18>
        return 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e06b      	b.n	8005000 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	f107 031c 	add.w	r3, r7, #28
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fe3f 	bl	8004bb8 <lfs_ctz_index>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004f44:	4798      	blx	r3
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <lfs_ctz_traverse+0x42>
            return err;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	e056      	b.n	8005000 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <lfs_ctz_traverse+0x4c>
            return 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e051      	b.n	8005000 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	f1c3 0302 	rsb	r3, r3, #2
 8004f66:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8004f68:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8004f6a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8004f6e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	f107 0314 	add.w	r3, r7, #20
 8004f76:	9302      	str	r3, [sp, #8]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f7fb fd26 	bl	80009d8 <lfs_bd_read>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fb fcb8 	bl	8000906 <lfs_fromle32>
 8004f96:	4603      	mov	r3, r0
 8004f98:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb fcb2 	bl	8000906 <lfs_fromle32>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	61bb      	str	r3, [r7, #24]
        if (err) {
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <lfs_ctz_traverse+0xa0>
            return err;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	e027      	b.n	8005000 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb4:	e012      	b.n	8004fdc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3330      	adds	r3, #48	; 0x30
 8004fbc:	443b      	add	r3, r7
 8004fbe:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8004fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004fc8:	4798      	blx	r3
 8004fca:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <lfs_ctz_traverse+0xc6>
                return err;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	e014      	b.n	8005000 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	3301      	adds	r3, #1
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	dbe7      	blt.n	8004fb6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3330      	adds	r3, #48	; 0x30
 8004fee:	443b      	add	r3, r7
 8004ff0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004ff4:	603b      	str	r3, [r7, #0]
        index -= count;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8004ffe:	e79e      	b.n	8004f3e <lfs_ctz_traverse+0x2e>
    }
}
 8005000:	4618      	mov	r0, r3
 8005002:	3730      	adds	r7, #48	; 0x30
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8005008:	b5b0      	push	{r4, r5, r7, lr}
 800500a:	b09a      	sub	sp, #104	; 0x68
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f002 fa09 	bl	8007438 <lfs_fs_forceconsistency>
 8005026:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8005028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <lfs_file_opencfg_+0x2a>
            return err;
 800502e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005030:	e1b0      	b.n	8005394 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005036:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2200      	movs	r2, #0
 8005042:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f103 0108 	add.w	r1, r3, #8
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	3304      	adds	r3, #4
 800505a:	1d3a      	adds	r2, r7, #4
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7fd ff45 	bl	8002eec <lfs_dir_find>
 8005062:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8005064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005066:	2b00      	cmp	r3, #0
 8005068:	da0c      	bge.n	8005084 <lfs_file_opencfg_+0x7c>
 800506a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800506c:	f113 0f02 	cmn.w	r3, #2
 8005070:	d105      	bne.n	800507e <lfs_file_opencfg_+0x76>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	889b      	ldrh	r3, [r3, #4]
 8005076:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800507a:	4293      	cmp	r3, r2
 800507c:	d102      	bne.n	8005084 <lfs_file_opencfg_+0x7c>
        err = tag;
 800507e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005080:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005082:	e17c      	b.n	800537e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2201      	movs	r2, #1
 8005088:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7fc fb54 	bl	800173a <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8005092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005094:	f113 0f02 	cmn.w	r3, #2
 8005098:	d14e      	bne.n	8005138 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 80050a4:	f06f 0301 	mvn.w	r3, #1
 80050a8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80050aa:	e168      	b.n	800537e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb f84c 	bl	800014c <strlen>
 80050b4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80050c0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80050c4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80050c6:	e15a      	b.n	800537e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f103 0108 	add.w	r1, r3, #8
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	889b      	ldrh	r3, [r3, #4]
 80050d2:	029b      	lsls	r3, r3, #10
 80050d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	2300      	movs	r3, #0
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	889b      	ldrh	r3, [r3, #4]
 80050e6:	029a      	lsls	r2, r3, #10
 80050e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	889b      	ldrh	r3, [r3, #4]
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005106:	2300      	movs	r3, #0
 8005108:	643b      	str	r3, [r7, #64]	; 0x40
 800510a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800510e:	2303      	movs	r3, #3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fbeb 	bl	80048ec <lfs_dir_commit>
 8005116:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8005118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511a:	f113 0f1c 	cmn.w	r3, #28
 800511e:	d001      	beq.n	8005124 <lfs_file_opencfg_+0x11c>
 8005120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005122:	e001      	b.n	8005128 <lfs_file_opencfg_+0x120>
 8005124:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005128:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 800512a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8125 	bne.w	800537c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8005132:	4b9a      	ldr	r3, [pc, #616]	; (800539c <lfs_file_opencfg_+0x394>)
 8005134:	65bb      	str	r3, [r7, #88]	; 0x58
 8005136:	e044      	b.n	80051c2 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8005142:	f06f 0310 	mvn.w	r3, #16
 8005146:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8005148:	e119      	b.n	800537e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800514a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc f8a7 	bl	80012a0 <lfs_tag_type3>
 8005152:	4603      	mov	r3, r0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d003      	beq.n	8005160 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8005158:	f06f 0314 	mvn.w	r3, #20
 800515c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800515e:	e10e      	b.n	800537e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00e      	beq.n	8005188 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	889b      	ldrh	r3, [r3, #4]
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005178:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
 8005186:	e01c      	b.n	80051c2 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	889b      	ldrh	r3, [r3, #4]
 8005192:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005194:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005198:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80051a0:	9200      	str	r2, [sp, #0]
 80051a2:	4a7f      	ldr	r2, [pc, #508]	; (80053a0 <lfs_file_opencfg_+0x398>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7fc fd03 	bl	8001bb0 <lfs_dir_get>
 80051aa:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80051ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da02      	bge.n	80051b8 <lfs_file_opencfg_+0x1b0>
            err = tag;
 80051b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80051b6:	e0e2      	b.n	800537e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	3328      	adds	r3, #40	; 0x28
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc f9df 	bl	8001580 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80051c2:	2300      	movs	r3, #0
 80051c4:	657b      	str	r3, [r7, #84]	; 0x54
 80051c6:	e063      	b.n	8005290 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d03c      	beq.n	800524e <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80051f2:	051a      	lsls	r2, r3, #20
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	889b      	ldrh	r3, [r3, #4]
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	ea42 0103 	orr.w	r1, r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	6858      	ldr	r0, [r3, #4]
 8005204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4403      	add	r3, r0
 8005210:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005212:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800521e:	4613      	mov	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	4603      	mov	r3, r0
 800522e:	4a5d      	ldr	r2, [pc, #372]	; (80053a4 <lfs_file_opencfg_+0x39c>)
 8005230:	4621      	mov	r1, r4
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7fc fcbc 	bl	8001bb0 <lfs_dir_get>
 8005238:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800523a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523c:	2b00      	cmp	r3, #0
 800523e:	da06      	bge.n	800524e <lfs_file_opencfg_+0x246>
 8005240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005242:	f113 0f02 	cmn.w	r3, #2
 8005246:	d002      	beq.n	800524e <lfs_file_opencfg_+0x246>
                err = res;
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800524c:	e097      	b.n	800537e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d017      	beq.n	800528a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005262:	4613      	mov	r3, r2
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005272:	429a      	cmp	r2, r3
 8005274:	d903      	bls.n	800527e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8005276:	f06f 031b 	mvn.w	r3, #27
 800527a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800527c:	e07f      	b.n	800537e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800528a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528c:	3301      	adds	r3, #1
 800528e:	657b      	str	r3, [r7, #84]	; 0x54
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005298:	429a      	cmp	r2, r3
 800529a:	d395      	bcc.n	80051c8 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80052b0:	e010      	b.n	80052d4 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fb fb51 	bl	8000960 <lfs_malloc>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 80052cc:	f06f 030b 	mvn.w	r3, #11
 80052d0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80052d2:	e054      	b.n	800537e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	3340      	adds	r3, #64	; 0x40
 80052d8:	4619      	mov	r1, r3
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f7fb fb65 	bl	80009aa <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80052e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb ffdc 	bl	80012a0 <lfs_tag_type3>
 80052e8:	4603      	mov	r3, r0
 80052ea:	461a      	mov	r2, r3
 80052ec:	f240 2301 	movw	r3, #513	; 0x201
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d141      	bne.n	8005378 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f06f 0201 	mvn.w	r2, #1
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80052fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc f805 	bl	800130e <lfs_tag_size>
 8005304:	4602      	mov	r2, r0
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d020      	beq.n	8005378 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	889b      	ldrh	r3, [r3, #4]
 8005340:	029c      	lsls	r4, r3, #10
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800534a:	4618      	mov	r0, r3
 800534c:	f7fb fa70 	bl	8000830 <lfs_min>
 8005350:	4603      	mov	r3, r0
 8005352:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005354:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4613      	mov	r3, r2
 8005360:	4a0f      	ldr	r2, [pc, #60]	; (80053a0 <lfs_file_opencfg_+0x398>)
 8005362:	4629      	mov	r1, r5
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7fc fc23 	bl	8001bb0 <lfs_dir_get>
 800536a:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 800536c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536e:	2b00      	cmp	r3, #0
 8005370:	da02      	bge.n	8005378 <lfs_file_opencfg_+0x370>
                err = res;
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005374:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8005376:	e002      	b.n	800537e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8005378:	2300      	movs	r3, #0
 800537a:	e00b      	b.n	8005394 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 800537c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_close_(lfs, file);
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f823 	bl	80053d8 <lfs_file_close_>
    return err;
 8005392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8005394:	4618      	mov	r0, r3
 8005396:	3760      	adds	r7, #96	; 0x60
 8005398:	46bd      	mov	sp, r7
 800539a:	bdb0      	pop	{r4, r5, r7, pc}
 800539c:	20100000 	.word	0x20100000
 80053a0:	700ffc00 	.word	0x700ffc00
 80053a4:	7ffffc00 	.word	0x7ffffc00

080053a8 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <lfs_file_open_+0x2c>)
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fe21 	bl	8005008 <lfs_file_opencfg_>
 80053c6:	6178      	str	r0, [r7, #20]
    return err;
 80053c8:	697b      	ldr	r3, [r7, #20]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	0800dc00 	.word	0x0800dc00

080053d8 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f9e5 	bl	80057b4 <lfs_file_sync_>
 80053ea:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc f982 	bl	80016f8 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	4618      	mov	r0, r3
 8005404:	f7fb fab8 	bl	8000978 <lfs_free>
    }

    return err;
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b08d      	sub	sp, #52	; 0x34
 8005418:	af06      	add	r7, sp, #24
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800541e:	f107 030c 	add.w	r3, r7, #12
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc fa55 	bl	80018d4 <lfs_alloc>
 800542a:	6138      	str	r0, [r7, #16]
        if (err) {
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <lfs_file_relocate+0x22>
            return err;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e0bb      	b.n	80055ae <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb fe0a 	bl	8001054 <lfs_bd_erase>
 8005440:	6138      	str	r0, [r7, #16]
        if (err) {
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d006      	beq.n	8005456 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800544e:	f000 809b 	beq.w	8005588 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	e0ab      	b.n	80055ae <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e069      	b.n	8005530 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d027      	beq.n	80054b8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f103 0008 	add.w	r0, r3, #8
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	889b      	ldrh	r3, [r3, #4]
 8005480:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8005482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548a:	2101      	movs	r1, #1
 800548c:	9105      	str	r1, [sp, #20]
 800548e:	f107 010b 	add.w	r1, r7, #11
 8005492:	9104      	str	r1, [sp, #16]
 8005494:	6979      	ldr	r1, [r7, #20]
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	9302      	str	r3, [sp, #8]
 800549a:	4b47      	ldr	r3, [pc, #284]	; (80055b8 <lfs_file_relocate+0x1a4>)
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	9200      	str	r2, [sp, #0]
 80054a0:	4623      	mov	r3, r4
 80054a2:	2200      	movs	r2, #0
 80054a4:	4601      	mov	r1, r0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fb9d 	bl	8001be6 <lfs_dir_getread>
 80054ac:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01e      	beq.n	80054f2 <lfs_file_relocate+0xde>
                    return err;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e07a      	b.n	80055ae <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80054be:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1ad4      	subs	r4, r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	2201      	movs	r2, #1
 80054ce:	9203      	str	r2, [sp, #12]
 80054d0:	f107 020b 	add.w	r2, r7, #11
 80054d4:	9202      	str	r2, [sp, #8]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	9201      	str	r2, [sp, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	4623      	mov	r3, r4
 80054de:	4602      	mov	r2, r0
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fb fa79 	bl	80009d8 <lfs_bd_read>
 80054e6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <lfs_file_relocate+0xde>
                    return err;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	e05d      	b.n	80055ae <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f103 0110 	add.w	r1, r3, #16
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	9203      	str	r2, [sp, #12]
 8005500:	f107 020b 	add.w	r2, r7, #11
 8005504:	9202      	str	r2, [sp, #8]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	9201      	str	r2, [sp, #4]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2301      	movs	r3, #1
 800550e:	4602      	mov	r2, r0
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fb fcf3 	bl	8000efc <lfs_bd_prog>
 8005516:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005524:	d032      	beq.n	800558c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	e041      	b.n	80055ae <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	3301      	adds	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	429a      	cmp	r2, r3
 8005538:	d390      	bcc.n	800545c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69d9      	ldr	r1, [r3, #28]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	461a      	mov	r2, r3
 800554a:	f006 fc48 	bl	800bdde <memcpy>
        file->cache.block = lfs->pcache.block;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3310      	adds	r3, #16
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fb fa1c 	bl	80009aa <lfs_cache_zero>

        file->block = nblock;
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8005584:	2300      	movs	r3, #0
 8005586:	e012      	b.n	80055ae <lfs_file_relocate+0x19a>
                goto relocate;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <lfs_file_relocate+0x17a>
                    goto relocate;
 800558c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <lfs_file_relocate+0x1a8>)
 8005592:	9200      	str	r2, [sp, #0]
 8005594:	f640 42d6 	movw	r2, #3286	; 0xcd6
 8005598:	4909      	ldr	r1, [pc, #36]	; (80055c0 <lfs_file_relocate+0x1ac>)
 800559a:	480a      	ldr	r0, [pc, #40]	; (80055c4 <lfs_file_relocate+0x1b0>)
 800559c:	f006 f9f8 	bl	800b990 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3310      	adds	r3, #16
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fb f9f1 	bl	800098e <lfs_cache_drop>
    while (true) {
 80055ac:	e737      	b.n	800541e <lfs_file_relocate+0xa>
    }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	fff7fc00 	.word	0xfff7fc00
 80055bc:	0800c948 	.word	0x0800c948
 80055c0:	0800c830 	.word	0x0800c830
 80055c4:	0800c9c8 	.word	0x0800c9c8

080055c8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ckpoint(lfs);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc f8e5 	bl	80017aa <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff ff16 	bl	8005414 <lfs_file_relocate>
 80055e8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <lfs_file_outline+0x2c>
        return err;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	e006      	b.n	8005602 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800560c:	b590      	push	{r4, r7, lr}
 800560e:	b09f      	sub	sp, #124	; 0x7c
 8005610:	af02      	add	r7, sp, #8
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d011      	beq.n	8005646 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	3340      	adds	r3, #64	; 0x40
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fb f9aa 	bl	800098e <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80a4 	beq.w	800579c <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d176      	bne.n	8005754 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8005666:	f107 030c 	add.w	r3, r7, #12
 800566a:	2254      	movs	r2, #84	; 0x54
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f006 fae4 	bl	800bc3c <memset>
                .ctz.head = file->ctz.head,
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005680:	2301      	movs	r3, #1
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8005688:	643b      	str	r3, [r7, #64]	; 0x40
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4619      	mov	r1, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fb f977 	bl	800098e <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80056a0:	e02b      	b.n	80056fa <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80056a2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80056a6:	f107 010c 	add.w	r1, r7, #12
 80056aa:	2301      	movs	r3, #1
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f90d 	bl	80058cc <lfs_file_flushedread>
 80056b2:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80056b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da01      	bge.n	80056be <lfs_file_flush+0xb2>
                    return res;
 80056ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056bc:	e06f      	b.n	800579e <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80056be:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80056c2:	2301      	movs	r3, #1
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa08 	bl	8005adc <lfs_file_flushedwrite>
 80056cc:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80056ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da01      	bge.n	80056d8 <lfs_file_flush+0xcc>
                    return res;
 80056d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d6:	e062      	b.n	800579e <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e0:	d00b      	beq.n	80056fa <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	3340      	adds	r3, #64	; 0x40
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb f94f 	bl	800098e <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fb f94a 	bl	800098e <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	429a      	cmp	r2, r3
 8005704:	d3cd      	bcc.n	80056a2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	2301      	movs	r3, #1
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fb fb45 	bl	8000da0 <lfs_bd_flush>
 8005716:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8005718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800571a:	2b00      	cmp	r3, #0
 800571c:	d026      	beq.n	800576c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800571e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005720:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005724:	d001      	beq.n	800572a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8005726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005728:	e039      	b.n	800579e <lfs_file_flush+0x192>
                        goto relocate;
 800572a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <lfs_file_flush+0x19c>)
 8005732:	9200      	str	r2, [sp, #0]
 8005734:	f640 5225 	movw	r2, #3365	; 0xd25
 8005738:	491c      	ldr	r1, [pc, #112]	; (80057ac <lfs_file_flush+0x1a0>)
 800573a:	481d      	ldr	r0, [pc, #116]	; (80057b0 <lfs_file_flush+0x1a4>)
 800573c:	f006 f928 	bl	800b990 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fe66 	bl	8005414 <lfs_file_relocate>
 8005748:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800574a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0da      	beq.n	8005706 <lfs_file_flush+0xfa>
                    return err;
 8005750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005752:	e024      	b.n	800579e <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4619      	mov	r1, r3
 800575e:	4610      	mov	r0, r2
 8005760:	f7fb f857 	bl	8000812 <lfs_max>
 8005764:	4602      	mov	r2, r0
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	635a      	str	r2, [r3, #52]	; 0x34
 800576a:	e000      	b.n	800576e <lfs_file_flush+0x162>
                break;
 800576c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800579a:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3774      	adds	r7, #116	; 0x74
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd90      	pop	{r4, r7, pc}
 80057a6:	bf00      	nop
 80057a8:	0800c948 	.word	0x0800c948
 80057ac:	0800c830 	.word	0x0800c830
 80057b0:	0800c9c8 	.word	0x0800c9c8

080057b4 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	; 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e07a      	b.n	80058c4 <lfs_file_sync_+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff1b 	bl	800560c <lfs_file_flush>
 80057d6:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	e06a      	b.n	80058c4 <lfs_file_sync_+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d063      	beq.n	80058c2 <lfs_file_sync_+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fb fc6e 	bl	80010e0 <lfs_pair_isnull>
 8005804:	4603      	mov	r3, r0
 8005806:	f083 0301 	eor.w	r3, r3, #1
 800580a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800580c:	2b00      	cmp	r3, #0
 800580e:	d058      	beq.n	80058c2 <lfs_file_sync_+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <lfs_file_sync_+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800581c:	f240 2301 	movw	r3, #513	; 0x201
 8005820:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005826:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
 800582e:	e014      	b.n	800585a <lfs_file_sync_+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8005830:	f240 2302 	movw	r3, #514	; 0x202
 8005834:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800583c:	3228      	adds	r2, #40	; 0x28
 800583e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005842:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8005846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb feb0 	bl	80015b0 <lfs_ctz_tole32>
            buffer = &ctz;
 8005850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005854:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8005856:	2308      	movs	r3, #8
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f103 0108 	add.w	r1, r3, #8
 8005860:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005862:	051a      	lsls	r2, r3, #20
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	889b      	ldrh	r3, [r3, #4]
 8005868:	029b      	lsls	r3, r3, #10
 800586a:	431a      	orrs	r2, r3
 800586c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	889b      	ldrh	r3, [r3, #4]
 800587a:	029a      	lsls	r2, r3, #10
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4313      	orrs	r3, r2
 8005884:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	f107 0218 	add.w	r2, r7, #24
 8005896:	2302      	movs	r3, #2
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff f827 	bl	80048ec <lfs_dir_commit>
 800589e:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <lfs_file_sync_+0x102>
            file->flags |= LFS_F_ERRED;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	e006      	b.n	80058c4 <lfs_file_sync_+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3740      	adds	r7, #64	; 0x40
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80058cc:	b5b0      	push	{r4, r5, r7, lr}
 80058ce:	b090      	sub	sp, #64	; 0x40
 80058d0:	af06      	add	r7, sp, #24
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d301      	bcc.n	80058f2 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	e0b7      	b.n	8005a62 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	4619      	mov	r1, r3
 80058fe:	6838      	ldr	r0, [r7, #0]
 8005900:	f7fa ff96 	bl	8000830 <lfs_min>
 8005904:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800590a:	e0a5      	b.n	8005a58 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d006      	beq.n	8005926 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005920:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005922:	429a      	cmp	r2, r3
 8005924:	d130      	bne.n	8005988 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d11c      	bne.n	800596c <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	3138      	adds	r1, #56	; 0x38
 8005948:	68b8      	ldr	r0, [r7, #8]
 800594a:	303c      	adds	r0, #60	; 0x3c
 800594c:	9003      	str	r0, [sp, #12]
 800594e:	9102      	str	r1, [sp, #8]
 8005950:	9201      	str	r2, [sp, #4]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	462b      	mov	r3, r5
 8005956:	4622      	mov	r2, r4
 8005958:	2100      	movs	r1, #0
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff f964 	bl	8004c28 <lfs_ctz_find>
 8005960:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <lfs_file_flushedread+0xb0>
                    return err;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	e07a      	b.n	8005a62 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f06f 0201 	mvn.w	r2, #1
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800598c:	69da      	ldr	r2, [r3, #28]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	4619      	mov	r1, r3
 8005996:	6a38      	ldr	r0, [r7, #32]
 8005998:	f7fa ff4a 	bl	8000830 <lfs_min>
 800599c:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d026      	beq.n	80059f8 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f103 0408 	add.w	r4, r3, #8
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ba:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	889b      	ldrh	r3, [r3, #4]
 80059c0:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80059c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80059ce:	69b8      	ldr	r0, [r7, #24]
 80059d0:	9005      	str	r0, [sp, #20]
 80059d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059d4:	9004      	str	r0, [sp, #16]
 80059d6:	9103      	str	r1, [sp, #12]
 80059d8:	9302      	str	r3, [sp, #8]
 80059da:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <lfs_file_flushedread+0x1a0>)
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	9200      	str	r2, [sp, #0]
 80059e0:	462b      	mov	r3, r5
 80059e2:	2200      	movs	r2, #0
 80059e4:	4621      	mov	r1, r4
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7fc f8fd 	bl	8001be6 <lfs_dir_getread>
 80059ec:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01d      	beq.n	8005a30 <lfs_file_flushedread+0x164>
                return err;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	e034      	b.n	8005a62 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a02:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	9103      	str	r1, [sp, #12]
 8005a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a12:	9102      	str	r1, [sp, #8]
 8005a14:	9201      	str	r2, [sp, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4623      	mov	r3, r4
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7fa ffda 	bl	80009d8 <lfs_bd_read>
 8005a24:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <lfs_file_flushedread+0x164>
                return err;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	e018      	b.n	8005a62 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	441a      	add	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	441a      	add	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f47f af56 	bne.w	800590c <lfs_file_flushedread+0x40>
    }

    return size;
 8005a60:	683b      	ldr	r3, [r7, #0]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3728      	adds	r7, #40	; 0x28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	fff7fc00 	.word	0xfff7fc00

08005a70 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <lfs_file_read_+0x28>
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <lfs_file_read_+0x60>)
 8005a8c:	4a11      	ldr	r2, [pc, #68]	; (8005ad4 <lfs_file_read_+0x64>)
 8005a8e:	f44f 615b 	mov.w	r1, #3504	; 0xdb0
 8005a92:	4811      	ldr	r0, [pc, #68]	; (8005ad8 <lfs_file_read_+0x68>)
 8005a94:	f005 fce6 	bl	800b464 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fdb0 	bl	800560c <lfs_file_flush>
 8005aac:	6178      	str	r0, [r7, #20]
        if (err) {
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <lfs_file_read_+0x48>
            return err;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	e006      	b.n	8005ac6 <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7ff ff04 	bl	80058cc <lfs_file_flushedread>
 8005ac4:	4603      	mov	r3, r0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	0800cb70 	.word	0x0800cb70
 8005ad4:	0800dc0c 	.word	0x0800dc0c
 8005ad8:	0800c830 	.word	0x0800c830

08005adc <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005adc:	b5b0      	push	{r4, r5, r7, lr}
 8005ade:	b090      	sub	sp, #64	; 0x40
 8005ae0:	af04      	add	r7, sp, #16
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 80f4 	beq.w	8005ce8 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	441a      	add	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fa fe7f 	bl	8000812 <lfs_max>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	f240 80e4 	bls.w	8005ce8 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff fd50 	bl	80055c8 <lfs_file_outline>
 8005b28:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80db 	beq.w	8005ce8 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	e0d7      	b.n	8005cf2 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b56:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d16d      	bne.n	8005c38 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d159      	bne.n	8005c1c <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d12f      	bne.n	8005bd4 <lfs_file_flushedwrite+0xf8>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02b      	beq.n	8005bd4 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005b8e:	3a01      	subs	r2, #1
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005b94:	2000      	movs	r0, #0
 8005b96:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005b98:	f107 0010 	add.w	r0, r7, #16
 8005b9c:	9003      	str	r0, [sp, #12]
 8005b9e:	9102      	str	r1, [sp, #8]
 8005ba0:	9201      	str	r2, [sp, #4]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	2100      	movs	r1, #0
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f7ff f83c 	bl	8004c28 <lfs_ctz_find>
 8005bb0:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	e094      	b.n	8005cf2 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	3340      	adds	r3, #64	; 0x40
 8005bcc:	4619      	mov	r1, r3
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7fa feeb 	bl	80009aa <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7fb fde8 	bl	80017aa <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005be0:	68fc      	ldr	r4, [r7, #12]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	3238      	adds	r2, #56	; 0x38
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	313c      	adds	r1, #60	; 0x3c
 8005bf2:	9102      	str	r1, [sp, #8]
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	462b      	mov	r3, r5
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff f87e 	bl	8004d00 <lfs_ctz_extend>
 8005c04:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	e06a      	b.n	8005cf2 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f06f 0201 	mvn.w	r2, #1
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f7fa fdf2 	bl	8000830 <lfs_min>
 8005c4c:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005c54:	68fc      	ldr	r4, [r7, #12]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	9103      	str	r1, [sp, #12]
 8005c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c64:	9102      	str	r1, [sp, #8]
 8005c66:	9201      	str	r2, [sp, #4]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	4601      	mov	r1, r0
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7fb f943 	bl	8000efc <lfs_bd_prog>
 8005c76:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005c84:	d007      	beq.n	8005c96 <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	e02d      	b.n	8005cf2 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8005c96:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff fbba 	bl	8005414 <lfs_file_relocate>
 8005ca0:	6178      	str	r0, [r7, #20]
            if (err) {
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0d2      	beq.n	8005c4e <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	e01c      	b.n	8005cf2 <lfs_file_flushedwrite+0x216>
            break;
 8005cb8:	bf00      	nop
            }
        }

        file->pos += diff;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	441a      	add	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ckpoint(lfs);
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7fb fd61 	bl	80017aa <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f47f af29 	bne.w	8005b42 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8005cf0:	683b      	ldr	r3, [r7, #0]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3730      	adds	r7, #48	; 0x30
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005cfc <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <lfs_file_write_+0x28>
 8005d16:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <lfs_file_write_+0xfc>)
 8005d18:	4a38      	ldr	r2, [pc, #224]	; (8005dfc <lfs_file_write_+0x100>)
 8005d1a:	f640 6117 	movw	r1, #3607	; 0xe17
 8005d1e:	4838      	ldr	r0, [pc, #224]	; (8005e00 <lfs_file_write_+0x104>)
 8005d20:	f005 fba0 	bl	800b464 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff fc6a 	bl	800560c <lfs_file_flush>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <lfs_file_write_+0x48>
            return err;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	e055      	b.n	8005df0 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <lfs_file_write_+0x68>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d203      	bcs.n	8005d64 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d902      	bls.n	8005d7a <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005d74:	f06f 031a 	mvn.w	r3, #26
 8005d78:	e03a      	b.n	8005df0 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d121      	bne.n	8005dca <lfs_file_write_+0xce>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d91b      	bls.n	8005dca <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005da0:	e00e      	b.n	8005dc0 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]
 8005da6:	f107 0217 	add.w	r2, r7, #23
 8005daa:	2301      	movs	r3, #1
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff fe94 	bl	8005adc <lfs_file_flushedwrite>
 8005db4:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da01      	bge.n	8005dc0 <lfs_file_write_+0xc4>
                return res;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	e017      	b.n	8005df0 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d8eb      	bhi.n	8005da2 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fe83 	bl	8005adc <lfs_file_flushedwrite>
 8005dd6:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da01      	bge.n	8005de2 <lfs_file_write_+0xe6>
        return nsize;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	e006      	b.n	8005df0 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005dee:	69bb      	ldr	r3, [r7, #24]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3728      	adds	r7, #40	; 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	0800cba0 	.word	0x0800cba0
 8005dfc:	0800dc1c 	.word	0x0800dc1c
 8005e00:	0800c830 	.word	0x0800c830

08005e04 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b08d      	sub	sp, #52	; 0x34
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6a1a      	ldr	r2, [r3, #32]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <lfs_init+0x34>
 8005e2a:	4b96      	ldr	r3, [pc, #600]	; (8006084 <lfs_init+0x280>)
 8005e2c:	4a96      	ldr	r2, [pc, #600]	; (8006088 <lfs_init+0x284>)
 8005e2e:	f241 0143 	movw	r1, #4163	; 0x1043
 8005e32:	4896      	ldr	r0, [pc, #600]	; (800608c <lfs_init+0x288>)
 8005e34:	f005 fb16 	bl	800b464 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <lfs_init+0x4c>
 8005e42:	4b93      	ldr	r3, [pc, #588]	; (8006090 <lfs_init+0x28c>)
 8005e44:	4a90      	ldr	r2, [pc, #576]	; (8006088 <lfs_init+0x284>)
 8005e46:	f241 0144 	movw	r1, #4164	; 0x1044
 8005e4a:	4890      	ldr	r0, [pc, #576]	; (800608c <lfs_init+0x288>)
 8005e4c:	f005 fb0a 	bl	800b464 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <lfs_init+0x64>
 8005e5a:	4b8e      	ldr	r3, [pc, #568]	; (8006094 <lfs_init+0x290>)
 8005e5c:	4a8a      	ldr	r2, [pc, #552]	; (8006088 <lfs_init+0x284>)
 8005e5e:	f241 0145 	movw	r1, #4165	; 0x1045
 8005e62:	488a      	ldr	r0, [pc, #552]	; (800608c <lfs_init+0x288>)
 8005e64:	f005 fafe 	bl	800b464 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e72:	6952      	ldr	r2, [r2, #20]
 8005e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e78:	fb01 f202 	mul.w	r2, r1, r2
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d006      	beq.n	8005e90 <lfs_init+0x8c>
 8005e82:	4b85      	ldr	r3, [pc, #532]	; (8006098 <lfs_init+0x294>)
 8005e84:	4a80      	ldr	r2, [pc, #512]	; (8006088 <lfs_init+0x284>)
 8005e86:	f241 0149 	movw	r1, #4169	; 0x1049
 8005e8a:	4880      	ldr	r0, [pc, #512]	; (800608c <lfs_init+0x288>)
 8005e8c:	f005 faea 	bl	800b464 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e9a:	6992      	ldr	r2, [r2, #24]
 8005e9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ea0:	fb01 f202 	mul.w	r2, r1, r2
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <lfs_init+0xb4>
 8005eaa:	4b7c      	ldr	r3, [pc, #496]	; (800609c <lfs_init+0x298>)
 8005eac:	4a76      	ldr	r2, [pc, #472]	; (8006088 <lfs_init+0x284>)
 8005eae:	f241 014a 	movw	r1, #4170	; 0x104a
 8005eb2:	4876      	ldr	r0, [pc, #472]	; (800608c <lfs_init+0x288>)
 8005eb4:	f005 fad6 	bl	800b464 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ec2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005ec4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ec8:	fb01 f202 	mul.w	r2, r1, r2
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <lfs_init+0xdc>
 8005ed2:	4b73      	ldr	r3, [pc, #460]	; (80060a0 <lfs_init+0x29c>)
 8005ed4:	4a6c      	ldr	r2, [pc, #432]	; (8006088 <lfs_init+0x284>)
 8005ed6:	f241 014b 	movw	r1, #4171	; 0x104b
 8005eda:	486c      	ldr	r0, [pc, #432]	; (800608c <lfs_init+0x288>)
 8005edc:	f005 fac2 	bl	800b464 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee8:	d806      	bhi.n	8005ef8 <lfs_init+0xf4>
 8005eea:	4b6e      	ldr	r3, [pc, #440]	; (80060a4 <lfs_init+0x2a0>)
 8005eec:	4a66      	ldr	r2, [pc, #408]	; (8006088 <lfs_init+0x284>)
 8005eee:	f241 014e 	movw	r1, #4174	; 0x104e
 8005ef2:	4866      	ldr	r0, [pc, #408]	; (800608c <lfs_init+0x288>)
 8005ef4:	f005 fab6 	bl	800b464 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	3b08      	subs	r3, #8
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa fcc6 	bl	800089a <lfs_npw2>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	009a      	lsls	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d906      	bls.n	8005f2a <lfs_init+0x126>
 8005f1c:	4b62      	ldr	r3, [pc, #392]	; (80060a8 <lfs_init+0x2a4>)
 8005f1e:	4a5a      	ldr	r2, [pc, #360]	; (8006088 <lfs_init+0x284>)
 8005f20:	f241 0151 	movw	r1, #4177	; 0x1051
 8005f24:	4859      	ldr	r0, [pc, #356]	; (800608c <lfs_init+0x288>)
 8005f26:	f005 fa9d 	bl	800b464 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d106      	bne.n	8005f42 <lfs_init+0x13e>
 8005f34:	4b5d      	ldr	r3, [pc, #372]	; (80060ac <lfs_init+0x2a8>)
 8005f36:	4a54      	ldr	r2, [pc, #336]	; (8006088 <lfs_init+0x284>)
 8005f38:	f241 015a 	movw	r1, #4186	; 0x105a
 8005f3c:	4853      	ldr	r0, [pc, #332]	; (800608c <lfs_init+0x288>)
 8005f3e:	f005 fa91 	bl	800b464 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00f      	beq.n	8005f6c <lfs_init+0x168>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d206      	bcs.n	8005f6c <lfs_init+0x168>
 8005f5e:	4b54      	ldr	r3, [pc, #336]	; (80060b0 <lfs_init+0x2ac>)
 8005f60:	4a49      	ldr	r2, [pc, #292]	; (8006088 <lfs_init+0x284>)
 8005f62:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 8005f66:	4849      	ldr	r0, [pc, #292]	; (800608c <lfs_init+0x288>)
 8005f68:	f005 fa7c 	bl	800b464 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f76:	d00e      	beq.n	8005f96 <lfs_init+0x192>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d906      	bls.n	8005f96 <lfs_init+0x192>
 8005f88:	4b4a      	ldr	r3, [pc, #296]	; (80060b4 <lfs_init+0x2b0>)
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <lfs_init+0x284>)
 8005f8c:	f241 0162 	movw	r1, #4194	; 0x1062
 8005f90:	483e      	ldr	r0, [pc, #248]	; (800608c <lfs_init+0x288>)
 8005f92:	f005 fa67 	bl	800b464 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e010      	b.n	8005fce <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fcd4 	bl	8000960 <lfs_malloc>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d103      	bne.n	8005fce <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8005fc6:	f06f 030b 	mvn.w	r3, #11
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8005fcc:	e163      	b.n	8006296 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	61da      	str	r2, [r3, #28]
 8005fe2:	e010      	b.n	8006006 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fa fcb8 	bl	8000960 <lfs_malloc>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d103      	bne.n	8006006 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 8005ffe:	f06f 030b 	mvn.w	r3, #11
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006004:	e147      	b.n	8006296 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fa fccd 	bl	80009aa <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3310      	adds	r3, #16
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fa fcc7 	bl	80009aa <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <lfs_init+0x230>
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <lfs_init+0x2b4>)
 8006028:	4a17      	ldr	r2, [pc, #92]	; (8006088 <lfs_init+0x284>)
 800602a:	f241 0181 	movw	r1, #4225	; 0x1081
 800602e:	4817      	ldr	r0, [pc, #92]	; (800608c <lfs_init+0x288>)
 8006030:	f005 fa18 	bl	800b464 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	665a      	str	r2, [r3, #100]	; 0x64
 8006048:	e010      	b.n	800606c <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	4618      	mov	r0, r3
 8006052:	f7fa fc85 	bl	8000960 <lfs_malloc>
 8006056:	4602      	mov	r2, r0
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->lookahead.buffer) {
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8006064:	f06f 030b 	mvn.w	r3, #11
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800606a:	e114      	b.n	8006296 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	2bff      	cmp	r3, #255	; 0xff
 8006074:	d924      	bls.n	80060c0 <lfs_init+0x2bc>
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <lfs_init+0x2b8>)
 8006078:	4a03      	ldr	r2, [pc, #12]	; (8006088 <lfs_init+0x284>)
 800607a:	f241 018d 	movw	r1, #4237	; 0x108d
 800607e:	4803      	ldr	r0, [pc, #12]	; (800608c <lfs_init+0x288>)
 8006080:	f005 f9f0 	bl	800b464 <__assert_func>
 8006084:	0800cbd0 	.word	0x0800cbd0
 8006088:	0800dc2c 	.word	0x0800dc2c
 800608c:	0800c830 	.word	0x0800c830
 8006090:	0800cbec 	.word	0x0800cbec
 8006094:	0800cc08 	.word	0x0800cc08
 8006098:	0800cc24 	.word	0x0800cc24
 800609c:	0800cc54 	.word	0x0800cc54
 80060a0:	0800cc84 	.word	0x0800cc84
 80060a4:	0800ccb8 	.word	0x0800ccb8
 80060a8:	0800ccd4 	.word	0x0800ccd4
 80060ac:	0800cd20 	.word	0x0800cd20
 80060b0:	0800cd3c 	.word	0x0800cd3c
 80060b4:	0800cd90 	.word	0x0800cd90
 80060b8:	0800cdf0 	.word	0x0800cdf0
 80060bc:	0800ce10 	.word	0x0800ce10
    lfs->name_max = lfs->cfg->name_max;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d102      	bne.n	80060d8 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da06      	bge.n	80060f0 <lfs_init+0x2ec>
 80060e2:	4b71      	ldr	r3, [pc, #452]	; (80062a8 <lfs_init+0x4a4>)
 80060e4:	4a71      	ldr	r2, [pc, #452]	; (80062ac <lfs_init+0x4a8>)
 80060e6:	f241 0193 	movw	r1, #4243	; 0x1093
 80060ea:	4871      	ldr	r0, [pc, #452]	; (80062b0 <lfs_init+0x4ac>)
 80060ec:	f005 f9ba 	bl	800b464 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d103      	bne.n	800610a <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006108:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800610e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006110:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006114:	4293      	cmp	r3, r2
 8006116:	d906      	bls.n	8006126 <lfs_init+0x322>
 8006118:	4b66      	ldr	r3, [pc, #408]	; (80062b4 <lfs_init+0x4b0>)
 800611a:	4a64      	ldr	r2, [pc, #400]	; (80062ac <lfs_init+0x4a8>)
 800611c:	f241 0199 	movw	r1, #4249	; 0x1099
 8006120:	4863      	ldr	r0, [pc, #396]	; (80062b0 <lfs_init+0x4ac>)
 8006122:	f005 f99f 	bl	800b464 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800612a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800613e:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	429a      	cmp	r2, r3
 800614e:	d906      	bls.n	800615e <lfs_init+0x35a>
 8006150:	4b59      	ldr	r3, [pc, #356]	; (80062b8 <lfs_init+0x4b4>)
 8006152:	4a56      	ldr	r2, [pc, #344]	; (80062ac <lfs_init+0x4a8>)
 8006154:	f241 019f 	movw	r1, #4255	; 0x109f
 8006158:	4855      	ldr	r0, [pc, #340]	; (80062b0 <lfs_init+0x4ac>)
 800615a:	f005 f983 	bl	800b464 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006168:	d00e      	beq.n	8006188 <lfs_init+0x384>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800616e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	429a      	cmp	r2, r3
 8006178:	d906      	bls.n	8006188 <lfs_init+0x384>
 800617a:	4b50      	ldr	r3, [pc, #320]	; (80062bc <lfs_init+0x4b8>)
 800617c:	4a4b      	ldr	r2, [pc, #300]	; (80062ac <lfs_init+0x4a8>)
 800617e:	f241 01a1 	movw	r1, #4257	; 0x10a1
 8006182:	484b      	ldr	r0, [pc, #300]	; (80062b0 <lfs_init+0x4ac>)
 8006184:	f005 f96e 	bl	800b464 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800618c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006192:	d00d      	beq.n	80061b0 <lfs_init+0x3ac>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800619e:	429a      	cmp	r2, r3
 80061a0:	d906      	bls.n	80061b0 <lfs_init+0x3ac>
 80061a2:	4b47      	ldr	r3, [pc, #284]	; (80062c0 <lfs_init+0x4bc>)
 80061a4:	4a41      	ldr	r2, [pc, #260]	; (80062ac <lfs_init+0x4a8>)
 80061a6:	f241 01a3 	movw	r1, #4259	; 0x10a3
 80061aa:	4841      	ldr	r0, [pc, #260]	; (80062b0 <lfs_init+0x4ac>)
 80061ac:	f005 f95a 	bl	800b464 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ba:	d019      	beq.n	80061f0 <lfs_init+0x3ec>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <lfs_init+0x3d2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	e003      	b.n	80061de <lfs_init+0x3da>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	08db      	lsrs	r3, r3, #3
 80061de:	4293      	cmp	r3, r2
 80061e0:	d206      	bcs.n	80061f0 <lfs_init+0x3ec>
 80061e2:	4b38      	ldr	r3, [pc, #224]	; (80062c4 <lfs_init+0x4c0>)
 80061e4:	4a31      	ldr	r2, [pc, #196]	; (80062ac <lfs_init+0x4a8>)
 80061e6:	f241 01a5 	movw	r1, #4261	; 0x10a5
 80061ea:	4831      	ldr	r0, [pc, #196]	; (80062b0 <lfs_init+0x4ac>)
 80061ec:	f005 f93a 	bl	800b464 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	67da      	str	r2, [r3, #124]	; 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006202:	d103      	bne.n	800620c <lfs_init+0x408>
        lfs->inline_max = 0;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	67da      	str	r2, [r3, #124]	; 0x7c
 800620a:	e022      	b.n	8006252 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d11e      	bne.n	8006252 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006218:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        lfs->inline_max = lfs_min(
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800622c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	e003      	b.n	800623a <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006236:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fa faf7 	bl	8000830 <lfs_min>
 8006242:	4603      	mov	r3, r0
 8006244:	4619      	mov	r1, r3
 8006246:	4620      	mov	r0, r4
 8006248:	f7fa faf2 	bl	8000830 <lfs_min>
 800624c:	4602      	mov	r2, r0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006258:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006260:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	333c      	adds	r3, #60	; 0x3c
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	605a      	str	r2, [r3, #4]
 8006278:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3330      	adds	r3, #48	; 0x30
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3348      	adds	r3, #72	; 0x48
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	605a      	str	r2, [r3, #4]
 8006290:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006292:	2300      	movs	r3, #0
 8006294:	e003      	b.n	800629e <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f816 	bl	80062c8 <lfs_deinit>
    return err;
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3734      	adds	r7, #52	; 0x34
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd90      	pop	{r4, r7, pc}
 80062a6:	bf00      	nop
 80062a8:	0800ce2c 	.word	0x0800ce2c
 80062ac:	0800dc2c 	.word	0x0800dc2c
 80062b0:	0800c830 	.word	0x0800c830
 80062b4:	0800ce50 	.word	0x0800ce50
 80062b8:	0800ce6c 	.word	0x0800ce6c
 80062bc:	0800ce9c 	.word	0x0800ce9c
 80062c0:	0800cef4 	.word	0x0800cef4
 80062c4:	0800cf44 	.word	0x0800cf44

080062c8 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fa fb4a 	bl	8000978 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fa fb40 	bl	8000978 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006306:	4618      	mov	r0, r3
 8006308:	f7fa fb36 	bl	8000978 <lfs_free>
    }

    return 0;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b0a0      	sub	sp, #128	; 0x80
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
    int err = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fd6b 	bl	8005e04 <lfs_init>
 800632e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8006330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <lfs_format_+0x22>
            return err;
 8006336:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006338:	e08d      	b.n	8006456 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <lfs_format_+0x38>
 8006342:	4b47      	ldr	r3, [pc, #284]	; (8006460 <lfs_format_+0x148>)
 8006344:	4a47      	ldr	r2, [pc, #284]	; (8006464 <lfs_format_+0x14c>)
 8006346:	f241 01e5 	movw	r1, #4325	; 0x10e5
 800634a:	4847      	ldr	r0, [pc, #284]	; (8006468 <lfs_format_+0x150>)
 800634c:	f005 f88a 	bl	800b464 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	461a      	mov	r2, r3
 800635c:	2100      	movs	r1, #0
 800635e:	f005 fc6d 	bl	800bc3c <memset>
        lfs->lookahead.start = 0;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	00da      	lsls	r2, r3, #3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fa fa5a 	bl	8000830 <lfs_min>
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ckpoint(lfs);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7fb fa0e 	bl	80017aa <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fd f8c9 	bl	800352c <lfs_dir_alloc>
 800639a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800639c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d150      	bne.n	8006444 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fb f9da 	bl	800175c <lfs_fs_disk_version>
 80063a8:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 80063aa:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b0:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 80063b2:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 80063b8:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 80063be:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 80063c4:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 80063ca:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 80063cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fb f93d 	bl	8001650 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80063d6:	4b25      	ldr	r3, [pc, #148]	; (800646c <lfs_format_+0x154>)
 80063d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063da:	2300      	movs	r3, #0
 80063dc:	653b      	str	r3, [r7, #80]	; 0x50
 80063de:	4b24      	ldr	r3, [pc, #144]	; (8006470 <lfs_format_+0x158>)
 80063e0:	657b      	str	r3, [r7, #84]	; 0x54
 80063e2:	4b24      	ldr	r3, [pc, #144]	; (8006474 <lfs_format_+0x15c>)
 80063e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <lfs_format_+0x160>)
 80063e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80063ee:	663b      	str	r3, [r7, #96]	; 0x60
 80063f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80063f4:	f107 010c 	add.w	r1, r7, #12
 80063f8:	2303      	movs	r3, #3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fe fa76 	bl	80048ec <lfs_dir_commit>
 8006400:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8006402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d11f      	bne.n	8006448 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8006408:	2300      	movs	r3, #0
 800640a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800640e:	f107 010c 	add.w	r1, r7, #12
 8006412:	2300      	movs	r3, #0
 8006414:	2200      	movs	r2, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fe fa68 	bl	80048ec <lfs_dir_commit>
 800641c:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800641e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d113      	bne.n	800644c <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8006424:	2300      	movs	r3, #0
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006428:	2301      	movs	r3, #1
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
 800642c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fc fcc0 	bl	8002dbc <lfs_dir_fetch>
 800643c:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800643e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006440:	2b00      	cmp	r3, #0
 8006442:	e004      	b.n	800644e <lfs_format_+0x136>
            goto cleanup;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <lfs_format_+0x136>
            goto cleanup;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <lfs_format_+0x136>
            goto cleanup;
 800644c:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff3a 	bl	80062c8 <lfs_deinit>
    return err;
 8006454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8006456:	4618      	mov	r0, r3
 8006458:	3780      	adds	r7, #128	; 0x80
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	0800cfd4 	.word	0x0800cfd4
 8006464:	0800dc38 	.word	0x0800dc38
 8006468:	0800c830 	.word	0x0800c830
 800646c:	40100000 	.word	0x40100000
 8006470:	0ff00008 	.word	0x0ff00008
 8006474:	0800cfec 	.word	0x0800cfec
 8006478:	20100018 	.word	0x20100018

0800647c <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 800647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647e:	b09f      	sub	sp, #124	; 0x7c
 8006480:	af04      	add	r7, sp, #16
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fcbb 	bl	8005e04 <lfs_init>
 800648e:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8006490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <lfs_mount_+0x1e>
        return err;
 8006496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006498:	e1fa      	b.n	8006890 <lfs_mount_+0x414>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800649a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800649e:	2220      	movs	r2, #32
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f005 fbca 	bl	800bc3c <memset>
 80064a8:	2301      	movs	r3, #1
 80064aa:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80064ac:	4a96      	ldr	r2, [pc, #600]	; (8006708 <lfs_mount_+0x28c>)
 80064ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064b6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80064ba:	2301      	movs	r3, #1
 80064bc:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 80064c2:	e191      	b.n	80067e8 <lfs_mount_+0x36c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80064c4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80064c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80064cc:	3318      	adds	r3, #24
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fa fe48 	bl	8001166 <lfs_pair_issync>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 80064dc:	4b8b      	ldr	r3, [pc, #556]	; (800670c <lfs_mount_+0x290>)
 80064de:	f241 122e 	movw	r2, #4398	; 0x112e
 80064e2:	498b      	ldr	r1, [pc, #556]	; (8006710 <lfs_mount_+0x294>)
 80064e4:	488b      	ldr	r0, [pc, #556]	; (8006714 <lfs_mount_+0x298>)
 80064e6:	f005 fa53 	bl	800b990 <iprintf>
            err = LFS_ERR_CORRUPT;
 80064ea:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80064ee:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80064f0:	e1ca      	b.n	8006888 <lfs_mount_+0x40c>
        }
        if (tortoise_i == tortoise_period) {
 80064f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d108      	bne.n	800650c <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80064fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 80064fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006500:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 8006502:	2300      	movs	r3, #0
 8006504:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8006506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 800650c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800650e:	3301      	adds	r3, #1
 8006510:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	4b80      	ldr	r3, [pc, #512]	; (8006718 <lfs_mount_+0x29c>)
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
 800651a:	2308      	movs	r3, #8
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800651e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006522:	f103 0218 	add.w	r2, r3, #24
 8006526:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800652a:	f107 0320 	add.w	r3, r7, #32
 800652e:	9303      	str	r3, [sp, #12]
 8006530:	4b7a      	ldr	r3, [pc, #488]	; (800671c <lfs_mount_+0x2a0>)
 8006532:	9302      	str	r3, [sp, #8]
 8006534:	2300      	movs	r3, #0
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	4b79      	ldr	r3, [pc, #484]	; (8006720 <lfs_mount_+0x2a4>)
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	4b79      	ldr	r3, [pc, #484]	; (8006724 <lfs_mount_+0x2a8>)
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fc f86c 	bl	800261c <lfs_dir_fetchmatch>
 8006544:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8006546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006548:	2b00      	cmp	r3, #0
 800654a:	da02      	bge.n	8006552 <lfs_mount_+0xd6>
            err = tag;
 800654c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800654e:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8006550:	e19a      	b.n	8006888 <lfs_mount_+0x40c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8006552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 813a 	beq.w	80067ce <lfs_mount_+0x352>
 800655a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800655c:	4618      	mov	r0, r3
 800655e:	f7fa fe6f 	bl	8001240 <lfs_tag_isdelete>
 8006562:	4603      	mov	r3, r0
 8006564:	f083 0301 	eor.w	r3, r3, #1
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 812f 	beq.w	80067ce <lfs_mount_+0x352>
            // update root
            lfs->root[0] = dir.pair[0];
 8006570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8006576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800657c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006580:	f107 0308 	add.w	r3, r7, #8
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4b68      	ldr	r3, [pc, #416]	; (8006728 <lfs_mount_+0x2ac>)
 8006588:	4a66      	ldr	r2, [pc, #408]	; (8006724 <lfs_mount_+0x2a8>)
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fb fb10 	bl	8001bb0 <lfs_dir_get>
 8006590:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006594:	2b00      	cmp	r3, #0
 8006596:	da02      	bge.n	800659e <lfs_mount_+0x122>
                err = tag;
 8006598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800659a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 800659c:	e174      	b.n	8006888 <lfs_mount_+0x40c>
            }
            lfs_superblock_fromle32(&superblock);
 800659e:	f107 0308 	add.w	r3, r7, #8
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fb f81c 	bl	80015e0 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb f8dc 	bl	8001774 <lfs_fs_disk_version_major>
 80065bc:	4603      	mov	r3, r0
 80065be:	461a      	mov	r2, r3
 80065c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7fb f8e1 	bl	8001790 <lfs_fs_disk_version_minor>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d91d      	bls.n	8006616 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 80065da:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 80065de:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fb f8c6 	bl	8001774 <lfs_fs_disk_version_major>
 80065e8:	4603      	mov	r3, r0
 80065ea:	461e      	mov	r6, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fb f8cf 	bl	8001790 <lfs_fs_disk_version_minor>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	4b45      	ldr	r3, [pc, #276]	; (800670c <lfs_mount_+0x290>)
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	9202      	str	r2, [sp, #8]
 80065fc:	9601      	str	r6, [sp, #4]
 80065fe:	9400      	str	r4, [sp, #0]
 8006600:	462b      	mov	r3, r5
 8006602:	f241 125c 	movw	r2, #4444	; 0x115c
 8006606:	4942      	ldr	r1, [pc, #264]	; (8006710 <lfs_mount_+0x294>)
 8006608:	4848      	ldr	r0, [pc, #288]	; (800672c <lfs_mount_+0x2b0>)
 800660a:	f005 f9c1 	bl	800b990 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 800660e:	f06f 0315 	mvn.w	r3, #21
 8006612:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006614:	e0da      	b.n	80067cc <lfs_mount_+0x350>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb f8ba 	bl	8001790 <lfs_fs_disk_version_minor>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006624:	4293      	cmp	r3, r2
 8006626:	d21d      	bcs.n	8006664 <lfs_mount_+0x1e8>
                LFS_DEBUG("Found older minor version "
 8006628:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 800662c:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fb f89f 	bl	8001774 <lfs_fs_disk_version_major>
 8006636:	4603      	mov	r3, r0
 8006638:	461e      	mov	r6, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb f8a8 	bl	8001790 <lfs_fs_disk_version_minor>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	4b31      	ldr	r3, [pc, #196]	; (800670c <lfs_mount_+0x290>)
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	9202      	str	r2, [sp, #8]
 800664a:	9601      	str	r6, [sp, #4]
 800664c:	9400      	str	r4, [sp, #0]
 800664e:	462b      	mov	r3, r5
 8006650:	f241 126a 	movw	r2, #4458	; 0x116a
 8006654:	492e      	ldr	r1, [pc, #184]	; (8006710 <lfs_mount_+0x294>)
 8006656:	4836      	ldr	r0, [pc, #216]	; (8006730 <lfs_mount_+0x2b4>)
 8006658:	f005 f99a 	bl	800b990 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 800665c:	2101      	movs	r1, #1
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fbb4 	bl	8006dcc <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d018      	beq.n	800669c <lfs_mount_+0x220>
                if (superblock.name_max > lfs->name_max) {
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006670:	429a      	cmp	r2, r3
 8006672:	d910      	bls.n	8006696 <lfs_mount_+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	4924      	ldr	r1, [pc, #144]	; (800670c <lfs_mount_+0x290>)
 800667c:	9101      	str	r1, [sp, #4]
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4613      	mov	r3, r2
 8006682:	f241 1278 	movw	r2, #4472	; 0x1178
 8006686:	4922      	ldr	r1, [pc, #136]	; (8006710 <lfs_mount_+0x294>)
 8006688:	482a      	ldr	r0, [pc, #168]	; (8006734 <lfs_mount_+0x2b8>)
 800668a:	f005 f981 	bl	800b990 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800668e:	f06f 0315 	mvn.w	r3, #21
 8006692:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006694:	e09a      	b.n	80067cc <lfs_mount_+0x350>
                }

                lfs->name_max = superblock.name_max;
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <lfs_mount_+0x258>
                if (superblock.file_max > lfs->file_max) {
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d910      	bls.n	80066ce <lfs_mount_+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b2:	4916      	ldr	r1, [pc, #88]	; (800670c <lfs_mount_+0x290>)
 80066b4:	9101      	str	r1, [sp, #4]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	f241 1283 	movw	r2, #4483	; 0x1183
 80066be:	4914      	ldr	r1, [pc, #80]	; (8006710 <lfs_mount_+0x294>)
 80066c0:	481d      	ldr	r0, [pc, #116]	; (8006738 <lfs_mount_+0x2bc>)
 80066c2:	f005 f965 	bl	800b990 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80066c6:	f06f 0315 	mvn.w	r3, #21
 80066ca:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 80066cc:	e07e      	b.n	80067cc <lfs_mount_+0x350>
                }

                lfs->file_max = superblock.file_max;
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d040      	beq.n	800675c <lfs_mount_+0x2e0>
                if (superblock.attr_max > lfs->attr_max) {
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d92d      	bls.n	8006740 <lfs_mount_+0x2c4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ea:	4908      	ldr	r1, [pc, #32]	; (800670c <lfs_mount_+0x290>)
 80066ec:	9101      	str	r1, [sp, #4]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	f241 128e 	movw	r2, #4494	; 0x118e
 80066f6:	4906      	ldr	r1, [pc, #24]	; (8006710 <lfs_mount_+0x294>)
 80066f8:	4810      	ldr	r0, [pc, #64]	; (800673c <lfs_mount_+0x2c0>)
 80066fa:	f005 f949 	bl	800b990 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80066fe:	f06f 0315 	mvn.w	r3, #21
 8006702:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006704:	e062      	b.n	80067cc <lfs_mount_+0x350>
 8006706:	bf00      	nop
 8006708:	0800c98c 	.word	0x0800c98c
 800670c:	0800c948 	.word	0x0800c948
 8006710:	0800c830 	.word	0x0800c830
 8006714:	0800cff8 	.word	0x0800cff8
 8006718:	0800cfec 	.word	0x0800cfec
 800671c:	08002e59 	.word	0x08002e59
 8006720:	0ff00008 	.word	0x0ff00008
 8006724:	7ffffc00 	.word	0x7ffffc00
 8006728:	20100018 	.word	0x20100018
 800672c:	0800d024 	.word	0x0800d024
 8006730:	0800d05c 	.word	0x0800d05c
 8006734:	0800d09c 	.word	0x0800d09c
 8006738:	0800d0d0 	.word	0x0800d0d0
 800673c:	0800d104 	.word	0x0800d104
                }

                lfs->attr_max = superblock.attr_max;
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	679a      	str	r2, [r3, #120]	; 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800674e:	4619      	mov	r1, r3
 8006750:	4610      	mov	r0, r2
 8006752:	f7fa f86d 	bl	8000830 <lfs_min>
 8006756:	4602      	mov	r2, r0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	67da      	str	r2, [r3, #124]	; 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d017      	beq.n	8006796 <lfs_mount_+0x31a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	429a      	cmp	r2, r3
 8006770:	d011      	beq.n	8006796 <lfs_mount_+0x31a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	4947      	ldr	r1, [pc, #284]	; (8006898 <lfs_mount_+0x41c>)
 800677c:	9101      	str	r1, [sp, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	f241 129d 	movw	r2, #4509	; 0x119d
 8006786:	4945      	ldr	r1, [pc, #276]	; (800689c <lfs_mount_+0x420>)
 8006788:	4845      	ldr	r0, [pc, #276]	; (80068a0 <lfs_mount_+0x424>)
 800678a:	f005 f901 	bl	800b990 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800678e:	f06f 0315 	mvn.w	r3, #21
 8006792:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006794:	e01a      	b.n	80067cc <lfs_mount_+0x350>
            }

            lfs->block_count = superblock.block_count;
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d012      	beq.n	80067ce <lfs_mount_+0x352>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	4939      	ldr	r1, [pc, #228]	; (8006898 <lfs_mount_+0x41c>)
 80067b2:	9101      	str	r1, [sp, #4]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	f241 12a6 	movw	r2, #4518	; 0x11a6
 80067bc:	4937      	ldr	r1, [pc, #220]	; (800689c <lfs_mount_+0x420>)
 80067be:	4839      	ldr	r0, [pc, #228]	; (80068a4 <lfs_mount_+0x428>)
 80067c0:	f005 f8e6 	bl	800b990 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 80067c4:	f06f 0315 	mvn.w	r3, #21
 80067c8:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 80067ca:	bf00      	nop
            goto cleanup;
 80067cc:	e05c      	b.n	8006888 <lfs_mount_+0x40c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fc fb0a 	bl	8002df4 <lfs_dir_getgstate>
 80067e0:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 80067e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d14e      	bne.n	8006886 <lfs_mount_+0x40a>
    while (!lfs_pair_isnull(dir.tail)) {
 80067e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80067ec:	3318      	adds	r3, #24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fa fc76 	bl	80010e0 <lfs_pair_isnull>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f083 0301 	eor.w	r3, r3, #1
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f47f ae61 	bne.w	80064c4 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3330      	adds	r3, #48	; 0x30
 8006806:	4618      	mov	r0, r3
 8006808:	f7fa fdc5 	bl	8001396 <lfs_gstate_iszero>
 800680c:	4603      	mov	r3, r0
 800680e:	f083 0301 	eor.w	r3, r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d010      	beq.n	800683a <lfs_mount_+0x3be>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006824:	481c      	ldr	r0, [pc, #112]	; (8006898 <lfs_mount_+0x41c>)
 8006826:	9002      	str	r0, [sp, #8]
 8006828:	9201      	str	r2, [sp, #4]
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	460b      	mov	r3, r1
 800682e:	f241 12b6 	movw	r2, #4534	; 0x11b6
 8006832:	491a      	ldr	r1, [pc, #104]	; (800689c <lfs_mount_+0x420>)
 8006834:	481c      	ldr	r0, [pc, #112]	; (80068a8 <lfs_mount_+0x42c>)
 8006836:	f005 f8ab 	bl	800b990 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	4618      	mov	r0, r3
 8006840:	f7fa fcf1 	bl	8001226 <lfs_tag_isvalid>
 8006844:	4603      	mov	r3, r0
 8006846:	f083 0301 	eor.w	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	441a      	add	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	333c      	adds	r3, #60	; 0x3c
 800685e:	3230      	adds	r2, #48	; 0x30
 8006860:	ca07      	ldmia	r2, {r0, r1, r2}
 8006862:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800686e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006872:	fb01 f202 	mul.w	r2, r1, r2
 8006876:	1a9a      	subs	r2, r3, r2
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7fa ffa1 	bl	80017c4 <lfs_alloc_drop>

    return 0;
 8006882:	2300      	movs	r3, #0
 8006884:	e004      	b.n	8006890 <lfs_mount_+0x414>
            goto cleanup;
 8006886:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f80f 	bl	80068ac <lfs_unmount_>
    return err;
 800688e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8006890:	4618      	mov	r0, r3
 8006892:	376c      	adds	r7, #108	; 0x6c
 8006894:	46bd      	mov	sp, r7
 8006896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006898:	0800c948 	.word	0x0800c948
 800689c:	0800c830 	.word	0x0800c830
 80068a0:	0800d138 	.word	0x0800d138
 80068a4:	0800d16c 	.word	0x0800d16c
 80068a8:	0800d19c 	.word	0x0800d19c

080068ac <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fd07 	bl	80062c8 <lfs_deinit>
 80068ba:	4603      	mov	r3, r0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80068c4:	b590      	push	{r4, r7, lr}
 80068c6:	b0a1      	sub	sp, #132	; 0x84
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80068d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d6:	2220      	movs	r2, #32
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f005 f9ae 	bl	800bc3c <memset>
 80068e0:	2301      	movs	r3, #1
 80068e2:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80068e4:	4a9a      	ldr	r2, [pc, #616]	; (8006b50 <lfs_fs_traverse_+0x28c>)
 80068e6:	f107 031c 	add.w	r3, r7, #28
 80068ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ee:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 80068fa:	e0c0      	b.n	8006a7e <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 80068fc:	f107 021c 	add.w	r2, r7, #28
 8006900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006904:	3318      	adds	r3, #24
 8006906:	4611      	mov	r1, r2
 8006908:	4618      	mov	r0, r3
 800690a:	f7fa fc2c 	bl	8001166 <lfs_pair_issync>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8006914:	4b8f      	ldr	r3, [pc, #572]	; (8006b54 <lfs_fs_traverse_+0x290>)
 8006916:	f241 2211 	movw	r2, #4625	; 0x1211
 800691a:	498f      	ldr	r1, [pc, #572]	; (8006b58 <lfs_fs_traverse_+0x294>)
 800691c:	488f      	ldr	r0, [pc, #572]	; (8006b5c <lfs_fs_traverse_+0x298>)
 800691e:	f005 f837 	bl	800b990 <iprintf>
            return LFS_ERR_CORRUPT;
 8006922:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006926:	e10f      	b.n	8006b48 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8006928:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800692a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800692c:	429a      	cmp	r2, r3
 800692e:	d108      	bne.n	8006942 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8006930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006932:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8006934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006936:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 800693c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	3301      	adds	r3, #1
 8006946:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8006948:	2300      	movs	r3, #0
 800694a:	667b      	str	r3, [r7, #100]	; 0x64
 800694c:	e013      	b.n	8006976 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 800694e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006950:	3306      	adds	r3, #6
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	3370      	adds	r3, #112	; 0x70
 8006956:	443b      	add	r3, r7
 8006958:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4611      	mov	r1, r2
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
 8006964:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <lfs_fs_traverse_+0xac>
                return err;
 800696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696e:	e0eb      	b.n	8006b48 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8006970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006972:	3301      	adds	r3, #1
 8006974:	667b      	str	r3, [r7, #100]	; 0x64
 8006976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006978:	2b01      	cmp	r3, #1
 800697a:	dde8      	ble.n	800694e <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800697c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006980:	f103 0218 	add.w	r2, r3, #24
 8006984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006988:	4619      	mov	r1, r3
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7fc fa16 	bl	8002dbc <lfs_dir_fetch>
 8006990:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <lfs_fs_traverse_+0xd8>
            return err;
 8006998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699a:	e0d5      	b.n	8006b48 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800699c:	2300      	movs	r3, #0
 800699e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80069a2:	e067      	b.n	8006a74 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80069a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80069a8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80069aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069ae:	f043 0308 	orr.w	r3, r3, #8
 80069b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80069b6:	f107 0214 	add.w	r2, r7, #20
 80069ba:	9200      	str	r2, [sp, #0]
 80069bc:	4a68      	ldr	r2, [pc, #416]	; (8006b60 <lfs_fs_traverse_+0x29c>)
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7fb f8f6 	bl	8001bb0 <lfs_dir_get>
 80069c4:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 80069c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da05      	bge.n	80069d8 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 80069cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ce:	f113 0f02 	cmn.w	r3, #2
 80069d2:	d049      	beq.n	8006a68 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 80069d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d6:	e0b7      	b.n	8006b48 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 80069d8:	f107 0314 	add.w	r3, r7, #20
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fa fdcf 	bl	8001580 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80069e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fa fc5b 	bl	80012a0 <lfs_tag_type3>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	f240 2302 	movw	r3, #514	; 0x202
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d113      	bne.n	8006a1e <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	6978      	ldr	r0, [r7, #20]
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	9202      	str	r2, [sp, #8]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	9201      	str	r2, [sp, #4]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	4603      	mov	r3, r0
 8006a08:	460a      	mov	r2, r1
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7fe fa7f 	bl	8004f10 <lfs_ctz_traverse>
 8006a12:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d027      	beq.n	8006a6a <lfs_fs_traverse_+0x1a6>
                    return err;
 8006a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1c:	e094      	b.n	8006b48 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d022      	beq.n	8006a6a <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fa fc3a 	bl	80012a0 <lfs_tag_type3>
 8006a2c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a32:	d11a      	bne.n	8006a6a <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8006a34:	2300      	movs	r3, #0
 8006a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a38:	e012      	b.n	8006a60 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8006a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	f107 0214 	add.w	r2, r7, #20
 8006a42:	4413      	add	r3, r2
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <lfs_fs_traverse_+0x196>
                        return err;
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	e076      	b.n	8006b48 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8006a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	dde9      	ble.n	8006a3a <lfs_fs_traverse_+0x176>
 8006a66:	e000      	b.n	8006a6a <lfs_fs_traverse_+0x1a6>
                    continue;
 8006a68:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006a6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006a6e:	3301      	adds	r3, #1
 8006a70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006a74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a76:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d392      	bcc.n	80069a4 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8006a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a82:	3318      	adds	r3, #24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fa fb2b 	bl	80010e0 <lfs_pair_isnull>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f083 0301 	eor.w	r3, r3, #1
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f47f af32 	bne.w	80068fc <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a9e:	e04f      	b.n	8006b40 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8006aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa2:	799b      	ldrb	r3, [r3, #6]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d147      	bne.n	8006b38 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01d      	beq.n	8006af0 <lfs_fs_traverse_+0x22c>
 8006ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d117      	bne.n	8006af0 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ac2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	9202      	str	r2, [sp, #8]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	9201      	str	r2, [sp, #4]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4623      	mov	r3, r4
 8006adc:	4602      	mov	r2, r0
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7fe fa16 	bl	8004f10 <lfs_ctz_traverse>
 8006ae4:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <lfs_fs_traverse_+0x22c>
                return err;
 8006aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aee:	e02b      	b.n	8006b48 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01e      	beq.n	8006b3a <lfs_fs_traverse_+0x276>
 8006afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d118      	bne.n	8006b3a <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006b08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b0a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b12:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	9202      	str	r2, [sp, #8]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	9201      	str	r2, [sp, #4]
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4623      	mov	r3, r4
 8006b24:	4602      	mov	r2, r0
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fe f9f2 	bl	8004f10 <lfs_ctz_traverse>
 8006b2c:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <lfs_fs_traverse_+0x276>
                return err;
 8006b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b36:	e007      	b.n	8006b48 <lfs_fs_traverse_+0x284>
            continue;
 8006b38:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1ac      	bne.n	8006aa0 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3774      	adds	r7, #116	; 0x74
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd90      	pop	{r4, r7, pc}
 8006b50:	0800c98c 	.word	0x0800c98c
 8006b54:	0800c948 	.word	0x0800c948
 8006b58:	0800c830 	.word	0x0800c830
 8006b5c:	0800cff8 	.word	0x0800cff8
 8006b60:	700ffc00 	.word	0x700ffc00

08006b64 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006b7c:	4a2d      	ldr	r2, [pc, #180]	; (8006c34 <lfs_fs_pred+0xd0>)
 8006b7e:	f107 0314 	add.w	r3, r7, #20
 8006b82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b86:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8006b92:	e03e      	b.n	8006c12 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3318      	adds	r3, #24
 8006b98:	f107 0214 	add.w	r2, r7, #20
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fa fae1 	bl	8001166 <lfs_pair_issync>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8006baa:	4b23      	ldr	r3, [pc, #140]	; (8006c38 <lfs_fs_pred+0xd4>)
 8006bac:	f241 226f 	movw	r2, #4719	; 0x126f
 8006bb0:	4922      	ldr	r1, [pc, #136]	; (8006c3c <lfs_fs_pred+0xd8>)
 8006bb2:	4823      	ldr	r0, [pc, #140]	; (8006c40 <lfs_fs_pred+0xdc>)
 8006bb4:	f004 feec 	bl	800b990 <iprintf>
            return LFS_ERR_CORRUPT;
 8006bb8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006bbc:	e036      	b.n	8006c2c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8006bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d10a      	bne.n	8006bdc <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	3301      	adds	r3, #1
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3318      	adds	r3, #24
 8006be6:	68b9      	ldr	r1, [r7, #8]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fa fa93 	bl	8001114 <lfs_pair_cmp>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <lfs_fs_pred+0x94>
            return 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e019      	b.n	8006c2c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3318      	adds	r3, #24
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7fc f8db 	bl	8002dbc <lfs_dir_fetch>
 8006c06:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <lfs_fs_pred+0xae>
            return err;
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	e00c      	b.n	8006c2c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3318      	adds	r3, #24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fa fa62 	bl	80010e0 <lfs_pair_isnull>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f083 0301 	eor.w	r3, r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1b5      	bne.n	8006b94 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006c28:	f06f 0301 	mvn.w	r3, #1
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3728      	adds	r7, #40	; 0x28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	0800c98c 	.word	0x0800c98c
 8006c38:	0800c948 	.word	0x0800c948
 8006c3c:	0800c830 	.word	0x0800c830
 8006c40:	0800cff8 	.word	0x0800cff8

08006c44 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006c44:	b5b0      	push	{r4, r5, r7, lr}
 8006c46:	b08e      	sub	sp, #56	; 0x38
 8006c48:	af04      	add	r7, sp, #16
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8006c64:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c6a:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8006c74:	2108      	movs	r1, #8
 8006c76:	9103      	str	r1, [sp, #12]
 8006c78:	f107 0110 	add.w	r1, r7, #16
 8006c7c:	9102      	str	r1, [sp, #8]
 8006c7e:	9201      	str	r2, [sp, #4]
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	462b      	mov	r3, r5
 8006c84:	4622      	mov	r2, r4
 8006c86:	4601      	mov	r1, r0
 8006c88:	6a38      	ldr	r0, [r7, #32]
 8006c8a:	f7f9 fea5 	bl	80009d8 <lfs_bd_read>
 8006c8e:	61b8      	str	r0, [r7, #24]
    if (err) {
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <lfs_fs_parent_match+0x56>
        return err;
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	e012      	b.n	8006cc0 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8006c9a:	f107 0310 	add.w	r3, r7, #16
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fa fa8d 	bl	80011be <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	1d1a      	adds	r2, r3, #4
 8006ca8:	f107 0310 	add.w	r3, r7, #16
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa fa30 	bl	8001114 <lfs_pair_cmp>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bf14      	ite	ne
 8006cba:	2301      	movne	r3, #1
 8006cbc:	2300      	moveq	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3728      	adds	r7, #40	; 0x28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bdb0      	pop	{r4, r5, r7, pc}

08006cc8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b090      	sub	sp, #64	; 0x40
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006ce0:	4a33      	ldr	r2, [pc, #204]	; (8006db0 <lfs_fs_parent+0xe8>)
 8006ce2:	f107 031c 	add.w	r3, r7, #28
 8006ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cea:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8006cf6:	e04a      	b.n	8006d8e <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	f107 021c 	add.w	r2, r7, #28
 8006d00:	4611      	mov	r1, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fa fa2f 	bl	8001166 <lfs_pair_issync>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8006d0e:	4b29      	ldr	r3, [pc, #164]	; (8006db4 <lfs_fs_parent+0xec>)
 8006d10:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8006d14:	4928      	ldr	r1, [pc, #160]	; (8006db8 <lfs_fs_parent+0xf0>)
 8006d16:	4829      	ldr	r0, [pc, #164]	; (8006dbc <lfs_fs_parent+0xf4>)
 8006d18:	f004 fe3a 	bl	800b990 <iprintf>
            return LFS_ERR_CORRUPT;
 8006d1c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006d20:	e042      	b.n	8006da8 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8006d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d10a      	bne.n	8006d40 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	3301      	adds	r3, #1
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006d54:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3304      	adds	r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8006d5c:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8006d5e:	f107 0310 	add.w	r3, r7, #16
 8006d62:	9303      	str	r3, [sp, #12]
 8006d64:	4b16      	ldr	r3, [pc, #88]	; (8006dc0 <lfs_fs_parent+0xf8>)
 8006d66:	9302      	str	r3, [sp, #8]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9301      	str	r3, [sp, #4]
 8006d6c:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <lfs_fs_parent+0xfc>)
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <lfs_fs_parent+0x100>)
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7fb fc51 	bl	800261c <lfs_dir_fetchmatch>
 8006d7a:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <lfs_fs_parent+0xc6>
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	f113 0f02 	cmn.w	r3, #2
 8006d88:	d001      	beq.n	8006d8e <lfs_fs_parent+0xc6>
            return tag;
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	e00c      	b.n	8006da8 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3318      	adds	r3, #24
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fa f9a4 	bl	80010e0 <lfs_pair_isnull>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	f083 0301 	eor.w	r3, r3, #1
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1a9      	bne.n	8006cf8 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8006da4:	f06f 0301 	mvn.w	r3, #1
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3730      	adds	r7, #48	; 0x30
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	0800c98c 	.word	0x0800c98c
 8006db4:	0800c948 	.word	0x0800c948
 8006db8:	0800c830 	.word	0x0800c830
 8006dbc:	0800cff8 	.word	0x0800cff8
 8006dc0:	08006c45 	.word	0x08006c45
 8006dc4:	20000008 	.word	0x20000008
 8006dc8:	7ff003ff 	.word	0x7ff003ff

08006dcc <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	025b      	lsls	r3, r3, #9
 8006de4:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr

08006df4 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fa fa82 	bl	800130e <lfs_tag_size>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <lfs_fs_preporphans+0x32>
 8006e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da06      	bge.n	8006e26 <lfs_fs_preporphans+0x32>
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <lfs_fs_preporphans+0x90>)
 8006e1a:	4a1b      	ldr	r2, [pc, #108]	; (8006e88 <lfs_fs_preporphans+0x94>)
 8006e1c:	f241 21d1 	movw	r1, #4817	; 0x12d1
 8006e20:	481a      	ldr	r0, [pc, #104]	; (8006e8c <lfs_fs_preporphans+0x98>)
 8006e22:	f004 fb1f 	bl	800b464 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fa fa6f 	bl	800130e <lfs_tag_size>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8006e36:	d90a      	bls.n	8006e4e <lfs_fs_preporphans+0x5a>
 8006e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd06      	ble.n	8006e4e <lfs_fs_preporphans+0x5a>
 8006e40:	4b13      	ldr	r3, [pc, #76]	; (8006e90 <lfs_fs_preporphans+0x9c>)
 8006e42:	4a11      	ldr	r2, [pc, #68]	; (8006e88 <lfs_fs_preporphans+0x94>)
 8006e44:	f241 21d2 	movw	r1, #4818	; 0x12d2
 8006e48:	4810      	ldr	r0, [pc, #64]	; (8006e8c <lfs_fs_preporphans+0x98>)
 8006e4a:	f004 fb0b 	bl	800b464 <__assert_func>
    lfs->gstate.tag += orphans;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e56:	441a      	add	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3330      	adds	r3, #48	; 0x30
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fa fab0 	bl	80013ce <lfs_gstate_hasorphans>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8006e72:	ea44 0203 	orr.w	r2, r4, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd90      	pop	{r4, r7, pc}
 8006e84:	0800d1d4 	.word	0x0800d1d4
 8006e88:	0800dc44 	.word	0x0800dc44
 8006e8c:	0800c830 	.word	0x0800c830
 8006e90:	0800d20c 	.word	0x0800d20c

08006e94 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <lfs_fs_prepmove+0x70>)
 8006ea8:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8006eaa:	897b      	ldrh	r3, [r7, #10]
 8006eac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006eb0:	428b      	cmp	r3, r1
 8006eb2:	d006      	beq.n	8006ec2 <lfs_fs_prepmove+0x2e>
 8006eb4:	897b      	ldrh	r3, [r7, #10]
 8006eb6:	029b      	lsls	r3, r3, #10
 8006eb8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006ebc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006ec0:	e000      	b.n	8006ec4 <lfs_fs_prepmove+0x30>
 8006ec2:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8006eca:	897b      	ldrh	r3, [r7, #10]
 8006ecc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d002      	beq.n	8006eda <lfs_fs_prepmove+0x46>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	e000      	b.n	8006edc <lfs_fs_prepmove+0x48>
 8006eda:	2300      	movs	r3, #0
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8006ee0:	897b      	ldrh	r3, [r7, #10]
 8006ee2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <lfs_fs_prepmove+0x5e>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	e000      	b.n	8006ef4 <lfs_fs_prepmove+0x60>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006ef8:	bf00      	nop
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	800003ff 	.word	0x800003ff

08006f08 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b098      	sub	sp, #96	; 0x60
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3330      	adds	r3, #48	; 0x30
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fa fa8f 	bl	8001438 <lfs_gstate_needssuperblock>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f083 0301 	eor.w	r3, r3, #1
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <lfs_fs_desuperblock+0x22>
        return 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e04e      	b.n	8006fc8 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	4927      	ldr	r1, [pc, #156]	; (8006fd0 <lfs_fs_desuperblock+0xc8>)
 8006f34:	9101      	str	r1, [sp, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	f241 22eb 	movw	r2, #4843	; 0x12eb
 8006f3e:	4925      	ldr	r1, [pc, #148]	; (8006fd4 <lfs_fs_desuperblock+0xcc>)
 8006f40:	4825      	ldr	r0, [pc, #148]	; (8006fd8 <lfs_fs_desuperblock+0xd0>)
 8006f42:	f004 fd25 	bl	800b990 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f103 0220 	add.w	r2, r3, #32
 8006f4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fb ff32 	bl	8002dbc <lfs_dir_fetch>
 8006f58:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8006f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <lfs_fs_desuperblock+0x5c>
        return err;
 8006f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f62:	e031      	b.n	8006fc8 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fa fbf9 	bl	800175c <lfs_fs_disk_version>
 8006f6a:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8006f6c:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f72:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 8006f74:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 8006f8c:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 8006f8e:	f107 031c 	add.w	r3, r7, #28
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fa fb5c 	bl	8001650 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <lfs_fs_desuperblock+0xd4>)
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	f107 031c 	add.w	r3, r7, #28
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	f107 0214 	add.w	r2, r7, #20
 8006fa6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006faa:	2301      	movs	r3, #1
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fd fc9d 	bl	80048ec <lfs_dir_commit>
 8006fb2:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8006fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <lfs_fs_desuperblock+0xb6>
        return err;
 8006fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fbc:	e004      	b.n	8006fc8 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff ff03 	bl	8006dcc <lfs_fs_prepsuperblock>
    return 0;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3758      	adds	r7, #88	; 0x58
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	0800c948 	.word	0x0800c948
 8006fd4:	0800c830 	.word	0x0800c830
 8006fd8:	0800d244 	.word	0x0800d244
 8006fdc:	20100018 	.word	0x20100018

08006fe0 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8006fe0:	b5b0      	push	{r4, r5, r7, lr}
 8006fe2:	b094      	sub	sp, #80	; 0x50
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	333c      	adds	r3, #60	; 0x3c
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fa fa10 	bl	8001412 <lfs_gstate_hasmove>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	f083 0301 	eor.w	r3, r3, #1
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <lfs_fs_demove+0x22>
        return 0;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e05b      	b.n	80070ba <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700e:	4618      	mov	r0, r3
 8007010:	f7fa f96e 	bl	80012f0 <lfs_tag_id>
 8007014:	4603      	mov	r3, r0
 8007016:	461a      	mov	r2, r3
 8007018:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <lfs_fs_demove+0xe4>)
 800701a:	9302      	str	r3, [sp, #8]
 800701c:	9201      	str	r2, [sp, #4]
 800701e:	9400      	str	r4, [sp, #0]
 8007020:	462b      	mov	r3, r5
 8007022:	f241 3213 	movw	r2, #4883	; 0x1313
 8007026:	4928      	ldr	r1, [pc, #160]	; (80070c8 <lfs_fs_demove+0xe8>)
 8007028:	4828      	ldr	r0, [pc, #160]	; (80070cc <lfs_fs_demove+0xec>)
 800702a:	f004 fcb1 	bl	800b990 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	4618      	mov	r0, r3
 8007034:	f7fa f934 	bl	80012a0 <lfs_tag_type3>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8007040:	429a      	cmp	r2, r3
 8007042:	d006      	beq.n	8007052 <lfs_fs_demove+0x72>
 8007044:	4b22      	ldr	r3, [pc, #136]	; (80070d0 <lfs_fs_demove+0xf0>)
 8007046:	4a23      	ldr	r2, [pc, #140]	; (80070d4 <lfs_fs_demove+0xf4>)
 8007048:	f241 311a 	movw	r1, #4890	; 0x131a
 800704c:	481e      	ldr	r0, [pc, #120]	; (80070c8 <lfs_fs_demove+0xe8>)
 800704e:	f004 fa09 	bl	800b464 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007058:	f107 0318 	add.w	r3, r7, #24
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fb feac 	bl	8002dbc <lfs_dir_fetch>
 8007064:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8007066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <lfs_fs_demove+0x90>
        return err;
 800706c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800706e:	e024      	b.n	80070ba <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	4618      	mov	r0, r3
 8007076:	f7fa f93b 	bl	80012f0 <lfs_tag_id>
 800707a:	4603      	mov	r3, r0
 800707c:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800707e:	2200      	movs	r2, #0
 8007080:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ff05 	bl	8006e94 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800708a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800708c:	029b      	lsls	r3, r3, #10
 800708e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007092:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	f107 0210 	add.w	r2, r7, #16
 80070a0:	f107 0118 	add.w	r1, r7, #24
 80070a4:	2301      	movs	r3, #1
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fd fc20 	bl	80048ec <lfs_dir_commit>
 80070ac:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 80070ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <lfs_fs_demove+0xd8>
        return err;
 80070b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b6:	e000      	b.n	80070ba <lfs_fs_demove+0xda>
    }

    return 0;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3740      	adds	r7, #64	; 0x40
 80070be:	46bd      	mov	sp, r7
 80070c0:	bdb0      	pop	{r4, r5, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	0800c948 	.word	0x0800c948
 80070c8:	0800c830 	.word	0x0800c830
 80070cc:	0800d278 	.word	0x0800d278
 80070d0:	0800d2ac 	.word	0x0800d2ac
 80070d4:	0800dc58 	.word	0x0800dc58

080070d8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80070d8:	b5b0      	push	{r4, r5, r7, lr}
 80070da:	b0b2      	sub	sp, #200	; 0xc8
 80070dc:	af04      	add	r7, sp, #16
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3330      	adds	r3, #48	; 0x30
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fa f970 	bl	80013ce <lfs_gstate_hasorphans>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f083 0301 	eor.w	r3, r3, #1
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <lfs_fs_deorphan+0x26>
        return 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	e187      	b.n	800740e <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007104:	e170      	b.n	80073e8 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	2220      	movs	r2, #32
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f004 fd94 	bl	800bc3c <memset>
 8007114:	2301      	movs	r3, #1
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	2301      	movs	r3, #1
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800711c:	2300      	movs	r3, #0
 800711e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8007122:	e149      	b.n	80073b8 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	f103 0218 	add.w	r2, r3, #24
 800712c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fb fe42 	bl	8002dbc <lfs_dir_fetch>
 8007138:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 800713c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <lfs_fs_deorphan+0x72>
                return err;
 8007144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007148:	e161      	b.n	800740e <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800714a:	7ffb      	ldrb	r3, [r7, #31]
 800714c:	f083 0301 	eor.w	r3, r3, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8126 	beq.w	80073a4 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8007158:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800715c:	f107 0308 	add.w	r3, r7, #8
 8007160:	3318      	adds	r3, #24
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff fdaf 	bl	8006cc8 <lfs_fs_parent>
 800716a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800716e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007172:	2b00      	cmp	r3, #0
 8007174:	da07      	bge.n	8007186 <lfs_fs_deorphan+0xae>
 8007176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800717a:	f113 0f02 	cmn.w	r3, #2
 800717e:	d002      	beq.n	8007186 <lfs_fs_deorphan+0xae>
                    return tag;
 8007180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007184:	e143      	b.n	800740e <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 8007186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800718a:	2b00      	cmp	r3, #0
 800718c:	f040 80ac 	bne.w	80072e8 <lfs_fs_deorphan+0x210>
 8007190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007194:	f113 0f02 	cmn.w	r3, #2
 8007198:	f000 80a6 	beq.w	80072e8 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800719c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071a0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80071a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	4613      	mov	r3, r2
 80071ac:	4a9a      	ldr	r2, [pc, #616]	; (8007418 <lfs_fs_deorphan+0x340>)
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fa fcfe 	bl	8001bb0 <lfs_dir_get>
 80071b4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 80071b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da02      	bge.n	80071c6 <lfs_fs_deorphan+0xee>
                        return state;
 80071c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071c4:	e0eb      	b.n	800739e <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 80071c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7f9 fff7 	bl	80011be <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	f103 0218 	add.w	r2, r3, #24
 80071d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7f9 ffc1 	bl	8001166 <lfs_pair_issync>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f083 0301 	eor.w	r3, r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d07b      	beq.n	80072e8 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80071f0:	6a38      	ldr	r0, [r7, #32]
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80071f8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80071fc:	4c87      	ldr	r4, [pc, #540]	; (800741c <lfs_fs_deorphan+0x344>)
 80071fe:	9403      	str	r4, [sp, #12]
 8007200:	9102      	str	r1, [sp, #8]
 8007202:	9201      	str	r2, [sp, #4]
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	4603      	mov	r3, r0
 8007208:	f44f 529b 	mov.w	r2, #4960	; 0x1360
 800720c:	4984      	ldr	r1, [pc, #528]	; (8007420 <lfs_fs_deorphan+0x348>)
 800720e:	4885      	ldr	r0, [pc, #532]	; (8007424 <lfs_fs_deorphan+0x34c>)
 8007210:	f004 fbbe 	bl	800b990 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007214:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007218:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3330      	adds	r3, #48	; 0x30
 8007220:	f107 0208 	add.w	r2, r7, #8
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f7fa f91a 	bl	8001460 <lfs_gstate_hasmovehere>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01c      	beq.n	800726c <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	4618      	mov	r0, r3
 8007238:	f7fa f85a 	bl	80012f0 <lfs_tag_id>
 800723c:	4603      	mov	r3, r0
 800723e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 800724a:	4874      	ldr	r0, [pc, #464]	; (800741c <lfs_fs_deorphan+0x344>)
 800724c:	9002      	str	r0, [sp, #8]
 800724e:	9201      	str	r2, [sp, #4]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	460b      	mov	r3, r1
 8007254:	f241 326b 	movw	r2, #4971	; 0x136b
 8007258:	4971      	ldr	r1, [pc, #452]	; (8007420 <lfs_fs_deorphan+0x348>)
 800725a:	4873      	ldr	r0, [pc, #460]	; (8007428 <lfs_fs_deorphan+0x350>)
 800725c:	f004 fb98 	bl	800b990 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8007260:	2200      	movs	r2, #0
 8007262:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff fe14 	bl	8006e94 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800726c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007270:	4618      	mov	r0, r3
 8007272:	f7f9 ffbe 	bl	80011f2 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007276:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800727a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800727e:	4293      	cmp	r3, r2
 8007280:	d007      	beq.n	8007292 <lfs_fs_deorphan+0x1ba>
 8007282:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800728c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007290:	e000      	b.n	8007294 <lfs_fs_deorphan+0x1bc>
 8007292:	2300      	movs	r3, #0
 8007294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007298:	2300      	movs	r3, #0
 800729a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800729e:	4b63      	ldr	r3, [pc, #396]	; (800742c <lfs_fs_deorphan+0x354>)
 80072a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80072a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80072b0:	f107 0108 	add.w	r1, r7, #8
 80072b4:	2302      	movs	r3, #2
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fd f81e 	bl	80042f8 <lfs_dir_orphaningcommit>
 80072bc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 80072c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7f9 ff7a 	bl	80011be <lfs_pair_fromle32>
                        if (state < 0) {
 80072ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da02      	bge.n	80072d8 <lfs_fs_deorphan+0x200>
                            return state;
 80072d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 80072d6:	e062      	b.n	800739e <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80072d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d16b      	bne.n	80073b8 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80072e6:	e067      	b.n	80073b8 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80072e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d159      	bne.n	80073a4 <lfs_fs_deorphan+0x2cc>
 80072f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072f4:	f113 0f02 	cmn.w	r3, #2
 80072f8:	d154      	bne.n	80073a4 <lfs_fs_deorphan+0x2cc>
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d051      	beq.n	80073a4 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	4945      	ldr	r1, [pc, #276]	; (800741c <lfs_fs_deorphan+0x344>)
 8007306:	9101      	str	r1, [sp, #4]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	f241 328b 	movw	r2, #5003	; 0x138b
 8007310:	4943      	ldr	r1, [pc, #268]	; (8007420 <lfs_fs_deorphan+0x348>)
 8007312:	4847      	ldr	r0, [pc, #284]	; (8007430 <lfs_fs_deorphan+0x358>)
 8007314:	f004 fb3c 	bl	800b990 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800731e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fb fd65 	bl	8002df4 <lfs_dir_getgstate>
 800732a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800732e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <lfs_fs_deorphan+0x264>
                        return err;
 8007336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800733a:	e030      	b.n	800739e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800733c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007340:	3318      	adds	r3, #24
 8007342:	4618      	mov	r0, r3
 8007344:	f7f9 ff55 	bl	80011f2 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8007348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800734c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007350:	051a      	lsls	r2, r3, #20
 8007352:	4b38      	ldr	r3, [pc, #224]	; (8007434 <lfs_fs_deorphan+0x35c>)
 8007354:	4313      	orrs	r3, r2
 8007356:	673b      	str	r3, [r7, #112]	; 0x70
 8007358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800735c:	3318      	adds	r3, #24
 800735e:	677b      	str	r3, [r7, #116]	; 0x74
 8007360:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007364:	f107 0108 	add.w	r1, r7, #8
 8007368:	2301      	movs	r3, #1
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fc ffc4 	bl	80042f8 <lfs_dir_orphaningcommit>
 8007370:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 8007374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007378:	3318      	adds	r3, #24
 800737a:	4618      	mov	r0, r3
 800737c:	f7f9 ff1f 	bl	80011be <lfs_pair_fromle32>
                    if (state < 0) {
 8007380:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007384:	2b00      	cmp	r3, #0
 8007386:	da02      	bge.n	800738e <lfs_fs_deorphan+0x2b6>
                        return state;
 8007388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 800738c:	e03f      	b.n	800740e <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800738e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007392:	2b03      	cmp	r3, #3
 8007394:	d104      	bne.n	80073a0 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800739c:	e00c      	b.n	80073b8 <lfs_fs_deorphan+0x2e0>
                return err;
 800739e:	e036      	b.n	800740e <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 80073a0:	bf00      	nop
 80073a2:	e009      	b.n	80073b8 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 80073a4:	f107 0408 	add.w	r4, r7, #8
 80073a8:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80073ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80073b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 80073b8:	f107 0308 	add.w	r3, r7, #8
 80073bc:	3318      	adds	r3, #24
 80073be:	4618      	mov	r0, r3
 80073c0:	f7f9 fe8e 	bl	80010e0 <lfs_pair_isnull>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f083 0301 	eor.w	r3, r3, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f47f aea9 	bne.w	8007124 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80073d2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <lfs_fs_deorphan+0x306>
 80073da:	2300      	movs	r3, #0
 80073dc:	e002      	b.n	80073e4 <lfs_fs_deorphan+0x30c>
 80073de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073e2:	3301      	adds	r3, #1
 80073e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 80073e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	f77f ae8a 	ble.w	8007106 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3330      	adds	r3, #48	; 0x30
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7f9 fffc 	bl	80013f4 <lfs_gstate_getorphans>
 80073fc:	4603      	mov	r3, r0
 80073fe:	425b      	negs	r3, r3
 8007400:	b2db      	uxtb	r3, r3
 8007402:	b25b      	sxtb	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fcf4 	bl	8006df4 <lfs_fs_preporphans>
 800740c:	4603      	mov	r3, r0
}
 800740e:	4618      	mov	r0, r3
 8007410:	37b8      	adds	r7, #184	; 0xb8
 8007412:	46bd      	mov	sp, r7
 8007414:	bdb0      	pop	{r4, r5, r7, pc}
 8007416:	bf00      	nop
 8007418:	7ffffc00 	.word	0x7ffffc00
 800741c:	0800c948 	.word	0x0800c948
 8007420:	0800c830 	.word	0x0800c830
 8007424:	0800d2e0 	.word	0x0800d2e0
 8007428:	0800d324 	.word	0x0800d324
 800742c:	600ffc08 	.word	0x600ffc08
 8007430:	0800d36c 	.word	0x0800d36c
 8007434:	000ffc08 	.word	0x000ffc08

08007438 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fd61 	bl	8006f08 <lfs_fs_desuperblock>
 8007446:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <lfs_fs_forceconsistency+0x1a>
        return err;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	e013      	b.n	800747a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff fdc4 	bl	8006fe0 <lfs_fs_demove>
 8007458:	60f8      	str	r0, [r7, #12]
    if (err) {
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <lfs_fs_forceconsistency+0x2c>
        return err;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	e00a      	b.n	800747a <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 8007464:	2101      	movs	r1, #1
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fe36 	bl	80070d8 <lfs_fs_deorphan>
 800746c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <lfs_fs_forceconsistency+0x40>
        return err;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	e000      	b.n	800747a <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8007482:	b480      	push	{r7}
 8007484:	b085      	sub	sp, #20
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	601a      	str	r2, [r3, #0]
    return 0;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr
	...

080074a8 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 80074b4:	f107 0208 	add.w	r2, r7, #8
 80074b8:	2300      	movs	r3, #0
 80074ba:	4907      	ldr	r1, [pc, #28]	; (80074d8 <lfs_fs_size_+0x30>)
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff fa01 	bl	80068c4 <lfs_fs_traverse_>
 80074c2:	60f8      	str	r0, [r7, #12]
    if (err) {
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <lfs_fs_size_+0x26>
        return err;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	e000      	b.n	80074d0 <lfs_fs_size_+0x28>
    }

    return size;
 80074ce:	68bb      	ldr	r3, [r7, #8]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	08007483 	.word	0x08007483

080074dc <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <lfs_format+0x18>
        return err;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	e005      	b.n	8007500 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fe ff0e 	bl	8006318 <lfs_format_>
 80074fc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 80074fe:	68fb      	ldr	r3, [r7, #12]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <lfs_mount+0x18>
        return err;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	e005      	b.n	800752c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fe ffaa 	bl	800647c <lfs_mount_>
 8007528:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800752a:	68fb      	ldr	r3, [r7, #12]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
    if (err) {
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <lfs_file_open+0x1c>
        return err;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	e01a      	b.n	8007586 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f7fa f8b2 	bl	80016c0 <lfs_mlist_isopen>
 800755c:	4603      	mov	r3, r0
 800755e:	f083 0301 	eor.w	r3, r3, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <lfs_file_open+0x42>
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <lfs_file_open+0x5c>)
 800756a:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <lfs_file_open+0x60>)
 800756c:	f241 719c 	movw	r1, #6044	; 0x179c
 8007570:	4809      	ldr	r0, [pc, #36]	; (8007598 <lfs_file_open+0x64>)
 8007572:	f003 ff77 	bl	800b464 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7fd ff13 	bl	80053a8 <lfs_file_open_>
 8007582:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007584:	697b      	ldr	r3, [r7, #20]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	0800d3bc 	.word	0x0800d3bc
 8007594:	0800dc68 	.word	0x0800dc68
 8007598:	0800c830 	.word	0x0800c830

0800759c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
    if (err) {
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <lfs_file_close+0x18>
        return err;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	e015      	b.n	80075e0 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa f880 	bl	80016c0 <lfs_mlist_isopen>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <lfs_file_close+0x38>
 80075c6:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <lfs_file_close+0x4c>)
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <lfs_file_close+0x50>)
 80075ca:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
 80075ce:	4808      	ldr	r0, [pc, #32]	; (80075f0 <lfs_file_close+0x54>)
 80075d0:	f003 ff48 	bl	800b464 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fd fefe 	bl	80053d8 <lfs_file_close_>
 80075dc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80075de:	68fb      	ldr	r3, [r7, #12]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	0800d3f4 	.word	0x0800d3f4
 80075ec:	0800dc78 	.word	0x0800dc78
 80075f0:	0800c830 	.word	0x0800c830

080075f4 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
    if (err) {
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <lfs_file_read+0x1c>
        return err;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	e017      	b.n	8007640 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	68b9      	ldr	r1, [r7, #8]
 8007616:	4618      	mov	r0, r3
 8007618:	f7fa f852 	bl	80016c0 <lfs_mlist_isopen>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <lfs_file_read+0x3c>
 8007622:	4b09      	ldr	r3, [pc, #36]	; (8007648 <lfs_file_read+0x54>)
 8007624:	4a09      	ldr	r2, [pc, #36]	; (800764c <lfs_file_read+0x58>)
 8007626:	f241 71e2 	movw	r1, #6114	; 0x17e2
 800762a:	4809      	ldr	r0, [pc, #36]	; (8007650 <lfs_file_read+0x5c>)
 800762c:	f003 ff1a 	bl	800b464 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7fe fa1a 	bl	8005a70 <lfs_file_read_>
 800763c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800763e:	693b      	ldr	r3, [r7, #16]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	0800d3f4 	.word	0x0800d3f4
 800764c:	0800dc88 	.word	0x0800dc88
 8007650:	0800c830 	.word	0x0800c830

08007654 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
    if (err) {
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <lfs_file_write+0x1c>
        return err;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	e017      	b.n	80076a0 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	68b9      	ldr	r1, [r7, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f7fa f822 	bl	80016c0 <lfs_mlist_isopen>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <lfs_file_write+0x3c>
 8007682:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <lfs_file_write+0x54>)
 8007684:	4a09      	ldr	r2, [pc, #36]	; (80076ac <lfs_file_write+0x58>)
 8007686:	f241 71f4 	movw	r1, #6132	; 0x17f4
 800768a:	4809      	ldr	r0, [pc, #36]	; (80076b0 <lfs_file_write+0x5c>)
 800768c:	f003 feea 	bl	800b464 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7fe fb30 	bl	8005cfc <lfs_file_write_>
 800769c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800769e:	693b      	ldr	r3, [r7, #16]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	0800d3f4 	.word	0x0800d3f4
 80076ac:	0800dc98 	.word	0x0800dc98
 80076b0:	0800c830 	.word	0x0800c830

080076b4 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <lfs_mkdir+0x18>
        return err;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	e005      	b.n	80076d8 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fd f932 	bl	8004938 <lfs_mkdir_>
 80076d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80076d6:	68fb      	ldr	r3, [r7, #12]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	e024      	b.n	8007740 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	091a      	lsrs	r2, r3, #4
 80076fa:	6939      	ldr	r1, [r7, #16]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	440b      	add	r3, r1
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	404b      	eors	r3, r1
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	4911      	ldr	r1, [pc, #68]	; (8007754 <lfs_crc+0x74>)
 800770e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007712:	4053      	eors	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	091a      	lsrs	r2, r3, #4
 800771a:	6939      	ldr	r1, [r7, #16]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	440b      	add	r3, r1
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	091b      	lsrs	r3, r3, #4
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	404b      	eors	r3, r1
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	4908      	ldr	r1, [pc, #32]	; (8007754 <lfs_crc+0x74>)
 8007732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007736:	4053      	eors	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	3301      	adds	r3, #1
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d3d6      	bcc.n	80076f6 <lfs_crc+0x16>
    }

    return crc;
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr
 8007754:	0800dca8 	.word	0x0800dca8

08007758 <lfs_read>:




int lfs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
	if(SPIF_ReadAddress(&spif_handle, 4096*block+off, buffer, size) !=  true) return -1;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	031a      	lsls	r2, r3, #12
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	18d1      	adds	r1, r2, r3
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	4808      	ldr	r0, [pc, #32]	; (8007794 <lfs_read+0x3c>)
 8007774:	f001 ffec 	bl	8009750 <SPIF_ReadAddress>
 8007778:	4603      	mov	r3, r0
 800777a:	f083 0301 	eor.w	r3, r3, #1
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <lfs_read+0x32>
 8007784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007788:	e000      	b.n	800778c <lfs_read+0x34>
	return 0;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000004 	.word	0x20000004

08007798 <lfs_write>:

int lfs_write(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
	SPIF_WriteAddress(&spif_handle, 4096*block+off, (void *)buffer, size);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	031a      	lsls	r2, r3, #12
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	18d1      	adds	r1, r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	4804      	ldr	r0, [pc, #16]	; (80077c4 <lfs_write+0x2c>)
 80077b4:	f001 ff75 	bl	80096a2 <SPIF_WriteAddress>
	return 0;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000004 	.word	0x20000004

080077c8 <lfs_erase>:

int lfs_erase(const struct lfs_config *c, lfs_block_t block)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	SPIF_EraseSector(&spif_handle, block);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	4803      	ldr	r0, [pc, #12]	; (80077e4 <lfs_erase+0x1c>)
 80077d6:	f001 fee1 	bl	800959c <SPIF_EraseSector>
	return 0;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000004 	.word	0x20000004

080077e8 <lfs_sync>:

int lfs_sync(const struct lfs_config *c)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
	return 0;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <init_storage>:




Storage_error_t init_storage(SPI_HandleTypeDef *spi_handle ,GPIO_TypeDef *gpio_handle, uint16_t pin)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b0bd      	sub	sp, #244	; 0xf4
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	4613      	mov	r3, r2
 8007808:	80fb      	strh	r3, [r7, #6]
	Storage_error_t err = STORAGE_OK ; 				  Info_firmware_t firmware ;
 800780a:	2300      	movs	r3, #0
 800780c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	is_initialized = 0 ;
 8007810:	4b91      	ldr	r3, [pc, #580]	; (8007a58 <init_storage+0x25c>)
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
	if(SPIF_Init(&spif_handle, spi_handle, gpio_handle, pin) == true )
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	68f9      	ldr	r1, [r7, #12]
 800781c:	488f      	ldr	r0, [pc, #572]	; (8007a5c <init_storage+0x260>)
 800781e:	f001 fe6b 	bl	80094f8 <SPIF_Init>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 810d 	beq.w	8007a44 <init_storage+0x248>
	{
		  if(mount() < 0)
 800782a:	f000 f95d 	bl	8007ae8 <mount>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	da03      	bge.n	800783c <init_storage+0x40>
		  {
#ifdef DEBUG
			  printf("::init_storage : lfs mount fail \n"); while(1);
 8007834:	488a      	ldr	r0, [pc, #552]	; (8007a60 <init_storage+0x264>)
 8007836:	f004 f911 	bl	800ba5c <puts>
 800783a:	e7fe      	b.n	800783a <init_storage+0x3e>
			  err = STORAGE_MOUNT_FAIL ;
		  }
		  else
		  {
#ifdef DEBUG
			  printf("::init_storage : lfs mount ok \n");   printf("::init_storage : lfs mount ok \n");
 800783c:	4889      	ldr	r0, [pc, #548]	; (8007a64 <init_storage+0x268>)
 800783e:	f004 f90d 	bl	800ba5c <puts>
 8007842:	4888      	ldr	r0, [pc, #544]	; (8007a64 <init_storage+0x268>)
 8007844:	f004 f90a 	bl	800ba5c <puts>
#endif
			  if(get_store_info() != 1 )
 8007848:	f000 f972 	bl	8007b30 <get_store_info>
 800784c:	4603      	mov	r3, r0
 800784e:	2b01      	cmp	r3, #1
 8007850:	d04d      	beq.n	80078ee <init_storage+0xf2>
			  {
  				  _info_storage.folder_max_count = FOLDER_MAX_COUNT ;
 8007852:	4b85      	ldr	r3, [pc, #532]	; (8007a68 <init_storage+0x26c>)
 8007854:	220c      	movs	r2, #12
 8007856:	801a      	strh	r2, [r3, #0]
  				  _info_storage.file_max_count = FILE_MAX_COUNT ;
 8007858:	4b83      	ldr	r3, [pc, #524]	; (8007a68 <init_storage+0x26c>)
 800785a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800785e:	805a      	strh	r2, [r3, #2]
  				  _info_storage.w_file_seek = FILE_SEEK_START;
 8007860:	4b81      	ldr	r3, [pc, #516]	; (8007a68 <init_storage+0x26c>)
 8007862:	2200      	movs	r2, #0
 8007864:	815a      	strh	r2, [r3, #10]
  				  _info_storage.w_folder_seek = FOLDER_SEEK_START;
 8007866:	4b80      	ldr	r3, [pc, #512]	; (8007a68 <init_storage+0x26c>)
 8007868:	2201      	movs	r2, #1
 800786a:	80da      	strh	r2, [r3, #6]
  				  _info_storage.r_file_seek = FILE_SEEK_START;
 800786c:	4b7e      	ldr	r3, [pc, #504]	; (8007a68 <init_storage+0x26c>)
 800786e:	2200      	movs	r2, #0
 8007870:	811a      	strh	r2, [r3, #8]
  				  _info_storage.r_folder_seek = FOLDER_SEEK_START ;
 8007872:	4b7d      	ldr	r3, [pc, #500]	; (8007a68 <init_storage+0x26c>)
 8007874:	2201      	movs	r2, #1
 8007876:	809a      	strh	r2, [r3, #4]
  				  if(set_store_info() == 1)
 8007878:	f000 fae4 	bl	8007e44 <set_store_info>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d132      	bne.n	80078e8 <init_storage+0xec>
  				  {
  					  for(int bcnt=1; bcnt<=12; bcnt++)
 8007882:	2301      	movs	r3, #1
 8007884:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007888:	e029      	b.n	80078de <init_storage+0xe2>
  					  {
  						  char b[3] ; memset(b, 0, 3);
 800788a:	f107 0310 	add.w	r3, r7, #16
 800788e:	2203      	movs	r2, #3
 8007890:	2100      	movs	r1, #0
 8007892:	4618      	mov	r0, r3
 8007894:	f004 f9d2 	bl	800bc3c <memset>
  						  itoa(bcnt, b, 10);
 8007898:	f107 0310 	add.w	r3, r7, #16
 800789c:	220a      	movs	r2, #10
 800789e:	4619      	mov	r1, r3
 80078a0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80078a4:	f003 fe18 	bl	800b4d8 <itoa>
  						  if(lfs_mkdir(&littlefs, b) < 0 )
 80078a8:	f107 0310 	add.w	r3, r7, #16
 80078ac:	4619      	mov	r1, r3
 80078ae:	486f      	ldr	r0, [pc, #444]	; (8007a6c <init_storage+0x270>)
 80078b0:	f7ff ff00 	bl	80076b4 <lfs_mkdir>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da06      	bge.n	80078c8 <init_storage+0xcc>
  						  {
#ifdef DEBUG
  							  printf("fail to create storage dir %s\n", b);  while(1);
 80078ba:	f107 0310 	add.w	r3, r7, #16
 80078be:	4619      	mov	r1, r3
 80078c0:	486b      	ldr	r0, [pc, #428]	; (8007a70 <init_storage+0x274>)
 80078c2:	f004 f865 	bl	800b990 <iprintf>
 80078c6:	e7fe      	b.n	80078c6 <init_storage+0xca>
#endif
  							  err =  STORAGE_DIR_FAIL ;
  							  break;
  						  }
#ifdef DEBUG
  						  printf("create storage dir %s\n", b);
 80078c8:	f107 0310 	add.w	r3, r7, #16
 80078cc:	4619      	mov	r1, r3
 80078ce:	4869      	ldr	r0, [pc, #420]	; (8007a74 <init_storage+0x278>)
 80078d0:	f004 f85e 	bl	800b990 <iprintf>
  					  for(int bcnt=1; bcnt<=12; bcnt++)
 80078d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078d8:	3301      	adds	r3, #1
 80078da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80078de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078e2:	2b0c      	cmp	r3, #12
 80078e4:	ddd1      	ble.n	800788a <init_storage+0x8e>
 80078e6:	e002      	b.n	80078ee <init_storage+0xf2>
#endif
  					  }
  				  }
  				  else
  				  {
  					  err = STORAGE_ERROR;;
 80078e8:	23ff      	movs	r3, #255	; 0xff
 80078ea:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  				  }
			  }
			  if(err == STORAGE_OK)
 80078ee:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d155      	bne.n	80079a2 <init_storage+0x1a6>
			  {
				  if(get_firmware_info(&firmware) != 1 )
 80078f6:	f107 0314 	add.w	r3, r7, #20
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fdf6 	bl	80084ec <get_firmware_info>
 8007900:	4603      	mov	r3, r0
 8007902:	2b01      	cmp	r3, #1
 8007904:	d04d      	beq.n	80079a2 <init_storage+0x1a6>
				  {
					  if(lfs_mkdir(&littlefs,FIRMWARE_DIR_NAME) < 0 )
 8007906:	495c      	ldr	r1, [pc, #368]	; (8007a78 <init_storage+0x27c>)
 8007908:	4858      	ldr	r0, [pc, #352]	; (8007a6c <init_storage+0x270>)
 800790a:	f7ff fed3 	bl	80076b4 <lfs_mkdir>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	da03      	bge.n	800791c <init_storage+0x120>
					  {
#ifdef DEBUG
							  printf("fail to create firmware dir \n");  while(1);
 8007914:	4859      	ldr	r0, [pc, #356]	; (8007a7c <init_storage+0x280>)
 8007916:	f004 f8a1 	bl	800ba5c <puts>
 800791a:	e7fe      	b.n	800791a <init_storage+0x11e>
#endif
							  err = STORAGE_DIR_FAIL;
					  }
					  else
					  {
						  firmware.checksum = 210;
 800791c:	23d2      	movs	r3, #210	; 0xd2
 800791e:	61bb      	str	r3, [r7, #24]
						  firmware.size = 0 ;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
						  memset(firmware.remote_firmware_url, 0,  sizeof(firmware.remote_firmware_url));
 8007924:	f107 0314 	add.w	r3, r7, #20
 8007928:	3318      	adds	r3, #24
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	2100      	movs	r1, #0
 800792e:	4618      	mov	r0, r3
 8007930:	f004 f984 	bl	800bc3c <memset>
						  memset(firmware.local_firmwre_dir, 0, sizeof(firmware.local_firmwre_dir));
 8007934:	f107 0314 	add.w	r3, r7, #20
 8007938:	3398      	adds	r3, #152	; 0x98
 800793a:	2230      	movs	r2, #48	; 0x30
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f004 f97c 	bl	800bc3c <memset>
						  memset(firmware.version, 0 ,sizeof(firmware.version));
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	3308      	adds	r3, #8
 800794a:	2210      	movs	r2, #16
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f004 f974 	bl	800bc3c <memset>
						  strcpy((char *)firmware.remote_firmware_url, (char*)FIRMWARE_REMOTE_URL);
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	3318      	adds	r3, #24
 800795a:	4a49      	ldr	r2, [pc, #292]	; (8007a80 <init_storage+0x284>)
 800795c:	461c      	mov	r4, r3
 800795e:	4613      	mov	r3, r2
 8007960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007962:	c407      	stmia	r4!, {r0, r1, r2}
 8007964:	8023      	strh	r3, [r4, #0]
 8007966:	3402      	adds	r4, #2
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	7023      	strb	r3, [r4, #0]
						  strcpy((char*)firmware.local_firmwre_dir, (char*)FIRMWARE_DIR_NAME);
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	3398      	adds	r3, #152	; 0x98
 8007972:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <init_storage+0x27c>)
 8007974:	461c      	mov	r4, r3
 8007976:	4613      	mov	r3, r2
 8007978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800797a:	c407      	stmia	r4!, {r0, r1, r2}
 800797c:	7023      	strb	r3, [r4, #0]
						  strcpy((char*)firmware.version, (char*)FIRMWARE_VERSION) ;
 800797e:	f107 0314 	add.w	r3, r7, #20
 8007982:	3308      	adds	r3, #8
 8007984:	4a3f      	ldr	r2, [pc, #252]	; (8007a84 <init_storage+0x288>)
 8007986:	ca07      	ldmia	r2, {r0, r1, r2}
 8007988:	c303      	stmia	r3!, {r0, r1}
 800798a:	701a      	strb	r2, [r3, #0]

		  				  if(set_firmware_info(&firmware) != 1)
 800798c:	f107 0314 	add.w	r3, r7, #20
 8007990:	4618      	mov	r0, r3
 8007992:	f000 ff8f 	bl	80088b4 <set_firmware_info>
 8007996:	4603      	mov	r3, r0
 8007998:	2b01      	cmp	r3, #1
 800799a:	d002      	beq.n	80079a2 <init_storage+0x1a6>
		  				  {
		  					  err = STORAGE_ERROR;
 800799c:	23ff      	movs	r3, #255	; 0xff
 800799e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		  				  }
					  }
				  }
			  }
		  }
		  if(err == STORAGE_OK)
 80079a2:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d150      	bne.n	8007a4c <init_storage+0x250>
		  {

#ifdef DEBUG
			  printf("storage folder_max_count : %d\n ", _info_storage.folder_max_count);
 80079aa:	4b2f      	ldr	r3, [pc, #188]	; (8007a68 <init_storage+0x26c>)
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	4835      	ldr	r0, [pc, #212]	; (8007a88 <init_storage+0x28c>)
 80079b2:	f003 ffed 	bl	800b990 <iprintf>
			  printf("storage file_max_count : %d\n ", _info_storage.file_max_count);
 80079b6:	4b2c      	ldr	r3, [pc, #176]	; (8007a68 <init_storage+0x26c>)
 80079b8:	885b      	ldrh	r3, [r3, #2]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4833      	ldr	r0, [pc, #204]	; (8007a8c <init_storage+0x290>)
 80079be:	f003 ffe7 	bl	800b990 <iprintf>
			  printf("storage r_folder_seek : %d\n ", _info_storage.r_folder_seek);
 80079c2:	4b29      	ldr	r3, [pc, #164]	; (8007a68 <init_storage+0x26c>)
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	4619      	mov	r1, r3
 80079c8:	4831      	ldr	r0, [pc, #196]	; (8007a90 <init_storage+0x294>)
 80079ca:	f003 ffe1 	bl	800b990 <iprintf>
			  printf("storage w_folder_seek : %d\n ", _info_storage.w_folder_seek);
 80079ce:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <init_storage+0x26c>)
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	4619      	mov	r1, r3
 80079d4:	482f      	ldr	r0, [pc, #188]	; (8007a94 <init_storage+0x298>)
 80079d6:	f003 ffdb 	bl	800b990 <iprintf>
			  printf("storage r_file_seek : %d\n ", _info_storage.r_file_seek);
 80079da:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <init_storage+0x26c>)
 80079dc:	891b      	ldrh	r3, [r3, #8]
 80079de:	4619      	mov	r1, r3
 80079e0:	482d      	ldr	r0, [pc, #180]	; (8007a98 <init_storage+0x29c>)
 80079e2:	f003 ffd5 	bl	800b990 <iprintf>
			  printf("storage w_file_seek : %d\n ", _info_storage.w_file_seek);
 80079e6:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <init_storage+0x26c>)
 80079e8:	895b      	ldrh	r3, [r3, #10]
 80079ea:	4619      	mov	r1, r3
 80079ec:	482b      	ldr	r0, [pc, #172]	; (8007a9c <init_storage+0x2a0>)
 80079ee:	f003 ffcf 	bl	800b990 <iprintf>

			  printf("firmware version : %s\n ", firmware.version);
 80079f2:	f107 0314 	add.w	r3, r7, #20
 80079f6:	3308      	adds	r3, #8
 80079f8:	4619      	mov	r1, r3
 80079fa:	4829      	ldr	r0, [pc, #164]	; (8007aa0 <init_storage+0x2a4>)
 80079fc:	f003 ffc8 	bl	800b990 <iprintf>
			  printf("firmware size : %lu \n ", firmware.size);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	4619      	mov	r1, r3
 8007a04:	4827      	ldr	r0, [pc, #156]	; (8007aa4 <init_storage+0x2a8>)
 8007a06:	f003 ffc3 	bl	800b990 <iprintf>
			  printf("firmware checksum : %lu \n ", firmware.checksum);
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4826      	ldr	r0, [pc, #152]	; (8007aa8 <init_storage+0x2ac>)
 8007a10:	f003 ffbe 	bl	800b990 <iprintf>
			  printf("firmware remote_firmware_url : %s\n ", firmware.remote_firmware_url);
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	3318      	adds	r3, #24
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4823      	ldr	r0, [pc, #140]	; (8007aac <init_storage+0x2b0>)
 8007a1e:	f003 ffb7 	bl	800b990 <iprintf>
			  printf("firmware local_firmwre_dir : %s\n ", firmware.local_firmwre_dir);
 8007a22:	f107 0314 	add.w	r3, r7, #20
 8007a26:	3398      	adds	r3, #152	; 0x98
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4821      	ldr	r0, [pc, #132]	; (8007ab0 <init_storage+0x2b4>)
 8007a2c:	f003 ffb0 	bl	800b990 <iprintf>
#endif
			 _storage.push = save_data ;
 8007a30:	4b20      	ldr	r3, [pc, #128]	; (8007ab4 <init_storage+0x2b8>)
 8007a32:	4a21      	ldr	r2, [pc, #132]	; (8007ab8 <init_storage+0x2bc>)
 8007a34:	601a      	str	r2, [r3, #0]
			 _storage.pop = read_data ;
 8007a36:	4b1f      	ldr	r3, [pc, #124]	; (8007ab4 <init_storage+0x2b8>)
 8007a38:	4a20      	ldr	r2, [pc, #128]	; (8007abc <init_storage+0x2c0>)
 8007a3a:	605a      	str	r2, [r3, #4]

			 is_initialized = 1 ;
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <init_storage+0x25c>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e003      	b.n	8007a4c <init_storage+0x250>
		  }
	}
	else
	{
#ifdef DEBUG
		  printf("Flash chip  error ... \n");	while(1);
 8007a44:	481e      	ldr	r0, [pc, #120]	; (8007ac0 <init_storage+0x2c4>)
 8007a46:	f004 f809 	bl	800ba5c <puts>
 8007a4a:	e7fe      	b.n	8007a4a <init_storage+0x24e>
#endif
		  err = STORAGE_FLASH_ERROR ;
	}
	return err ;
 8007a4c:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	37f4      	adds	r7, #244	; 0xf4
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd90      	pop	{r4, r7, pc}
 8007a58:	20000230 	.word	0x20000230
 8007a5c:	20000004 	.word	0x20000004
 8007a60:	0800d464 	.word	0x0800d464
 8007a64:	0800d488 	.word	0x0800d488
 8007a68:	20000224 	.word	0x20000224
 8007a6c:	2000019c 	.word	0x2000019c
 8007a70:	0800d4a8 	.word	0x0800d4a8
 8007a74:	0800d4c8 	.word	0x0800d4c8
 8007a78:	0800d4e0 	.word	0x0800d4e0
 8007a7c:	0800d4f0 	.word	0x0800d4f0
 8007a80:	0800d510 	.word	0x0800d510
 8007a84:	0800d520 	.word	0x0800d520
 8007a88:	0800d52c 	.word	0x0800d52c
 8007a8c:	0800d54c 	.word	0x0800d54c
 8007a90:	0800d56c 	.word	0x0800d56c
 8007a94:	0800d58c 	.word	0x0800d58c
 8007a98:	0800d5ac 	.word	0x0800d5ac
 8007a9c:	0800d5c8 	.word	0x0800d5c8
 8007aa0:	0800d5e4 	.word	0x0800d5e4
 8007aa4:	0800d5fc 	.word	0x0800d5fc
 8007aa8:	0800d614 	.word	0x0800d614
 8007aac:	0800d630 	.word	0x0800d630
 8007ab0:	0800d654 	.word	0x0800d654
 8007ab4:	2000021c 	.word	0x2000021c
 8007ab8:	080080e9 	.word	0x080080e9
 8007abc:	080082f9 	.word	0x080082f9
 8007ac0:	0800d678 	.word	0x0800d678

08007ac4 <get_storage_instance>:
Storage_t* get_storage_instance()
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
	return ((is_initialized == 1) ? &_storage : NULL) ;
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <get_storage_instance+0x1c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <get_storage_instance+0x10>
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <get_storage_instance+0x20>)
 8007ad2:	e000      	b.n	8007ad6 <get_storage_instance+0x12>
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	20000230 	.word	0x20000230
 8007ae4:	2000021c 	.word	0x2000021c

08007ae8 <mount>:

static int mount() {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
	int err = 0 ;
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
 //   lfs_format(&littlefs, &littlefs_config);
	err = lfs_mount(&littlefs, &littlefs_config);
 8007af2:	490c      	ldr	r1, [pc, #48]	; (8007b24 <mount+0x3c>)
 8007af4:	480c      	ldr	r0, [pc, #48]	; (8007b28 <mount+0x40>)
 8007af6:	f7ff fd07 	bl	8007508 <lfs_mount>
 8007afa:	6078      	str	r0, [r7, #4]
	if(err < 0)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da0b      	bge.n	8007b1a <mount+0x32>
	{
#ifdef DEBUG
		printf("mount:lfs mount fail ... formating ..\n");
 8007b02:	480a      	ldr	r0, [pc, #40]	; (8007b2c <mount+0x44>)
 8007b04:	f003 ffaa 	bl	800ba5c <puts>
#endif
        lfs_format(&littlefs, &littlefs_config);
 8007b08:	4906      	ldr	r1, [pc, #24]	; (8007b24 <mount+0x3c>)
 8007b0a:	4807      	ldr	r0, [pc, #28]	; (8007b28 <mount+0x40>)
 8007b0c:	f7ff fce6 	bl	80074dc <lfs_format>
        err = lfs_mount(&littlefs, &littlefs_config);
 8007b10:	4904      	ldr	r1, [pc, #16]	; (8007b24 <mount+0x3c>)
 8007b12:	4805      	ldr	r0, [pc, #20]	; (8007b28 <mount+0x40>)
 8007b14:	f7ff fcf8 	bl	8007508 <lfs_mount>
 8007b18:	6078      	str	r0, [r7, #4]
	}
    return err;
 8007b1a:	687b      	ldr	r3, [r7, #4]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000024 	.word	0x20000024
 8007b28:	2000019c 	.word	0x2000019c
 8007b2c:	0800d690 	.word	0x0800d690

08007b30 <get_store_info>:
}



static int get_store_info()
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b0f4      	sub	sp, #464	; 0x1d0
 8007b34:	af00      	add	r7, sp, #0
	int success = 0 ;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	int index = 0 , got_key = 0, got_value=0 , key_index =0 , value_index = 0 ;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007b42:	2300      	movs	r3, #0
 8007b44:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007b54:	2300      	movs	r3, #0
 8007b56:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	uint8_t lfs_read_buffer[STORAGE_INFO_FILE_SIZE];
	lfs_file_t info_file;

	char key_buff[48], value_buff[48];

	memset(lfs_read_buffer, 0, STORAGE_INFO_FILE_SIZE);
 8007b5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b62:	2100      	movs	r1, #0
 8007b64:	4618      	mov	r0, r3
 8007b66:	f004 f869 	bl	800bc3c <memset>

	if( lfs_file_open(&littlefs, &info_file, STORAGE_INFO_FILE_NAME, LFS_O_RDWR ) < 0 )
 8007b6a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8007b6e:	2303      	movs	r3, #3
 8007b70:	4aac      	ldr	r2, [pc, #688]	; (8007e24 <get_store_info+0x2f4>)
 8007b72:	48ad      	ldr	r0, [pc, #692]	; (8007e28 <get_store_info+0x2f8>)
 8007b74:	f7ff fcde 	bl	8007534 <lfs_file_open>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	da04      	bge.n	8007b88 <get_store_info+0x58>
	{
#ifdef DEBUG
			printf("get_store_info -> fail to open %s from save_info \n", STORAGE_INFO_FILE_NAME);
 8007b7e:	49a9      	ldr	r1, [pc, #676]	; (8007e24 <get_store_info+0x2f4>)
 8007b80:	48aa      	ldr	r0, [pc, #680]	; (8007e2c <get_store_info+0x2fc>)
 8007b82:	f003 ff05 	bl	800b990 <iprintf>
 8007b86:	e145      	b.n	8007e14 <get_store_info+0x2e4>
#endif
	}
	else
	{
		  if( lfs_file_read(&littlefs, &info_file, lfs_read_buffer, STORAGE_INFO_FILE_SIZE) < 0 )
 8007b88:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8007b8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8007b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b94:	48a4      	ldr	r0, [pc, #656]	; (8007e28 <get_store_info+0x2f8>)
 8007b96:	f7ff fd2d 	bl	80075f4 <lfs_file_read>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da04      	bge.n	8007baa <get_store_info+0x7a>
		  {
#ifdef DEBUG
			  printf("get_store_info -> fail to read %s from save_info \n", STORAGE_INFO_FILE_NAME); while(1);
 8007ba0:	49a0      	ldr	r1, [pc, #640]	; (8007e24 <get_store_info+0x2f4>)
 8007ba2:	48a3      	ldr	r0, [pc, #652]	; (8007e30 <get_store_info+0x300>)
 8007ba4:	f003 fef4 	bl	800b990 <iprintf>
 8007ba8:	e7fe      	b.n	8007ba8 <get_store_info+0x78>
#endif
		  }
		  else
		  {
#ifdef DEBUG
			  printf("get_store_info ->  %s  :::  %s \n", STORAGE_INFO_FILE_NAME, lfs_read_buffer);
 8007baa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007bae:	461a      	mov	r2, r3
 8007bb0:	499c      	ldr	r1, [pc, #624]	; (8007e24 <get_store_info+0x2f4>)
 8007bb2:	48a0      	ldr	r0, [pc, #640]	; (8007e34 <get_store_info+0x304>)
 8007bb4:	f003 feec 	bl	800b990 <iprintf>
#endif
		      while(lfs_read_buffer[index])
 8007bb8:	e119      	b.n	8007dee <get_store_info+0x2be>
		      {
	        	  if(lfs_read_buffer[index] == '\"')
 8007bba:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007bbe:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007bc2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007bc6:	4413      	add	r3, r2
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b22      	cmp	r3, #34	; 0x22
 8007bcc:	f000 810a 	beq.w	8007de4 <get_store_info+0x2b4>
	        	  {

	        	  }
	        	  else  if(lfs_read_buffer[index] == '{' || lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 8007bd0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007bd4:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007bd8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007bdc:	4413      	add	r3, r2
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b7b      	cmp	r3, #123	; 0x7b
 8007be2:	d014      	beq.n	8007c0e <get_store_info+0xde>
 8007be4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007be8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007bec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007bf0:	4413      	add	r3, r2
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b2c      	cmp	r3, #44	; 0x2c
 8007bf6:	d00a      	beq.n	8007c0e <get_store_info+0xde>
 8007bf8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007bfc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007c00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c04:	4413      	add	r3, r2
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b7d      	cmp	r3, #125	; 0x7d
 8007c0a:	f040 80ad 	bne.w	8007d68 <get_store_info+0x238>
		          {
			          if(lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 8007c0e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007c12:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007c16:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c1a:	4413      	add	r3, r2
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b2c      	cmp	r3, #44	; 0x2c
 8007c20:	d009      	beq.n	8007c36 <get_store_info+0x106>
 8007c22:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007c26:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007c2a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c2e:	4413      	add	r3, r2
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b7d      	cmp	r3, #125	; 0x7d
 8007c34:	d174      	bne.n	8007d20 <get_store_info+0x1f0>
			          {
#ifdef DEBUG
			        	  printf("get_store_info ->  key:%s   value:%s\n", key_buff, value_buff);
 8007c36:	463a      	mov	r2, r7
 8007c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	487e      	ldr	r0, [pc, #504]	; (8007e38 <get_store_info+0x308>)
 8007c40:	f003 fea6 	bl	800b990 <iprintf>
#endif
			        	  for(int i=0; i<INFO_STORAGE_KEY_SIZE; i++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007c4a:	e065      	b.n	8007d18 <get_store_info+0x1e8>
			        	  {
				              if(memcmp(key_buff, info_storage_keys[i], key_index) == 0)
 8007c4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4a78      	ldr	r2, [pc, #480]	; (8007e3c <get_store_info+0x30c>)
 8007c5a:	1899      	adds	r1, r3, r2
 8007c5c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c64:	4618      	mov	r0, r3
 8007c66:	f003 ffd9 	bl	800bc1c <memcmp>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d14e      	bne.n	8007d0e <get_store_info+0x1de>
				              {
				            	  switch(i)
 8007c70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007c74:	2b05      	cmp	r3, #5
 8007c76:	d848      	bhi.n	8007d0a <get_store_info+0x1da>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <get_store_info+0x150>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007c99 	.word	0x08007c99
 8007c84:	08007cab 	.word	0x08007cab
 8007c88:	08007cbd 	.word	0x08007cbd
 8007c8c:	08007ccf 	.word	0x08007ccf
 8007c90:	08007ce1 	.word	0x08007ce1
 8007c94:	08007cf3 	.word	0x08007cf3
				            	  {
				            	  	  case 0:
				            			  _info_storage.folder_max_count = atoi(value_buff);
 8007c98:	463b      	mov	r3, r7
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f003 fc00 	bl	800b4a0 <atoi>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	4b66      	ldr	r3, [pc, #408]	; (8007e40 <get_store_info+0x310>)
 8007ca6:	801a      	strh	r2, [r3, #0]
				            			  break;
 8007ca8:	e030      	b.n	8007d0c <get_store_info+0x1dc>
				            		  case 1:
				            			  _info_storage.file_max_count = atoi(value_buff);
 8007caa:	463b      	mov	r3, r7
 8007cac:	4618      	mov	r0, r3
 8007cae:	f003 fbf7 	bl	800b4a0 <atoi>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	4b62      	ldr	r3, [pc, #392]	; (8007e40 <get_store_info+0x310>)
 8007cb8:	805a      	strh	r2, [r3, #2]
				            			  break;
 8007cba:	e027      	b.n	8007d0c <get_store_info+0x1dc>
				            		  case 2:
				            			  _info_storage.w_folder_seek = atoi(value_buff);
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f003 fbee 	bl	800b4a0 <atoi>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	4b5d      	ldr	r3, [pc, #372]	; (8007e40 <get_store_info+0x310>)
 8007cca:	80da      	strh	r2, [r3, #6]
				            			  break;
 8007ccc:	e01e      	b.n	8007d0c <get_store_info+0x1dc>
				            		  case 3:
				            			  _info_storage.w_file_seek = atoi(value_buff);
 8007cce:	463b      	mov	r3, r7
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f003 fbe5 	bl	800b4a0 <atoi>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	4b59      	ldr	r3, [pc, #356]	; (8007e40 <get_store_info+0x310>)
 8007cdc:	815a      	strh	r2, [r3, #10]
				            			  break;
 8007cde:	e015      	b.n	8007d0c <get_store_info+0x1dc>
				            		  case 4:
				            			  _info_storage.r_folder_seek = atoi(value_buff);
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f003 fbdc 	bl	800b4a0 <atoi>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	4b54      	ldr	r3, [pc, #336]	; (8007e40 <get_store_info+0x310>)
 8007cee:	809a      	strh	r2, [r3, #4]
				            			  break;
 8007cf0:	e00c      	b.n	8007d0c <get_store_info+0x1dc>
				            		  case 5:
				            			  _info_storage.r_file_seek = atoi(value_buff);
 8007cf2:	463b      	mov	r3, r7
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f003 fbd3 	bl	800b4a0 <atoi>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	4b50      	ldr	r3, [pc, #320]	; (8007e40 <get_store_info+0x310>)
 8007d00:	811a      	strh	r2, [r3, #8]
				            			  success = 1 ;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				            			  break;
 8007d08:	e000      	b.n	8007d0c <get_store_info+0x1dc>
				            		  default:
				            			  break;
 8007d0a:	bf00      	nop
				            	  }
				            	  break;
 8007d0c:	e008      	b.n	8007d20 <get_store_info+0x1f0>
			        	  for(int i=0; i<INFO_STORAGE_KEY_SIZE; i++)
 8007d0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007d12:	3301      	adds	r3, #1
 8007d14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007d18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007d1c:	2b05      	cmp	r3, #5
 8007d1e:	dd95      	ble.n	8007c4c <get_store_info+0x11c>
				              }
			        	  }
			          }
			          if(lfs_read_buffer[index] == '}')
 8007d20:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007d24:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007d28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007d2c:	4413      	add	r3, r2
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b7d      	cmp	r3, #125	; 0x7d
 8007d32:	d068      	beq.n	8007e06 <get_store_info+0x2d6>
			          {
			        	  break;
			          }
			          memset(key_buff, 0, sizeof(key_buff));
 8007d34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d38:	2230      	movs	r2, #48	; 0x30
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f003 ff7d 	bl	800bc3c <memset>
			          memset(value_buff, 0, sizeof(value_buff));
 8007d42:	463b      	mov	r3, r7
 8007d44:	2230      	movs	r2, #48	; 0x30
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f003 ff77 	bl	800bc3c <memset>
		              got_key = 1 ; got_value = 0 ; key_index =0 ; value_index=0  ;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007d66:	e03d      	b.n	8007de4 <get_store_info+0x2b4>
		          }
		          else if(lfs_read_buffer[index] == ':')
 8007d68:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007d6c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007d70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007d74:	4413      	add	r3, r2
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	2b3a      	cmp	r3, #58	; 0x3a
 8007d7a:	d106      	bne.n	8007d8a <get_store_info+0x25a>
		          {
		        	  got_value = 1 ;	got_key = 0;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007d82:	2300      	movs	r3, #0
 8007d84:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007d88:	e02c      	b.n	8007de4 <get_store_info+0x2b4>
		          }
		          else
		          {
			          if(got_key)
 8007d8a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d012      	beq.n	8007db8 <get_store_info+0x288>
			          {
			              key_buff[key_index++]= lfs_read_buffer[index] ;
 8007d92:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007d96:	1c5a      	adds	r2, r3, #1
 8007d98:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8007d9c:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8007da0:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8007da4:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8007da8:	440a      	add	r2, r1
 8007daa:	7811      	ldrb	r1, [r2, #0]
 8007dac:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8007db0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007db4:	54d1      	strb	r1, [r2, r3]
 8007db6:	e015      	b.n	8007de4 <get_store_info+0x2b4>
			          }
			          else if(got_value == 1)
 8007db8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d111      	bne.n	8007de4 <get_store_info+0x2b4>
			          {
			        	  value_buff[value_index++] = lfs_read_buffer[index];
 8007dc0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007dca:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8007dce:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8007dd2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8007dd6:	440a      	add	r2, r1
 8007dd8:	7811      	ldrb	r1, [r2, #0]
 8007dda:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8007dde:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8007de2:	54d1      	strb	r1, [r2, r3]
			          }
		          }
	        	  index++ ;
 8007de4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007de8:	3301      	adds	r3, #1
 8007dea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		      while(lfs_read_buffer[index])
 8007dee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8007df2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8007df6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007dfa:	4413      	add	r3, r2
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f47f aedb 	bne.w	8007bba <get_store_info+0x8a>
 8007e04:	e000      	b.n	8007e08 <get_store_info+0x2d8>
			        	  break;
 8007e06:	bf00      	nop
		      }
		  }
		  lfs_file_close(&littlefs, &info_file);
 8007e08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4806      	ldr	r0, [pc, #24]	; (8007e28 <get_store_info+0x2f8>)
 8007e10:	f7ff fbc4 	bl	800759c <lfs_file_close>
	}
	return success ;
 8007e14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	0800d6d8 	.word	0x0800d6d8
 8007e28:	2000019c 	.word	0x2000019c
 8007e2c:	0800d6ec 	.word	0x0800d6ec
 8007e30:	0800d720 	.word	0x0800d720
 8007e34:	0800d754 	.word	0x0800d754
 8007e38:	0800d778 	.word	0x0800d778
 8007e3c:	0800dce8 	.word	0x0800dce8
 8007e40:	20000224 	.word	0x20000224

08007e44 <set_store_info>:

static int set_store_info()
{
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b0e5      	sub	sp, #404	; 0x194
 8007e48:	af00      	add	r7, sp, #0
	int success = 0 ;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	char lfs_read_buffer[STORAGE_INFO_FILE_SIZE];
	char value_buff[48];
	lfs_file_t file;

	memset(lfs_read_buffer, 0, STORAGE_INFO_FILE_SIZE);
 8007e50:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f003 feee 	bl	800bc3c <memset>
	lfs_read_buffer[0] = '{';
 8007e60:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e68:	227b      	movs	r2, #123	; 0x7b
 8007e6a:	701a      	strb	r2, [r3, #0]
	for(int indx = 0 ; indx < INFO_STORAGE_KEY_SIZE; indx++)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8007e72:	e0d0      	b.n	8008016 <set_store_info+0x1d2>
	{
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, info_storage_keys[indx]);  strcat(lfs_read_buffer, "\"");
 8007e74:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7f8 f967 	bl	800014c <strlen>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007e86:	4413      	add	r3, r2
 8007e88:	498c      	ldr	r1, [pc, #560]	; (80080bc <set_store_info+0x278>)
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	8013      	strh	r3, [r2, #0]
 8007e92:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8007e96:	4613      	mov	r3, r2
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	4a88      	ldr	r2, [pc, #544]	; (80080c0 <set_store_info+0x27c>)
 8007ea0:	441a      	add	r2, r3
 8007ea2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f003 fecf 	bl	800bc4c <strcat>
 8007eae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7f8 f94a 	bl	800014c <strlen>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007ec0:	4413      	add	r3, r2
 8007ec2:	497e      	ldr	r1, [pc, #504]	; (80080bc <set_store_info+0x278>)
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	8013      	strh	r3, [r2, #0]
		  strcat(lfs_read_buffer, (char*)":");
 8007ecc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7f8 f93b 	bl	800014c <strlen>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007ede:	4413      	add	r3, r2
 8007ee0:	4978      	ldr	r1, [pc, #480]	; (80080c4 <set_store_info+0x280>)
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	8013      	strh	r3, [r2, #0]
		  memset(value_buff, 0, sizeof(value_buff));
 8007eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eee:	2230      	movs	r2, #48	; 0x30
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f003 fea2 	bl	800bc3c <memset>
		  switch(indx)
 8007ef8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d84b      	bhi.n	8007f98 <set_store_info+0x154>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <set_store_info+0xc4>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f21 	.word	0x08007f21
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f49 	.word	0x08007f49
 8007f14:	08007f5d 	.word	0x08007f5d
 8007f18:	08007f71 	.word	0x08007f71
 8007f1c:	08007f85 	.word	0x08007f85
		  {
	  	  	  case 0:
	  	  		  itoa(_info_storage.folder_max_count, value_buff, 10);
 8007f20:	4b69      	ldr	r3, [pc, #420]	; (80080c8 <set_store_info+0x284>)
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f003 fad3 	bl	800b4d8 <itoa>
	  	  		  break;
 8007f32:	e032      	b.n	8007f9a <set_store_info+0x156>
	  	  	  case 1:
	  	  		  itoa(_info_storage.file_max_count, value_buff, 10);
 8007f34:	4b64      	ldr	r3, [pc, #400]	; (80080c8 <set_store_info+0x284>)
 8007f36:	885b      	ldrh	r3, [r3, #2]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f3e:	220a      	movs	r2, #10
 8007f40:	4619      	mov	r1, r3
 8007f42:	f003 fac9 	bl	800b4d8 <itoa>
	  	  		  break;
 8007f46:	e028      	b.n	8007f9a <set_store_info+0x156>
	  	  	  case 2:
	  	  		  itoa(_info_storage.w_folder_seek, value_buff, 10);
 8007f48:	4b5f      	ldr	r3, [pc, #380]	; (80080c8 <set_store_info+0x284>)
 8007f4a:	88db      	ldrh	r3, [r3, #6]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f52:	220a      	movs	r2, #10
 8007f54:	4619      	mov	r1, r3
 8007f56:	f003 fabf 	bl	800b4d8 <itoa>
	  	  		  break;
 8007f5a:	e01e      	b.n	8007f9a <set_store_info+0x156>
	  	  	  case 3:
	  	  		  itoa(_info_storage.w_file_seek, value_buff, 10);
 8007f5c:	4b5a      	ldr	r3, [pc, #360]	; (80080c8 <set_store_info+0x284>)
 8007f5e:	895b      	ldrh	r3, [r3, #10]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f66:	220a      	movs	r2, #10
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f003 fab5 	bl	800b4d8 <itoa>
	  	  		  break;
 8007f6e:	e014      	b.n	8007f9a <set_store_info+0x156>
	  	  	  case 4:
	  	  		  itoa(_info_storage.r_folder_seek, value_buff, 10);
 8007f70:	4b55      	ldr	r3, [pc, #340]	; (80080c8 <set_store_info+0x284>)
 8007f72:	889b      	ldrh	r3, [r3, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f7a:	220a      	movs	r2, #10
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	f003 faab 	bl	800b4d8 <itoa>
	  	  		  break;
 8007f82:	e00a      	b.n	8007f9a <set_store_info+0x156>
	  	  	  case 5:
	  	  		  itoa(_info_storage.r_file_seek, value_buff, 10);
 8007f84:	4b50      	ldr	r3, [pc, #320]	; (80080c8 <set_store_info+0x284>)
 8007f86:	891b      	ldrh	r3, [r3, #8]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f8e:	220a      	movs	r2, #10
 8007f90:	4619      	mov	r1, r3
 8007f92:	f003 faa1 	bl	800b4d8 <itoa>
	  	  		  break;
 8007f96:	e000      	b.n	8007f9a <set_store_info+0x156>
	  	  	  default:
	  	  		  break;
 8007f98:	bf00      	nop
		  }
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, value_buff);  strcat(lfs_read_buffer, "\"");
 8007f9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f8 f8d4 	bl	800014c <strlen>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fac:	4413      	add	r3, r2
 8007fae:	4943      	ldr	r1, [pc, #268]	; (80080bc <set_store_info+0x278>)
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	8013      	strh	r3, [r2, #0]
 8007fb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007fbc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f003 fe42 	bl	800bc4c <strcat>
 8007fc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7f8 f8bd 	bl	800014c <strlen>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fda:	4413      	add	r3, r2
 8007fdc:	4937      	ldr	r1, [pc, #220]	; (80080bc <set_store_info+0x278>)
 8007fde:	461a      	mov	r2, r3
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	8013      	strh	r3, [r2, #0]
		  if(indx < INFO_STORAGE_KEY_SIZE-1)	 strcat(lfs_read_buffer, ",");
 8007fe6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	dc0e      	bgt.n	800800c <set_store_info+0x1c8>
 8007fee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 f8aa 	bl	800014c <strlen>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008000:	4413      	add	r3, r2
 8008002:	4932      	ldr	r1, [pc, #200]	; (80080cc <set_store_info+0x288>)
 8008004:	461a      	mov	r2, r3
 8008006:	460b      	mov	r3, r1
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	8013      	strh	r3, [r2, #0]
	for(int indx = 0 ; indx < INFO_STORAGE_KEY_SIZE; indx++)
 800800c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008010:	3301      	adds	r3, #1
 8008012:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8008016:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800801a:	2b05      	cmp	r3, #5
 800801c:	f77f af2a 	ble.w	8007e74 <set_store_info+0x30>
	}
	strcat(lfs_read_buffer, (char*)"}");
 8008020:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008024:	4618      	mov	r0, r3
 8008026:	f7f8 f891 	bl	800014c <strlen>
 800802a:	4603      	mov	r3, r0
 800802c:	461a      	mov	r2, r3
 800802e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008032:	4413      	add	r3, r2
 8008034:	4926      	ldr	r1, [pc, #152]	; (80080d0 <set_store_info+0x28c>)
 8008036:	461a      	mov	r2, r3
 8008038:	460b      	mov	r3, r1
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	8013      	strh	r3, [r2, #0]

#ifdef DEBUG
	printf("set_store_info :  new info string : %s\n", lfs_read_buffer);
 800803e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008042:	4619      	mov	r1, r3
 8008044:	4823      	ldr	r0, [pc, #140]	; (80080d4 <set_store_info+0x290>)
 8008046:	f003 fca3 	bl	800b990 <iprintf>
#endif

	if( lfs_file_open(&littlefs, &file, STORAGE_INFO_FILE_NAME, LFS_O_RDWR | LFS_O_CREAT ) < 0 )
 800804a:	1d39      	adds	r1, r7, #4
 800804c:	f240 1303 	movw	r3, #259	; 0x103
 8008050:	4a21      	ldr	r2, [pc, #132]	; (80080d8 <set_store_info+0x294>)
 8008052:	4822      	ldr	r0, [pc, #136]	; (80080dc <set_store_info+0x298>)
 8008054:	f7ff fa6e 	bl	8007534 <lfs_file_open>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	da04      	bge.n	8008068 <set_store_info+0x224>
	{
#ifdef DEBUG
		  printf("set_store_info: fail to open %s from save_info\n", STORAGE_INFO_FILE_NAME);	while(1);
 800805e:	491e      	ldr	r1, [pc, #120]	; (80080d8 <set_store_info+0x294>)
 8008060:	481f      	ldr	r0, [pc, #124]	; (80080e0 <set_store_info+0x29c>)
 8008062:	f003 fc95 	bl	800b990 <iprintf>
 8008066:	e7fe      	b.n	8008066 <set_store_info+0x222>
#endif
	}
	else
	{
		  if(lfs_file_write(&littlefs, &file, lfs_read_buffer, strlen(lfs_read_buffer)) < strlen(lfs_read_buffer))
 8008068:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800806c:	4618      	mov	r0, r3
 800806e:	f7f8 f86d 	bl	800014c <strlen>
 8008072:	4603      	mov	r3, r0
 8008074:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008078:	1d39      	adds	r1, r7, #4
 800807a:	4818      	ldr	r0, [pc, #96]	; (80080dc <set_store_info+0x298>)
 800807c:	f7ff faea 	bl	8007654 <lfs_file_write>
 8008080:	4603      	mov	r3, r0
 8008082:	461c      	mov	r4, r3
 8008084:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008088:	4618      	mov	r0, r3
 800808a:	f7f8 f85f 	bl	800014c <strlen>
 800808e:	4603      	mov	r3, r0
 8008090:	429c      	cmp	r4, r3
 8008092:	d204      	bcs.n	800809e <set_store_info+0x25a>
		  {
#ifdef DEBUG
			  printf("set_store_info :  fail to write new %s from main\n", STORAGE_INFO_FILE_NAME); while(1);
 8008094:	4910      	ldr	r1, [pc, #64]	; (80080d8 <set_store_info+0x294>)
 8008096:	4813      	ldr	r0, [pc, #76]	; (80080e4 <set_store_info+0x2a0>)
 8008098:	f003 fc7a 	bl	800b990 <iprintf>
 800809c:	e7fe      	b.n	800809c <set_store_info+0x258>
#endif
		  }
		  else
		  {
			  success = 1 ;
 800809e:	2301      	movs	r3, #1
 80080a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		  }
		  lfs_file_close(&littlefs, &file);
 80080a4:	1d3b      	adds	r3, r7, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	480c      	ldr	r0, [pc, #48]	; (80080dc <set_store_info+0x298>)
 80080aa:	f7ff fa77 	bl	800759c <lfs_file_close>
	}
    return success ;
 80080ae:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd90      	pop	{r4, r7, pc}
 80080bc:	0800d7a0 	.word	0x0800d7a0
 80080c0:	0800dce8 	.word	0x0800dce8
 80080c4:	0800d7a4 	.word	0x0800d7a4
 80080c8:	20000224 	.word	0x20000224
 80080cc:	0800d7a8 	.word	0x0800d7a8
 80080d0:	0800d7ac 	.word	0x0800d7ac
 80080d4:	0800d7b0 	.word	0x0800d7b0
 80080d8:	0800d6d8 	.word	0x0800d6d8
 80080dc:	2000019c 	.word	0x2000019c
 80080e0:	0800d7d8 	.word	0x0800d7d8
 80080e4:	0800d808 	.word	0x0800d808

080080e8 <save_data>:

static Storage_error_t save_data(uint8_t* buffer, uint16_t size)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b0b0      	sub	sp, #192	; 0xc0
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	807b      	strh	r3, [r7, #2]
	lfs_file_t file ;
	Storage_error_t err = STORAGE_WRITE_FAIL ;
 80080f4:	23fa      	movs	r3, #250	; 0xfa
 80080f6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	char data_path[68];
	char folder_seek[3],file_seek[5];

	int written = 0 ;
 80080fa:	2300      	movs	r3, #0
 80080fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	if((_info_storage.w_folder_seek == _info_storage.r_folder_seek) &&  \
 8008100:	4b73      	ldr	r3, [pc, #460]	; (80082d0 <save_data+0x1e8>)
 8008102:	88da      	ldrh	r2, [r3, #6]
 8008104:	4b72      	ldr	r3, [pc, #456]	; (80082d0 <save_data+0x1e8>)
 8008106:	889b      	ldrh	r3, [r3, #4]
 8008108:	429a      	cmp	r2, r3
 800810a:	d111      	bne.n	8008130 <save_data+0x48>
			(_info_storage.r_file_seek >_info_storage.w_file_seek ) && \
 800810c:	4b70      	ldr	r3, [pc, #448]	; (80082d0 <save_data+0x1e8>)
 800810e:	891a      	ldrh	r2, [r3, #8]
 8008110:	4b6f      	ldr	r3, [pc, #444]	; (80082d0 <save_data+0x1e8>)
 8008112:	895b      	ldrh	r3, [r3, #10]
	if((_info_storage.w_folder_seek == _info_storage.r_folder_seek) &&  \
 8008114:	429a      	cmp	r2, r3
 8008116:	d90b      	bls.n	8008130 <save_data+0x48>
			(_info_storage.r_file_seek -_info_storage.w_file_seek ) < 2 )
 8008118:	4b6d      	ldr	r3, [pc, #436]	; (80082d0 <save_data+0x1e8>)
 800811a:	891b      	ldrh	r3, [r3, #8]
 800811c:	461a      	mov	r2, r3
 800811e:	4b6c      	ldr	r3, [pc, #432]	; (80082d0 <save_data+0x1e8>)
 8008120:	895b      	ldrh	r3, [r3, #10]
 8008122:	1ad3      	subs	r3, r2, r3
			(_info_storage.r_file_seek >_info_storage.w_file_seek ) && \
 8008124:	2b01      	cmp	r3, #1
 8008126:	dc03      	bgt.n	8008130 <save_data+0x48>
	{
		err = STORATE_FULL;
 8008128:	23fe      	movs	r3, #254	; 0xfe
 800812a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800812e:	e0c9      	b.n	80082c4 <save_data+0x1dc>
    }
	else
	{
		memset(folder_seek, 0, sizeof(folder_seek)); 	itoa(_info_storage.w_folder_seek, folder_seek, 10);
 8008130:	f107 0314 	add.w	r3, r7, #20
 8008134:	2203      	movs	r2, #3
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f003 fd7f 	bl	800bc3c <memset>
 800813e:	4b64      	ldr	r3, [pc, #400]	; (80082d0 <save_data+0x1e8>)
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	4618      	mov	r0, r3
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	220a      	movs	r2, #10
 800814a:	4619      	mov	r1, r3
 800814c:	f003 f9c4 	bl	800b4d8 <itoa>
		memset(file_seek,   0, sizeof(file_seek));   	itoa(_info_storage.w_file_seek, file_seek, 10);
 8008150:	f107 030c 	add.w	r3, r7, #12
 8008154:	2205      	movs	r2, #5
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f003 fd6f 	bl	800bc3c <memset>
 800815e:	4b5c      	ldr	r3, [pc, #368]	; (80082d0 <save_data+0x1e8>)
 8008160:	895b      	ldrh	r3, [r3, #10]
 8008162:	4618      	mov	r0, r3
 8008164:	f107 030c 	add.w	r3, r7, #12
 8008168:	220a      	movs	r2, #10
 800816a:	4619      	mov	r1, r3
 800816c:	f003 f9b4 	bl	800b4d8 <itoa>
		memset(data_path,   0, sizeof(data_path));
 8008170:	f107 0318 	add.w	r3, r7, #24
 8008174:	2244      	movs	r2, #68	; 0x44
 8008176:	2100      	movs	r1, #0
 8008178:	4618      	mov	r0, r3
 800817a:	f003 fd5f 	bl	800bc3c <memset>

		strcpy(data_path, folder_seek);	strcat(data_path, "/");	strcat(data_path, file_seek);	strcat(data_path, ".txt");
 800817e:	f107 0214 	add.w	r2, r7, #20
 8008182:	f107 0318 	add.w	r3, r7, #24
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f003 fe20 	bl	800bdce <strcpy>
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f7f7 ffda 	bl	800014c <strlen>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	f107 0318 	add.w	r3, r7, #24
 80081a0:	4413      	add	r3, r2
 80081a2:	494c      	ldr	r1, [pc, #304]	; (80082d4 <save_data+0x1ec>)
 80081a4:	461a      	mov	r2, r3
 80081a6:	460b      	mov	r3, r1
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	8013      	strh	r3, [r2, #0]
 80081ac:	f107 020c 	add.w	r2, r7, #12
 80081b0:	f107 0318 	add.w	r3, r7, #24
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f003 fd48 	bl	800bc4c <strcat>
 80081bc:	f107 0318 	add.w	r3, r7, #24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7f7 ffc3 	bl	800014c <strlen>
 80081c6:	4603      	mov	r3, r0
 80081c8:	461a      	mov	r2, r3
 80081ca:	f107 0318 	add.w	r3, r7, #24
 80081ce:	4413      	add	r3, r2
 80081d0:	4a41      	ldr	r2, [pc, #260]	; (80082d8 <save_data+0x1f0>)
 80081d2:	6810      	ldr	r0, [r2, #0]
 80081d4:	6018      	str	r0, [r3, #0]
 80081d6:	7912      	ldrb	r2, [r2, #4]
 80081d8:	711a      	strb	r2, [r3, #4]

#ifdef DEBUG
		printf("save_data :  path %s\n", data_path); //HAL_Delay(3000);
 80081da:	f107 0318 	add.w	r3, r7, #24
 80081de:	4619      	mov	r1, r3
 80081e0:	483e      	ldr	r0, [pc, #248]	; (80082dc <save_data+0x1f4>)
 80081e2:	f003 fbd5 	bl	800b990 <iprintf>
#endif

		if( lfs_file_open(&littlefs, &file, data_path, LFS_O_RDWR | LFS_O_CREAT ) < 0 )
 80081e6:	f107 0218 	add.w	r2, r7, #24
 80081ea:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80081ee:	f240 1303 	movw	r3, #259	; 0x103
 80081f2:	483b      	ldr	r0, [pc, #236]	; (80082e0 <save_data+0x1f8>)
 80081f4:	f7ff f99e 	bl	8007534 <lfs_file_open>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da09      	bge.n	8008212 <save_data+0x12a>
		{
#ifdef DEBUG
			 printf("save_data :fail to open data path :  %s\n", data_path);
 80081fe:	f107 0318 	add.w	r3, r7, #24
 8008202:	4619      	mov	r1, r3
 8008204:	4837      	ldr	r0, [pc, #220]	; (80082e4 <save_data+0x1fc>)
 8008206:	f003 fbc3 	bl	800b990 <iprintf>
#endif
			 err = STORAGE_FILE_OPEN_FAIL ;
 800820a:	23fb      	movs	r3, #251	; 0xfb
 800820c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8008210:	e01c      	b.n	800824c <save_data+0x164>
		}
		else
		{
			  if(lfs_file_write(&littlefs, &file, buffer, size) < 0 )
 8008212:	887b      	ldrh	r3, [r7, #2]
 8008214:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	4831      	ldr	r0, [pc, #196]	; (80082e0 <save_data+0x1f8>)
 800821c:	f7ff fa1a 	bl	8007654 <lfs_file_write>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	da03      	bge.n	800822e <save_data+0x146>
			  {
#ifdef DEBUG
				  printf("fail to write info.txt \n"); while(1);
 8008226:	4830      	ldr	r0, [pc, #192]	; (80082e8 <save_data+0x200>)
 8008228:	f003 fc18 	bl	800ba5c <puts>
 800822c:	e7fe      	b.n	800822c <save_data+0x144>
#endif
			  }
			  else
			  {
#ifdef DEBUG
				  printf("successfully written to %s \n ", data_path);  //HAL_Delay(3000);
 800822e:	f107 0318 	add.w	r3, r7, #24
 8008232:	4619      	mov	r1, r3
 8008234:	482d      	ldr	r0, [pc, #180]	; (80082ec <save_data+0x204>)
 8008236:	f003 fbab 	bl	800b990 <iprintf>
#endif
				  written = 1 ;
 800823a:	2301      	movs	r3, #1
 800823c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			  }
			  lfs_file_close(&littlefs, &file);
 8008240:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008244:	4619      	mov	r1, r3
 8008246:	4826      	ldr	r0, [pc, #152]	; (80082e0 <save_data+0x1f8>)
 8008248:	f7ff f9a8 	bl	800759c <lfs_file_close>
		}
		if(written==1)
 800824c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008250:	2b01      	cmp	r3, #1
 8008252:	d137      	bne.n	80082c4 <save_data+0x1dc>
		{
			  int w_file_seek = _info_storage.w_file_seek;
 8008254:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <save_data+0x1e8>)
 8008256:	895b      	ldrh	r3, [r3, #10]
 8008258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  int w_folder_seek = _info_storage.w_folder_seek;
 800825c:	4b1c      	ldr	r3, [pc, #112]	; (80082d0 <save_data+0x1e8>)
 800825e:	88db      	ldrh	r3, [r3, #6]
 8008260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			  if(_info_storage.w_file_seek++ > FILE_MAX_COUNT)
 8008264:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <save_data+0x1e8>)
 8008266:	895b      	ldrh	r3, [r3, #10]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	b291      	uxth	r1, r2
 800826c:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <save_data+0x1e8>)
 800826e:	8151      	strh	r1, [r2, #10]
 8008270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008274:	d90d      	bls.n	8008292 <save_data+0x1aa>
			  {
				  _info_storage.w_file_seek = FILE_SEEK_START ;
 8008276:	4b16      	ldr	r3, [pc, #88]	; (80082d0 <save_data+0x1e8>)
 8008278:	2200      	movs	r2, #0
 800827a:	815a      	strh	r2, [r3, #10]
				  if(_info_storage.w_folder_seek++ > FOLDER_MAX_COUNT)
 800827c:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <save_data+0x1e8>)
 800827e:	88db      	ldrh	r3, [r3, #6]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	b291      	uxth	r1, r2
 8008284:	4a12      	ldr	r2, [pc, #72]	; (80082d0 <save_data+0x1e8>)
 8008286:	80d1      	strh	r1, [r2, #6]
 8008288:	2b0c      	cmp	r3, #12
 800828a:	d902      	bls.n	8008292 <save_data+0x1aa>
				  {
					  _info_storage.w_folder_seek = FOLDER_SEEK_START ;
 800828c:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <save_data+0x1e8>)
 800828e:	2201      	movs	r2, #1
 8008290:	80da      	strh	r2, [r3, #6]
				  }
			  }
			  if(set_store_info() != 1)
 8008292:	f7ff fdd7 	bl	8007e44 <set_store_info>
 8008296:	4603      	mov	r3, r0
 8008298:	2b01      	cmp	r3, #1
 800829a:	d00d      	beq.n	80082b8 <save_data+0x1d0>
			  {
				  _info_storage.w_file_seek = w_file_seek;
 800829c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <save_data+0x1e8>)
 80082a4:	815a      	strh	r2, [r3, #10]
				  _info_storage.w_folder_seek = w_folder_seek;
 80082a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <save_data+0x1e8>)
 80082ae:	80da      	strh	r2, [r3, #6]
#ifdef DEBUG
				  printf("save_data : fail to update storage info \n"); while(1);
 80082b0:	480f      	ldr	r0, [pc, #60]	; (80082f0 <save_data+0x208>)
 80082b2:	f003 fbd3 	bl	800ba5c <puts>
 80082b6:	e7fe      	b.n	80082b6 <save_data+0x1ce>
#endif
			  }
			  else
			  {
				  err = STORAGE_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#ifdef DEBUG
				  printf("save_data : info updated successfully ..  \n");
 80082be:	480d      	ldr	r0, [pc, #52]	; (80082f4 <save_data+0x20c>)
 80082c0:	f003 fbcc 	bl	800ba5c <puts>
#endif
			  }
		 }
	}
	return err ;
 80082c4:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	37c0      	adds	r7, #192	; 0xc0
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000224 	.word	0x20000224
 80082d4:	0800d83c 	.word	0x0800d83c
 80082d8:	0800d840 	.word	0x0800d840
 80082dc:	0800d848 	.word	0x0800d848
 80082e0:	2000019c 	.word	0x2000019c
 80082e4:	0800d860 	.word	0x0800d860
 80082e8:	0800d88c 	.word	0x0800d88c
 80082ec:	0800d8a4 	.word	0x0800d8a4
 80082f0:	0800d8c4 	.word	0x0800d8c4
 80082f4:	0800d8f0 	.word	0x0800d8f0

080082f8 <read_data>:

static Storage_error_t read_data(uint8_t* buffer, uint16_t size)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b0b0      	sub	sp, #192	; 0xc0
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	807b      	strh	r3, [r7, #2]
	  lfs_file_t file ;
	  Storage_error_t err = STORAGE_WRITE_FAIL ;
 8008304:	23fa      	movs	r3, #250	; 0xfa
 8008306:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	  char data_path[68];
	  char folder_seek[3], file_seek[5];

	  int read_ok = 0 ;
 800830a:	2300      	movs	r3, #0
 800830c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  if((_info_storage.w_folder_seek == _info_storage.r_folder_seek) && (_info_storage.r_file_seek ==_info_storage.w_file_seek ))
 8008310:	4b6c      	ldr	r3, [pc, #432]	; (80084c4 <read_data+0x1cc>)
 8008312:	88da      	ldrh	r2, [r3, #6]
 8008314:	4b6b      	ldr	r3, [pc, #428]	; (80084c4 <read_data+0x1cc>)
 8008316:	889b      	ldrh	r3, [r3, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	d10c      	bne.n	8008336 <read_data+0x3e>
 800831c:	4b69      	ldr	r3, [pc, #420]	; (80084c4 <read_data+0x1cc>)
 800831e:	891a      	ldrh	r2, [r3, #8]
 8008320:	4b68      	ldr	r3, [pc, #416]	; (80084c4 <read_data+0x1cc>)
 8008322:	895b      	ldrh	r3, [r3, #10]
 8008324:	429a      	cmp	r2, r3
 8008326:	d106      	bne.n	8008336 <read_data+0x3e>
	  {
		  err = STORATE_EMPTY  ;
 8008328:	23fd      	movs	r3, #253	; 0xfd
 800832a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#ifdef DEBUG
		  printf("read_data : storage empty ... \n");
 800832e:	4866      	ldr	r0, [pc, #408]	; (80084c8 <read_data+0x1d0>)
 8008330:	f003 fb94 	bl	800ba5c <puts>
 8008334:	e0bf      	b.n	80084b6 <read_data+0x1be>
#endif
	  }
	  else
	  {
		  memset(folder_seek, 0, sizeof(folder_seek)); itoa(_info_storage.r_folder_seek, folder_seek, 10);
 8008336:	f107 0314 	add.w	r3, r7, #20
 800833a:	2203      	movs	r2, #3
 800833c:	2100      	movs	r1, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f003 fc7c 	bl	800bc3c <memset>
 8008344:	4b5f      	ldr	r3, [pc, #380]	; (80084c4 <read_data+0x1cc>)
 8008346:	889b      	ldrh	r3, [r3, #4]
 8008348:	4618      	mov	r0, r3
 800834a:	f107 0314 	add.w	r3, r7, #20
 800834e:	220a      	movs	r2, #10
 8008350:	4619      	mov	r1, r3
 8008352:	f003 f8c1 	bl	800b4d8 <itoa>
		  memset(file_seek,   0, sizeof(file_seek));   itoa(_info_storage.r_file_seek, file_seek, 10);
 8008356:	f107 030c 	add.w	r3, r7, #12
 800835a:	2205      	movs	r2, #5
 800835c:	2100      	movs	r1, #0
 800835e:	4618      	mov	r0, r3
 8008360:	f003 fc6c 	bl	800bc3c <memset>
 8008364:	4b57      	ldr	r3, [pc, #348]	; (80084c4 <read_data+0x1cc>)
 8008366:	891b      	ldrh	r3, [r3, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	220a      	movs	r2, #10
 8008370:	4619      	mov	r1, r3
 8008372:	f003 f8b1 	bl	800b4d8 <itoa>
		  memset(data_path,   0, sizeof(data_path));
 8008376:	f107 0318 	add.w	r3, r7, #24
 800837a:	2244      	movs	r2, #68	; 0x44
 800837c:	2100      	movs	r1, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f003 fc5c 	bl	800bc3c <memset>

		  strcpy(data_path, folder_seek);	strcat(data_path, "/");	 strcat(data_path, file_seek); strcat(data_path, ".txt");
 8008384:	f107 0214 	add.w	r2, r7, #20
 8008388:	f107 0318 	add.w	r3, r7, #24
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f003 fd1d 	bl	800bdce <strcpy>
 8008394:	f107 0318 	add.w	r3, r7, #24
 8008398:	4618      	mov	r0, r3
 800839a:	f7f7 fed7 	bl	800014c <strlen>
 800839e:	4603      	mov	r3, r0
 80083a0:	461a      	mov	r2, r3
 80083a2:	f107 0318 	add.w	r3, r7, #24
 80083a6:	4413      	add	r3, r2
 80083a8:	4948      	ldr	r1, [pc, #288]	; (80084cc <read_data+0x1d4>)
 80083aa:	461a      	mov	r2, r3
 80083ac:	460b      	mov	r3, r1
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	8013      	strh	r3, [r2, #0]
 80083b2:	f107 020c 	add.w	r2, r7, #12
 80083b6:	f107 0318 	add.w	r3, r7, #24
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f003 fc45 	bl	800bc4c <strcat>
 80083c2:	f107 0318 	add.w	r3, r7, #24
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f7 fec0 	bl	800014c <strlen>
 80083cc:	4603      	mov	r3, r0
 80083ce:	461a      	mov	r2, r3
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	4413      	add	r3, r2
 80083d6:	4a3e      	ldr	r2, [pc, #248]	; (80084d0 <read_data+0x1d8>)
 80083d8:	6810      	ldr	r0, [r2, #0]
 80083da:	6018      	str	r0, [r3, #0]
 80083dc:	7912      	ldrb	r2, [r2, #4]
 80083de:	711a      	strb	r2, [r3, #4]

#ifdef DEBUG
		  printf("read_data :  path %s\n", data_path);
 80083e0:	f107 0318 	add.w	r3, r7, #24
 80083e4:	4619      	mov	r1, r3
 80083e6:	483b      	ldr	r0, [pc, #236]	; (80084d4 <read_data+0x1dc>)
 80083e8:	f003 fad2 	bl	800b990 <iprintf>
#endif

		  if( lfs_file_open(&littlefs, &file, data_path, LFS_O_RDWR ) < 0 )
 80083ec:	f107 0218 	add.w	r2, r7, #24
 80083f0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80083f4:	2303      	movs	r3, #3
 80083f6:	4838      	ldr	r0, [pc, #224]	; (80084d8 <read_data+0x1e0>)
 80083f8:	f7ff f89c 	bl	8007534 <lfs_file_open>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	da03      	bge.n	800840a <read_data+0x112>
		  {
#ifdef DEBUG
			  printf("read_data :fail to open data_path \n"); while(1);
 8008402:	4836      	ldr	r0, [pc, #216]	; (80084dc <read_data+0x1e4>)
 8008404:	f003 fb2a 	bl	800ba5c <puts>
 8008408:	e7fe      	b.n	8008408 <read_data+0x110>
#endif
			  err = STORAGE_FILE_OPEN_FAIL ;
		  }
		  else
		  {
			  if(lfs_file_read(&littlefs, &file, buffer, size) < 0 )
 800840a:	887b      	ldrh	r3, [r7, #2]
 800840c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	4831      	ldr	r0, [pc, #196]	; (80084d8 <read_data+0x1e0>)
 8008414:	f7ff f8ee 	bl	80075f4 <lfs_file_read>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	da03      	bge.n	8008426 <read_data+0x12e>
			  {
#ifdef DEBUG
				  printf("read_data : fail to read info.txt \n"); while(1);
 800841e:	4830      	ldr	r0, [pc, #192]	; (80084e0 <read_data+0x1e8>)
 8008420:	f003 fb1c 	bl	800ba5c <puts>
 8008424:	e7fe      	b.n	8008424 <read_data+0x12c>
				  err = STORAGE_WRITE_FAIL;
			  }
			  else
			  {
#ifdef DEBUG
				  printf("successfully read from %s   \n", data_path);
 8008426:	f107 0318 	add.w	r3, r7, #24
 800842a:	4619      	mov	r1, r3
 800842c:	482d      	ldr	r0, [pc, #180]	; (80084e4 <read_data+0x1ec>)
 800842e:	f003 faaf 	bl	800b990 <iprintf>
#endif
				  read_ok = 1;
 8008432:	2301      	movs	r3, #1
 8008434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			  }
			  lfs_file_close(&littlefs, &file);
 8008438:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800843c:	4619      	mov	r1, r3
 800843e:	4826      	ldr	r0, [pc, #152]	; (80084d8 <read_data+0x1e0>)
 8008440:	f7ff f8ac 	bl	800759c <lfs_file_close>
		  }
		  if(read_ok == 1)
 8008444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008448:	2b01      	cmp	r3, #1
 800844a:	d134      	bne.n	80084b6 <read_data+0x1be>
		  {
			  int r_file_seek = _info_storage.r_file_seek;
 800844c:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <read_data+0x1cc>)
 800844e:	891b      	ldrh	r3, [r3, #8]
 8008450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  int r_folder_seek = _info_storage.r_folder_seek;
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <read_data+0x1cc>)
 8008456:	889b      	ldrh	r3, [r3, #4]
 8008458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			  if(_info_storage.r_file_seek++ > FILE_MAX_COUNT)
 800845c:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <read_data+0x1cc>)
 800845e:	891b      	ldrh	r3, [r3, #8]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	b291      	uxth	r1, r2
 8008464:	4a17      	ldr	r2, [pc, #92]	; (80084c4 <read_data+0x1cc>)
 8008466:	8111      	strh	r1, [r2, #8]
 8008468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800846c:	d90d      	bls.n	800848a <read_data+0x192>
			  {
				  _info_storage.r_file_seek = FILE_SEEK_START ;
 800846e:	4b15      	ldr	r3, [pc, #84]	; (80084c4 <read_data+0x1cc>)
 8008470:	2200      	movs	r2, #0
 8008472:	811a      	strh	r2, [r3, #8]
				  if(_info_storage.r_folder_seek++ > FOLDER_MAX_COUNT)
 8008474:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <read_data+0x1cc>)
 8008476:	889b      	ldrh	r3, [r3, #4]
 8008478:	1c5a      	adds	r2, r3, #1
 800847a:	b291      	uxth	r1, r2
 800847c:	4a11      	ldr	r2, [pc, #68]	; (80084c4 <read_data+0x1cc>)
 800847e:	8091      	strh	r1, [r2, #4]
 8008480:	2b0c      	cmp	r3, #12
 8008482:	d902      	bls.n	800848a <read_data+0x192>
				  {
					  _info_storage.r_folder_seek = FOLDER_SEEK_START ;
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <read_data+0x1cc>)
 8008486:	2201      	movs	r2, #1
 8008488:	809a      	strh	r2, [r3, #4]
				  }
			  }
			  if(set_store_info() != 1)
 800848a:	f7ff fcdb 	bl	8007e44 <set_store_info>
 800848e:	4603      	mov	r3, r0
 8008490:	2b01      	cmp	r3, #1
 8008492:	d00d      	beq.n	80084b0 <read_data+0x1b8>
			  {
				  _info_storage.r_file_seek = r_file_seek;
 8008494:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008498:	b29a      	uxth	r2, r3
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <read_data+0x1cc>)
 800849c:	811a      	strh	r2, [r3, #8]
				  _info_storage.r_folder_seek = r_folder_seek;
 800849e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <read_data+0x1cc>)
 80084a6:	809a      	strh	r2, [r3, #4]
#ifdef DEBUG
				  printf("read_data : fail to update storage info \n"); while(1);
 80084a8:	480f      	ldr	r0, [pc, #60]	; (80084e8 <read_data+0x1f0>)
 80084aa:	f003 fad7 	bl	800ba5c <puts>
 80084ae:	e7fe      	b.n	80084ae <read_data+0x1b6>
#endif
			  }
			  else
			  {
				  err = STORAGE_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			  }
		  }
	  }
	  return err ;
 80084b6:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	37c0      	adds	r7, #192	; 0xc0
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000224 	.word	0x20000224
 80084c8:	0800d91c 	.word	0x0800d91c
 80084cc:	0800d83c 	.word	0x0800d83c
 80084d0:	0800d840 	.word	0x0800d840
 80084d4:	0800d93c 	.word	0x0800d93c
 80084d8:	2000019c 	.word	0x2000019c
 80084dc:	0800d954 	.word	0x0800d954
 80084e0:	0800d978 	.word	0x0800d978
 80084e4:	0800d99c 	.word	0x0800d99c
 80084e8:	0800d9bc 	.word	0x0800d9bc

080084ec <get_firmware_info>:

uint8_t  get_firmware_info(Info_firmware_t * _firmware)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b0f6      	sub	sp, #472	; 0x1d8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80084f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80084fa:	6018      	str	r0, [r3, #0]
	int success = 0 ;
 80084fc:	2300      	movs	r3, #0
 80084fe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	int index = 0 , got_key = 0, got_value=0 , key_index =0 , value_index = 0 ;
 8008502:	2300      	movs	r3, #0
 8008504:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8008508:	2300      	movs	r3, #0
 800850a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800850e:	2300      	movs	r3, #0
 8008510:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008514:	2300      	movs	r3, #0
 8008516:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800851a:	2300      	movs	r3, #0
 800851c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	uint8_t lfs_read_buffer[FIRMWARE_INFO_FILE_SIZE];
	lfs_file_t info_file;

	char key_buff[48], value_buff[48];

	memset(lfs_read_buffer, 0, FIRMWARE_INFO_FILE_SIZE);
 8008520:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f003 fb86 	bl	800bc3c <memset>

	if( lfs_file_open(&littlefs, &info_file, FIRMWARE_INFO_FILE_NAME, LFS_O_RDWR ) < 0 )
 8008530:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008534:	2303      	movs	r3, #3
 8008536:	4abe      	ldr	r2, [pc, #760]	; (8008830 <get_firmware_info+0x344>)
 8008538:	48be      	ldr	r0, [pc, #760]	; (8008834 <get_firmware_info+0x348>)
 800853a:	f7fe fffb 	bl	8007534 <lfs_file_open>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	da04      	bge.n	800854e <get_firmware_info+0x62>
	{
#ifdef DEBUG
			printf("get_store_info -> fail to open %s from save_info \n", FIRMWARE_INFO_FILE_NAME);
 8008544:	49ba      	ldr	r1, [pc, #744]	; (8008830 <get_firmware_info+0x344>)
 8008546:	48bc      	ldr	r0, [pc, #752]	; (8008838 <get_firmware_info+0x34c>)
 8008548:	f003 fa22 	bl	800b990 <iprintf>
 800854c:	e185      	b.n	800885a <get_firmware_info+0x36e>
#endif
	}
	else
	{
		  if( lfs_file_read(&littlefs, &info_file, lfs_read_buffer, FIRMWARE_INFO_FILE_SIZE) < 0 )
 800854e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8008552:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855a:	48b6      	ldr	r0, [pc, #728]	; (8008834 <get_firmware_info+0x348>)
 800855c:	f7ff f84a 	bl	80075f4 <lfs_file_read>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	da04      	bge.n	8008570 <get_firmware_info+0x84>
		  {
#ifdef DEBUG
			  printf("get_store_info -> fail to read %s from save_info \n", FIRMWARE_INFO_FILE_NAME); while(1);
 8008566:	49b2      	ldr	r1, [pc, #712]	; (8008830 <get_firmware_info+0x344>)
 8008568:	48b4      	ldr	r0, [pc, #720]	; (800883c <get_firmware_info+0x350>)
 800856a:	f003 fa11 	bl	800b990 <iprintf>
 800856e:	e7fe      	b.n	800856e <get_firmware_info+0x82>
#endif
		  }
		  else
		  {
#ifdef DEBUG
			  printf("get_store_info ->  %s  :::  %s \n", FIRMWARE_INFO_FILE_NAME, lfs_read_buffer);
 8008570:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008574:	461a      	mov	r2, r3
 8008576:	49ae      	ldr	r1, [pc, #696]	; (8008830 <get_firmware_info+0x344>)
 8008578:	48b1      	ldr	r0, [pc, #708]	; (8008840 <get_firmware_info+0x354>)
 800857a:	f003 fa09 	bl	800b990 <iprintf>
#endif
		      while(lfs_read_buffer[index])
 800857e:	e14b      	b.n	8008818 <get_firmware_info+0x32c>
		      {
	        	  if(lfs_read_buffer[index] == '\"')
 8008580:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008584:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008588:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800858c:	4413      	add	r3, r2
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b22      	cmp	r3, #34	; 0x22
 8008592:	f000 813c 	beq.w	800880e <get_firmware_info+0x322>
	        	  {

	        	  }
	        	  else  if(lfs_read_buffer[index] == '{' || lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 8008596:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800859a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800859e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80085a2:	4413      	add	r3, r2
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b7b      	cmp	r3, #123	; 0x7b
 80085a8:	d014      	beq.n	80085d4 <get_firmware_info+0xe8>
 80085aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80085ae:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80085b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80085b6:	4413      	add	r3, r2
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b2c      	cmp	r3, #44	; 0x2c
 80085bc:	d00a      	beq.n	80085d4 <get_firmware_info+0xe8>
 80085be:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80085c2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80085c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80085ca:	4413      	add	r3, r2
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b7d      	cmp	r3, #125	; 0x7d
 80085d0:	f040 80df 	bne.w	8008792 <get_firmware_info+0x2a6>
		          {
			          if(lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 80085d4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80085d8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80085dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80085e0:	4413      	add	r3, r2
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b2c      	cmp	r3, #44	; 0x2c
 80085e6:	d00a      	beq.n	80085fe <get_firmware_info+0x112>
 80085e8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80085ec:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80085f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b7d      	cmp	r3, #125	; 0x7d
 80085fa:	f040 80a5 	bne.w	8008748 <get_firmware_info+0x25c>
			          {
#ifdef DEBUG
			        	  printf("get_store_info ->  key:%s   value:%s\n", key_buff, value_buff);
 80085fe:	f107 0208 	add.w	r2, r7, #8
 8008602:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008606:	4619      	mov	r1, r3
 8008608:	488e      	ldr	r0, [pc, #568]	; (8008844 <get_firmware_info+0x358>)
 800860a:	f003 f9c1 	bl	800b990 <iprintf>
#endif
			        	  for(int i=0; i<INFO_FIRMWARE_KEY_SIZE; i++)
 800860e:	2300      	movs	r3, #0
 8008610:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008614:	e093      	b.n	800873e <get_firmware_info+0x252>
			        	  {
				              if(memcmp(key_buff, info_firmware_keys[i], key_index) == 0)
 8008616:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800861a:	4613      	mov	r3, r2
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4a89      	ldr	r2, [pc, #548]	; (8008848 <get_firmware_info+0x35c>)
 8008624:	1899      	adds	r1, r3, r2
 8008626:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800862a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800862e:	4618      	mov	r0, r3
 8008630:	f003 faf4 	bl	800bc1c <memcmp>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d17c      	bne.n	8008734 <get_firmware_info+0x248>
				              {
				            	  switch(i)
 800863a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800863e:	2b04      	cmp	r3, #4
 8008640:	d876      	bhi.n	8008730 <get_firmware_info+0x244>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <get_firmware_info+0x15c>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	0800865d 	.word	0x0800865d
 800864c:	0800868f 	.word	0x0800868f
 8008650:	080086ab 	.word	0x080086ab
 8008654:	080086c7 	.word	0x080086c7
 8008658:	080086f9 	.word	0x080086f9
				            	  {
				            	  	  case 0:
				            	  		  memset(_firmware->version, 0, sizeof(_firmware->version));
 800865c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008660:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	2210      	movs	r2, #16
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f003 fae5 	bl	800bc3c <memset>
				            	  		  memcpy(_firmware->version, value_buff, value_index);
 8008672:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008676:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8008682:	f107 0108 	add.w	r1, r7, #8
 8008686:	4618      	mov	r0, r3
 8008688:	f003 fba9 	bl	800bdde <memcpy>
				            			  break;
 800868c:	e051      	b.n	8008732 <get_firmware_info+0x246>
				            		  case 1:
				            			  _firmware->size = atoi(value_buff);
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f002 ff04 	bl	800b4a0 <atoi>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80086a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	601a      	str	r2, [r3, #0]
				            			  break;
 80086a8:	e043      	b.n	8008732 <get_firmware_info+0x246>
				            		  case 2:
				            			  _firmware->checksum = atoi(value_buff);
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	4618      	mov	r0, r3
 80086b0:	f002 fef6 	bl	800b4a0 <atoi>
 80086b4:	4603      	mov	r3, r0
 80086b6:	461a      	mov	r2, r3
 80086b8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80086bc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	605a      	str	r2, [r3, #4]
				            			  break;
 80086c4:	e035      	b.n	8008732 <get_firmware_info+0x246>
				            		  case 3:
				            			  memset(_firmware->remote_firmware_url, 0, sizeof(_firmware->remote_firmware_url));
 80086c6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80086ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3318      	adds	r3, #24
 80086d2:	2280      	movs	r2, #128	; 0x80
 80086d4:	2100      	movs	r1, #0
 80086d6:	4618      	mov	r0, r3
 80086d8:	f003 fab0 	bl	800bc3c <memset>
				            			  memcpy(_firmware->remote_firmware_url, value_buff, value_index);
 80086dc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80086e0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3318      	adds	r3, #24
 80086e8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	4618      	mov	r0, r3
 80086f2:	f003 fb74 	bl	800bdde <memcpy>
				            			  break;
 80086f6:	e01c      	b.n	8008732 <get_firmware_info+0x246>
				            		  case 4:
				            			  memset(_firmware->local_firmwre_dir, 0, sizeof(_firmware->local_firmwre_dir));
 80086f8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80086fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3398      	adds	r3, #152	; 0x98
 8008704:	2230      	movs	r2, #48	; 0x30
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f003 fa97 	bl	800bc3c <memset>
				            			  memcpy(_firmware->local_firmwre_dir, value_buff, value_index);
 800870e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008712:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3398      	adds	r3, #152	; 0x98
 800871a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800871e:	f107 0108 	add.w	r1, r7, #8
 8008722:	4618      	mov	r0, r3
 8008724:	f003 fb5b 	bl	800bdde <memcpy>
				            			  success = 1 ;
 8008728:	2301      	movs	r3, #1
 800872a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				            			  break;
 800872e:	e000      	b.n	8008732 <get_firmware_info+0x246>
				            		  default:
				            			  break;
 8008730:	bf00      	nop
				            	  }
				            	  break;
 8008732:	e009      	b.n	8008748 <get_firmware_info+0x25c>
			        	  for(int i=0; i<INFO_FIRMWARE_KEY_SIZE; i++)
 8008734:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008738:	3301      	adds	r3, #1
 800873a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800873e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008742:	2b04      	cmp	r3, #4
 8008744:	f77f af67 	ble.w	8008616 <get_firmware_info+0x12a>
				              }
			        	  }
			          }
			          if(lfs_read_buffer[index] == '}')
 8008748:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800874c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008750:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008754:	4413      	add	r3, r2
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b7d      	cmp	r3, #125	; 0x7d
 800875a:	d077      	beq.n	800884c <get_firmware_info+0x360>
			          {
			        	  break;
			          }
			          memset(key_buff, 0, sizeof(key_buff));
 800875c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008760:	2230      	movs	r2, #48	; 0x30
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f003 fa69 	bl	800bc3c <memset>
			          memset(value_buff, 0, sizeof(value_buff));
 800876a:	f107 0308 	add.w	r3, r7, #8
 800876e:	2230      	movs	r2, #48	; 0x30
 8008770:	2100      	movs	r1, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f003 fa62 	bl	800bc3c <memset>
		              got_key = 1 ; got_value = 0 ; key_index =0 ; value_index=0  ;
 8008778:	2301      	movs	r3, #1
 800877a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800877e:	2300      	movs	r3, #0
 8008780:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008784:	2300      	movs	r3, #0
 8008786:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800878a:	2300      	movs	r3, #0
 800878c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008790:	e03d      	b.n	800880e <get_firmware_info+0x322>
		          }
		          else if(lfs_read_buffer[index] == ':')
 8008792:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008796:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800879a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800879e:	4413      	add	r3, r2
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b3a      	cmp	r3, #58	; 0x3a
 80087a4:	d106      	bne.n	80087b4 <get_firmware_info+0x2c8>
		          {
		        	  got_value = 1 ;	got_key = 0;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80087ac:	2300      	movs	r3, #0
 80087ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80087b2:	e02c      	b.n	800880e <get_firmware_info+0x322>
		          }
		          else
		          {
			          if(got_key)
 80087b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d012      	beq.n	80087e2 <get_firmware_info+0x2f6>
			          {
			              key_buff[key_index++]= lfs_read_buffer[index] ;
 80087bc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80087c0:	1c5a      	adds	r2, r3, #1
 80087c2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80087c6:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80087ca:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 80087ce:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80087d2:	440a      	add	r2, r1
 80087d4:	7811      	ldrb	r1, [r2, #0]
 80087d6:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80087da:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80087de:	54d1      	strb	r1, [r2, r3]
 80087e0:	e015      	b.n	800880e <get_firmware_info+0x322>
			          }
			          else if(got_value == 1)
 80087e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d111      	bne.n	800880e <get_firmware_info+0x322>
			          {
			        	  value_buff[value_index++] = lfs_read_buffer[index];
 80087ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 80087f4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80087f8:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 80087fc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8008800:	440a      	add	r2, r1
 8008802:	7811      	ldrb	r1, [r2, #0]
 8008804:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8008808:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800880c:	54d1      	strb	r1, [r2, r3]
			          }
		          }
	        	  index++ ;
 800880e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008812:	3301      	adds	r3, #1
 8008814:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		      while(lfs_read_buffer[index])
 8008818:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800881c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008820:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008824:	4413      	add	r3, r2
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	f47f aea9 	bne.w	8008580 <get_firmware_info+0x94>
 800882e:	e00e      	b.n	800884e <get_firmware_info+0x362>
 8008830:	0800d9e8 	.word	0x0800d9e8
 8008834:	2000019c 	.word	0x2000019c
 8008838:	0800d6ec 	.word	0x0800d6ec
 800883c:	0800d720 	.word	0x0800d720
 8008840:	0800d754 	.word	0x0800d754
 8008844:	0800d778 	.word	0x0800d778
 8008848:	0800dd54 	.word	0x0800dd54
			        	  break;
 800884c:	bf00      	nop
		      }
		  }
		  lfs_file_close(&littlefs, &info_file);
 800884e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008852:	4619      	mov	r1, r3
 8008854:	4813      	ldr	r0, [pc, #76]	; (80088a4 <get_firmware_info+0x3b8>)
 8008856:	f7fe fea1 	bl	800759c <lfs_file_close>
	}
	if(success == 1)
 800885a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800885e:	2b01      	cmp	r3, #1
 8008860:	d117      	bne.n	8008892 <get_firmware_info+0x3a6>
	{
		_firmware->read = firmware_read;
 8008862:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008866:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a0e      	ldr	r2, [pc, #56]	; (80088a8 <get_firmware_info+0x3bc>)
 800886e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		_firmware->write = firmware_write;
 8008872:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008876:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a0b      	ldr	r2, [pc, #44]	; (80088ac <get_firmware_info+0x3c0>)
 800887e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		_firmware->remove = firmware_delete_dir ;
 8008882:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008886:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a08      	ldr	r2, [pc, #32]	; (80088b0 <get_firmware_info+0x3c4>)
 800888e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	}
	return success ;
 8008892:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008896:	b2db      	uxtb	r3, r3
}
 8008898:	4618      	mov	r0, r3
 800889a:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	2000019c 	.word	0x2000019c
 80088a8:	08008c55 	.word	0x08008c55
 80088ac:	08008b75 	.word	0x08008b75
 80088b0:	08008d2d 	.word	0x08008d2d

080088b4 <set_firmware_info>:

uint8_t set_firmware_info(Info_firmware_t * _firmware)
{
 80088b4:	b590      	push	{r4, r7, lr}
 80088b6:	b0e7      	sub	sp, #412	; 0x19c
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80088be:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80088c2:	6018      	str	r0, [r3, #0]
	int success = 0 ;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

	char lfs_read_buffer[FIRMWARE_INFO_FILE_SIZE];
	char value_buff[48];
	lfs_file_t file;

	memset(lfs_read_buffer, 0, FIRMWARE_INFO_FILE_SIZE);
 80088ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80088ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f003 f9b1 	bl	800bc3c <memset>
	lfs_read_buffer[0] = '{';
 80088da:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80088de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e2:	227b      	movs	r2, #123	; 0x7b
 80088e4:	701a      	strb	r2, [r3, #0]
	for(int indx = 0 ; indx < INFO_FIRMWARE_KEY_SIZE; indx++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80088ec:	e0d7      	b.n	8008a9e <set_firmware_info+0x1ea>
	{
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, info_firmware_keys[indx]);  strcat(lfs_read_buffer, "\"");
 80088ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f7 fc2a 	bl	800014c <strlen>
 80088f8:	4603      	mov	r3, r0
 80088fa:	461a      	mov	r2, r3
 80088fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008900:	4413      	add	r3, r2
 8008902:	4992      	ldr	r1, [pc, #584]	; (8008b4c <set_firmware_info+0x298>)
 8008904:	461a      	mov	r2, r3
 8008906:	460b      	mov	r3, r1
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	8013      	strh	r3, [r2, #0]
 800890c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008910:	4613      	mov	r3, r2
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4a8d      	ldr	r2, [pc, #564]	; (8008b50 <set_firmware_info+0x29c>)
 800891a:	441a      	add	r2, r3
 800891c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f003 f992 	bl	800bc4c <strcat>
 8008928:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800892c:	4618      	mov	r0, r3
 800892e:	f7f7 fc0d 	bl	800014c <strlen>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800893a:	4413      	add	r3, r2
 800893c:	4983      	ldr	r1, [pc, #524]	; (8008b4c <set_firmware_info+0x298>)
 800893e:	461a      	mov	r2, r3
 8008940:	460b      	mov	r3, r1
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	8013      	strh	r3, [r2, #0]
		  strcat(lfs_read_buffer, (char*)":");
 8008946:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800894a:	4618      	mov	r0, r3
 800894c:	f7f7 fbfe 	bl	800014c <strlen>
 8008950:	4603      	mov	r3, r0
 8008952:	461a      	mov	r2, r3
 8008954:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008958:	4413      	add	r3, r2
 800895a:	497e      	ldr	r1, [pc, #504]	; (8008b54 <set_firmware_info+0x2a0>)
 800895c:	461a      	mov	r2, r3
 800895e:	460b      	mov	r3, r1
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	8013      	strh	r3, [r2, #0]
		  memset(value_buff, 0, sizeof(value_buff));
 8008964:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008968:	2230      	movs	r2, #48	; 0x30
 800896a:	2100      	movs	r1, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f003 f965 	bl	800bc3c <memset>
		  switch(indx)
 8008972:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008976:	2b04      	cmp	r3, #4
 8008978:	d852      	bhi.n	8008a20 <set_firmware_info+0x16c>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <set_firmware_info+0xcc>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008995 	.word	0x08008995
 8008984:	080089b1 	.word	0x080089b1
 8008988:	080089cd 	.word	0x080089cd
 800898c:	080089e9 	.word	0x080089e9
 8008990:	08008a05 	.word	0x08008a05
		  {
	  	  	  case 0:
	  	  		  strcat(value_buff, (char*)_firmware->version);
 8008994:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008998:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f103 0208 	add.w	r2, r3, #8
 80089a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f003 f94f 	bl	800bc4c <strcat>
	  	  		  break;
 80089ae:	e038      	b.n	8008a22 <set_firmware_info+0x16e>
	  	  	  case 1:
	  	  		  itoa(_firmware->size, value_buff, 10);
 80089b0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80089b4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089c2:	220a      	movs	r2, #10
 80089c4:	4619      	mov	r1, r3
 80089c6:	f002 fd87 	bl	800b4d8 <itoa>
	  	  		  break;
 80089ca:	e02a      	b.n	8008a22 <set_firmware_info+0x16e>
	  	  	  case 2:
	  	  		  itoa(_firmware->checksum, value_buff, 10);
 80089cc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80089d0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	4618      	mov	r0, r3
 80089da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089de:	220a      	movs	r2, #10
 80089e0:	4619      	mov	r1, r3
 80089e2:	f002 fd79 	bl	800b4d8 <itoa>
	  	  		  break;
 80089e6:	e01c      	b.n	8008a22 <set_firmware_info+0x16e>
	  	  	  case 3:
	  	  		  strcat(value_buff, (char*)_firmware->remote_firmware_url);
 80089e8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80089ec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f103 0218 	add.w	r2, r3, #24
 80089f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f003 f925 	bl	800bc4c <strcat>
	  	  		  break;
 8008a02:	e00e      	b.n	8008a22 <set_firmware_info+0x16e>
	  	  	  case 4:
	  	  		  strcat(value_buff, (char*)_firmware->local_firmwre_dir);
 8008a04:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008a08:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008a12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f003 f917 	bl	800bc4c <strcat>
	  	  		  break;
 8008a1e:	e000      	b.n	8008a22 <set_firmware_info+0x16e>
	  	  	  default:
	  	  		  break;
 8008a20:	bf00      	nop
		  }
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, value_buff);  strcat(lfs_read_buffer, "\"");
 8008a22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f7 fb90 	bl	800014c <strlen>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a34:	4413      	add	r3, r2
 8008a36:	4945      	ldr	r1, [pc, #276]	; (8008b4c <set_firmware_info+0x298>)
 8008a38:	461a      	mov	r2, r3
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	8013      	strh	r3, [r2, #0]
 8008a40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008a44:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f003 f8fe 	bl	800bc4c <strcat>
 8008a50:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7f7 fb79 	bl	800014c <strlen>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a62:	4413      	add	r3, r2
 8008a64:	4939      	ldr	r1, [pc, #228]	; (8008b4c <set_firmware_info+0x298>)
 8008a66:	461a      	mov	r2, r3
 8008a68:	460b      	mov	r3, r1
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	8013      	strh	r3, [r2, #0]
		  if(indx < INFO_FIRMWARE_KEY_SIZE-1)	 strcat(lfs_read_buffer, ",");
 8008a6e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	dc0e      	bgt.n	8008a94 <set_firmware_info+0x1e0>
 8008a76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7f7 fb66 	bl	800014c <strlen>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008a88:	4413      	add	r3, r2
 8008a8a:	4933      	ldr	r1, [pc, #204]	; (8008b58 <set_firmware_info+0x2a4>)
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	460b      	mov	r3, r1
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	8013      	strh	r3, [r2, #0]
	for(int indx = 0 ; indx < INFO_FIRMWARE_KEY_SIZE; indx++)
 8008a94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008a98:	3301      	adds	r3, #1
 8008a9a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008a9e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	f77f af23 	ble.w	80088ee <set_firmware_info+0x3a>
	}
	strcat(lfs_read_buffer, (char*)"}");
 8008aa8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7f7 fb4d 	bl	800014c <strlen>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008aba:	4413      	add	r3, r2
 8008abc:	4927      	ldr	r1, [pc, #156]	; (8008b5c <set_firmware_info+0x2a8>)
 8008abe:	461a      	mov	r2, r3
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	8013      	strh	r3, [r2, #0]

#ifdef DEBUG
	printf("set_store_info :  new firmware string : %s\n", lfs_read_buffer);
 8008ac6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008aca:	4619      	mov	r1, r3
 8008acc:	4824      	ldr	r0, [pc, #144]	; (8008b60 <set_firmware_info+0x2ac>)
 8008ace:	f002 ff5f 	bl	800b990 <iprintf>
#endif

	if( lfs_file_open(&littlefs, &file, FIRMWARE_INFO_FILE_NAME, LFS_O_RDWR | LFS_O_CREAT ) < 0 )
 8008ad2:	f107 010c 	add.w	r1, r7, #12
 8008ad6:	f240 1303 	movw	r3, #259	; 0x103
 8008ada:	4a22      	ldr	r2, [pc, #136]	; (8008b64 <set_firmware_info+0x2b0>)
 8008adc:	4822      	ldr	r0, [pc, #136]	; (8008b68 <set_firmware_info+0x2b4>)
 8008ade:	f7fe fd29 	bl	8007534 <lfs_file_open>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da04      	bge.n	8008af2 <set_firmware_info+0x23e>
	{
#ifdef DEBUG
		  printf("set_store_info: fail to open %s from save_info\n", FIRMWARE_INFO_FILE_NAME);	while(1);
 8008ae8:	491e      	ldr	r1, [pc, #120]	; (8008b64 <set_firmware_info+0x2b0>)
 8008aea:	4820      	ldr	r0, [pc, #128]	; (8008b6c <set_firmware_info+0x2b8>)
 8008aec:	f002 ff50 	bl	800b990 <iprintf>
 8008af0:	e7fe      	b.n	8008af0 <set_firmware_info+0x23c>
#endif
	}
	else
	{
		  if(lfs_file_write(&littlefs, &file, lfs_read_buffer, strlen(lfs_read_buffer)) < strlen(lfs_read_buffer))
 8008af2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f7 fb28 	bl	800014c <strlen>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008b02:	f107 010c 	add.w	r1, r7, #12
 8008b06:	4818      	ldr	r0, [pc, #96]	; (8008b68 <set_firmware_info+0x2b4>)
 8008b08:	f7fe fda4 	bl	8007654 <lfs_file_write>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461c      	mov	r4, r3
 8008b10:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7f7 fb19 	bl	800014c <strlen>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	d204      	bcs.n	8008b2a <set_firmware_info+0x276>
		  {
#ifdef DEBUG
			  printf("set_store_info :  fail to write new %s from main\n", FIRMWARE_INFO_FILE_NAME); while(1);
 8008b20:	4910      	ldr	r1, [pc, #64]	; (8008b64 <set_firmware_info+0x2b0>)
 8008b22:	4813      	ldr	r0, [pc, #76]	; (8008b70 <set_firmware_info+0x2bc>)
 8008b24:	f002 ff34 	bl	800b990 <iprintf>
 8008b28:	e7fe      	b.n	8008b28 <set_firmware_info+0x274>
#endif
		  }
		  else
		  {
			  success = 1 ;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		  }
		  lfs_file_close(&littlefs, &file);
 8008b30:	f107 030c 	add.w	r3, r7, #12
 8008b34:	4619      	mov	r1, r3
 8008b36:	480c      	ldr	r0, [pc, #48]	; (8008b68 <set_firmware_info+0x2b4>)
 8008b38:	f7fe fd30 	bl	800759c <lfs_file_close>
	}
    return success ;
 8008b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008b40:	b2db      	uxtb	r3, r3
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd90      	pop	{r4, r7, pc}
 8008b4c:	0800d7a0 	.word	0x0800d7a0
 8008b50:	0800dd54 	.word	0x0800dd54
 8008b54:	0800d7a4 	.word	0x0800d7a4
 8008b58:	0800d7a8 	.word	0x0800d7a8
 8008b5c:	0800d7ac 	.word	0x0800d7ac
 8008b60:	0800d9fc 	.word	0x0800d9fc
 8008b64:	0800d9e8 	.word	0x0800d9e8
 8008b68:	2000019c 	.word	0x2000019c
 8008b6c:	0800d7d8 	.word	0x0800d7d8
 8008b70:	0800d808 	.word	0x0800d808

08008b74 <firmware_write>:

static int firmware_write(uint8_t *buff, uint16_t size, uint32_t seek)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b0ab      	sub	sp, #172	; 0xac
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	817b      	strh	r3, [r7, #10]
	  lfs_file_t file ;
	  int write_size = -1 ;
 8008b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  char firmware_path[64];

	  memset(firmware_path, 0, sizeof(firmware_path));
 8008b8a:	f107 0310 	add.w	r3, r7, #16
 8008b8e:	2240      	movs	r2, #64	; 0x40
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f003 f852 	bl	800bc3c <memset>

	  strcpy(firmware_path, FIRMWARE_DIR_NAME); strcat(firmware_path, FIRMWARE_FILE_NAME);
 8008b98:	f107 0310 	add.w	r3, r7, #16
 8008b9c:	4a27      	ldr	r2, [pc, #156]	; (8008c3c <firmware_write+0xc8>)
 8008b9e:	461c      	mov	r4, r3
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ba4:	c407      	stmia	r4!, {r0, r1, r2}
 8008ba6:	7023      	strb	r3, [r4, #0]
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f7 facd 	bl	800014c <strlen>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f107 0310 	add.w	r3, r7, #16
 8008bba:	4413      	add	r3, r2
 8008bbc:	4920      	ldr	r1, [pc, #128]	; (8008c40 <firmware_write+0xcc>)
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	cb03      	ldmia	r3!, {r0, r1}
 8008bc4:	6010      	str	r0, [r2, #0]
 8008bc6:	6051      	str	r1, [r2, #4]

	  if( lfs_file_open( &littlefs, &file, firmware_path, LFS_O_RDWR )  < 0 )
 8008bc8:	f107 0210 	add.w	r2, r7, #16
 8008bcc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	481c      	ldr	r0, [pc, #112]	; (8008c44 <firmware_write+0xd0>)
 8008bd4:	f7fe fcae 	bl	8007534 <lfs_file_open>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	da06      	bge.n	8008bec <firmware_write+0x78>
	  {
#ifdef DEBUG
		  printf("firmware_read :fail to open firmware dir %s \n", firmware_path); while(1);
 8008bde:	f107 0310 	add.w	r3, r7, #16
 8008be2:	4619      	mov	r1, r3
 8008be4:	4818      	ldr	r0, [pc, #96]	; (8008c48 <firmware_write+0xd4>)
 8008be6:	f002 fed3 	bl	800b990 <iprintf>
 8008bea:	e7fe      	b.n	8008bea <firmware_write+0x76>
#endif
	  }
	  else
	  {
		  write_size = lfs_file_write(&littlefs, &file, firmware_path, size) ;
 8008bec:	897b      	ldrh	r3, [r7, #10]
 8008bee:	f107 0210 	add.w	r2, r7, #16
 8008bf2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008bf6:	4813      	ldr	r0, [pc, #76]	; (8008c44 <firmware_write+0xd0>)
 8008bf8:	f7fe fd2c 	bl	8007654 <lfs_file_write>
 8008bfc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  if(write_size < 0)
 8008c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da04      	bge.n	8008c12 <firmware_write+0x9e>
		  {
#ifdef DEBUG
			  printf("firmware_write :  fail to write firmware at seek %lu seek \n", seek); while(1);
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	4810      	ldr	r0, [pc, #64]	; (8008c4c <firmware_write+0xd8>)
 8008c0c:	f002 fec0 	bl	800b990 <iprintf>
 8008c10:	e7fe      	b.n	8008c10 <firmware_write+0x9c>
#endif
		  }
		  else
		  {
#ifdef DEBUG
			  printf("firmware_read : successfully write %d byte at dir %s   \n", write_size, firmware_path);
 8008c12:	f107 0310 	add.w	r3, r7, #16
 8008c16:	461a      	mov	r2, r3
 8008c18:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c1c:	480c      	ldr	r0, [pc, #48]	; (8008c50 <firmware_write+0xdc>)
 8008c1e:	f002 feb7 	bl	800b990 <iprintf>
#endif
		  }
		  lfs_file_close(&littlefs, &file);
 8008c22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c26:	4619      	mov	r1, r3
 8008c28:	4806      	ldr	r0, [pc, #24]	; (8008c44 <firmware_write+0xd0>)
 8008c2a:	f7fe fcb7 	bl	800759c <lfs_file_close>
	  }
	  return write_size ;
 8008c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	37ac      	adds	r7, #172	; 0xac
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0800d4e0 	.word	0x0800d4e0
 8008c40:	0800da28 	.word	0x0800da28
 8008c44:	2000019c 	.word	0x2000019c
 8008c48:	0800da30 	.word	0x0800da30
 8008c4c:	0800da60 	.word	0x0800da60
 8008c50:	0800da9c 	.word	0x0800da9c

08008c54 <firmware_read>:
static int firmware_read(uint8_t *buff, uint16_t size, uint32_t seek)
{
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b0ab      	sub	sp, #172	; 0xac
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	817b      	strh	r3, [r7, #10]
	  lfs_file_t file ;
	  int read_size = -1 ;
 8008c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  char firmware_path[64];

	  memset(firmware_path, 0, sizeof(firmware_path));
 8008c6a:	f107 0310 	add.w	r3, r7, #16
 8008c6e:	2240      	movs	r2, #64	; 0x40
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f002 ffe2 	bl	800bc3c <memset>

	  strcpy(firmware_path, FIRMWARE_DIR_NAME); strcat(firmware_path, FIRMWARE_FILE_NAME);
 8008c78:	f107 0310 	add.w	r3, r7, #16
 8008c7c:	4a25      	ldr	r2, [pc, #148]	; (8008d14 <firmware_read+0xc0>)
 8008c7e:	461c      	mov	r4, r3
 8008c80:	4613      	mov	r3, r2
 8008c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c84:	c407      	stmia	r4!, {r0, r1, r2}
 8008c86:	7023      	strb	r3, [r4, #0]
 8008c88:	f107 0310 	add.w	r3, r7, #16
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 fa5d 	bl	800014c <strlen>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	f107 0310 	add.w	r3, r7, #16
 8008c9a:	4413      	add	r3, r2
 8008c9c:	491e      	ldr	r1, [pc, #120]	; (8008d18 <firmware_read+0xc4>)
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	cb03      	ldmia	r3!, {r0, r1}
 8008ca4:	6010      	str	r0, [r2, #0]
 8008ca6:	6051      	str	r1, [r2, #4]

	  if( lfs_file_open( &littlefs, &file, firmware_path, LFS_O_RDWR )  < 0 )
 8008ca8:	f107 0210 	add.w	r2, r7, #16
 8008cac:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	481a      	ldr	r0, [pc, #104]	; (8008d1c <firmware_read+0xc8>)
 8008cb4:	f7fe fc3e 	bl	8007534 <lfs_file_open>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da06      	bge.n	8008ccc <firmware_read+0x78>
	  {
#ifdef DEBUG
		  printf("firmware_read :fail to open firmware dir %s \n", firmware_path); while(1);
 8008cbe:	f107 0310 	add.w	r3, r7, #16
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4816      	ldr	r0, [pc, #88]	; (8008d20 <firmware_read+0xcc>)
 8008cc6:	f002 fe63 	bl	800b990 <iprintf>
 8008cca:	e7fe      	b.n	8008cca <firmware_read+0x76>
#endif
	  }
	  else
	  {
		  read_size = lfs_file_read(&littlefs, &file, buff, size) ;
 8008ccc:	897b      	ldrh	r3, [r7, #10]
 8008cce:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4811      	ldr	r0, [pc, #68]	; (8008d1c <firmware_read+0xc8>)
 8008cd6:	f7fe fc8d 	bl	80075f4 <lfs_file_read>
 8008cda:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		  if(read_size < 0 )
 8008cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	da04      	bge.n	8008cf0 <firmware_read+0x9c>
		  {
#ifdef DEBUG
			  printf("firmware_read : fail to read firmware at seek %lu \n", seek); while(1);
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	480e      	ldr	r0, [pc, #56]	; (8008d24 <firmware_read+0xd0>)
 8008cea:	f002 fe51 	bl	800b990 <iprintf>
 8008cee:	e7fe      	b.n	8008cee <firmware_read+0x9a>
#endif
		  }
		  else
		  {
#ifdef DEBUG
			  printf("firmware_read : successfully read from %s   \n", firmware_path);
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	480c      	ldr	r0, [pc, #48]	; (8008d28 <firmware_read+0xd4>)
 8008cf8:	f002 fe4a 	bl	800b990 <iprintf>
#endif
		  }
		  lfs_file_close(&littlefs, &file);
 8008cfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d00:	4619      	mov	r1, r3
 8008d02:	4806      	ldr	r0, [pc, #24]	; (8008d1c <firmware_read+0xc8>)
 8008d04:	f7fe fc4a 	bl	800759c <lfs_file_close>
	  }
	  return read_size ;
 8008d08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	37ac      	adds	r7, #172	; 0xac
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd90      	pop	{r4, r7, pc}
 8008d14:	0800d4e0 	.word	0x0800d4e0
 8008d18:	0800da28 	.word	0x0800da28
 8008d1c:	2000019c 	.word	0x2000019c
 8008d20:	0800da30 	.word	0x0800da30
 8008d24:	0800dad8 	.word	0x0800dad8
 8008d28:	0800db0c 	.word	0x0800db0c

08008d2c <firmware_delete_dir>:
static Storage_error_t firmware_delete_dir()
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
	return STORAGE_OK ;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <SPIF_Lock>:
#define SPIF_STATUS3_HOLD (1 << 7)

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
	while (Handle->Lock)
 8008d42:	e002      	b.n	8008d4a <SPIF_Lock+0x10>
	{
		SPIF_Delay(1);
 8008d44:	2001      	movs	r0, #1
 8008d46:	f000 fd81 	bl	800984c <HAL_Delay>
	while (Handle->Lock)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	7b1b      	ldrb	r3, [r3, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f8      	bne.n	8008d44 <SPIF_Lock+0xa>
	}
	Handle->Lock = 1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	731a      	strb	r2, [r3, #12]
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	Handle->Lock = 0;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	731a      	strb	r2, [r3, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr

08008d78 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6858      	ldr	r0, [r3, #4]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4619      	mov	r1, r3
 8008d92:	f000 ffe7 	bl	8009d64 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	e002      	b.n	8008da2 <SPIF_CsPin+0x2a>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	ddf9      	ble.n	8008d9c <SPIF_CsPin+0x24>
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b088      	sub	sp, #32
 8008db6:	af02      	add	r7, sp, #8
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
 8008dbe:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
	if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	68b9      	ldr	r1, [r7, #8]
 8008dd6:	f001 fecc 	bl	800ab72 <HAL_SPI_TransmitReceive>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <SPIF_TransmitReceive+0x32>
	{
		retVal = true;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
				break;
      }
		}
	}
#endif
	return retVal;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
	if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68b9      	ldr	r1, [r7, #8]
 8008e0c:	f001 fc56 	bl	800a6bc <HAL_SPI_Transmit>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <SPIF_Transmit+0x2c>
	{
		retVal = true;
 8008e16:	2301      	movs	r3, #1
 8008e18:	75fb      	strb	r3, [r7, #23]
				break;
      }
		}
	}
#endif
	return retVal;
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 8008e32:	2300      	movs	r3, #0
 8008e34:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
	if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68b9      	ldr	r1, [r7, #8]
 8008e42:	f001 fd7e 	bl	800a942 <HAL_SPI_Receive>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <SPIF_Receive+0x2c>
	{
		retVal = true;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	75fb      	strb	r3, [r7, #23]
				break;
      }
		}
	}
#endif
	return retVal;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
	bool retVal = true;
 8008e62:	2301      	movs	r3, #1
 8008e64:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8008e66:	2306      	movs	r3, #6
 8008e68:	733b      	strb	r3, [r7, #12]
	SPIF_CsPin(Handle, 0);
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff83 	bl	8008d78 <SPIF_CsPin>
	if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8008e72:	f107 010c 	add.w	r1, r7, #12
 8008e76:	2364      	movs	r3, #100	; 0x64
 8008e78:	2201      	movs	r2, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff ffb7 	bl	8008dee <SPIF_Transmit>
 8008e80:	4603      	mov	r3, r0
 8008e82:	f083 0301 	eor.w	r3, r3, #1
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <SPIF_WriteEnable+0x36>
	{
		retVal = false;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
		dprintf("SPIF_WriteEnable() Error\r\n");
	}
	SPIF_CsPin(Handle, 1);
 8008e90:	2101      	movs	r1, #1
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f7ff ff70 	bl	8008d78 <SPIF_CsPin>
	return retVal;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
	bool retVal = true;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8008eae:	2304      	movs	r3, #4
 8008eb0:	733b      	strb	r3, [r7, #12]
	SPIF_CsPin(Handle, 0);
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff ff5f 	bl	8008d78 <SPIF_CsPin>
	if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8008eba:	f107 010c 	add.w	r1, r7, #12
 8008ebe:	2364      	movs	r3, #100	; 0x64
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff93 	bl	8008dee <SPIF_Transmit>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f083 0301 	eor.w	r3, r3, #1
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <SPIF_WriteDisable+0x36>
	{
		retVal = false;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
		dprintf("SPIF_WriteDisable() Error\r\n");
	}
	SPIF_CsPin(Handle, 1);
 8008ed8:	2101      	movs	r1, #1
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff ff4c 	bl	8008d78 <SPIF_CsPin>
	return retVal;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b086      	sub	sp, #24
 8008eee:	af02      	add	r7, sp, #8
 8008ef0:	6078      	str	r0, [r7, #4]
	uint8_t retVal = 0;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8008ef6:	f24a 5305 	movw	r3, #42245	; 0xa505
 8008efa:	81bb      	strh	r3, [r7, #12]
	uint8_t rx[2];
	SPIF_CsPin(Handle, 0);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff ff3a 	bl	8008d78 <SPIF_CsPin>
	if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8008f04:	f107 0208 	add.w	r2, r7, #8
 8008f08:	f107 010c 	add.w	r1, r7, #12
 8008f0c:	2364      	movs	r3, #100	; 0x64
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	2302      	movs	r3, #2
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ff4d 	bl	8008db2 <SPIF_TransmitReceive>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <SPIF_ReadReg1+0x38>
	{
		retVal = rx[1];
 8008f1e:	7a7b      	ldrb	r3, [r7, #9]
 8008f20:	73fb      	strb	r3, [r7, #15]
	}
	SPIF_CsPin(Handle, 1);
 8008f22:	2101      	movs	r1, #1
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ff27 	bl	8008d78 <SPIF_CsPin>
	return retVal;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	bool retVal = false;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]
	uint32_t startTime = HAL_GetTick();
 8008f42:	f000 fc79 	bl	8009838 <HAL_GetTick>
 8008f46:	60b8      	str	r0, [r7, #8]
	while (1)
	{
		SPIF_Delay(1);
 8008f48:	2001      	movs	r0, #1
 8008f4a:	f000 fc7f 	bl	800984c <HAL_Delay>
		if (HAL_GetTick() - startTime >= Timeout)
 8008f4e:	f000 fc73 	bl	8009838 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	683a      	ldr	r2, [r7, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d90a      	bls.n	8008f74 <SPIF_WaitForWriting+0x40>
		{
			dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
			break;
		}
		if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7ff ffc3 	bl	8008eea <SPIF_ReadReg1>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1ec      	bne.n	8008f48 <SPIF_WaitForWriting+0x14>
		{
			retVal = true;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
			break;
 8008f72:	e000      	b.n	8008f76 <SPIF_WaitForWriting+0x42>
			break;
 8008f74:	bf00      	nop
		}
	}
	return retVal;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	6078      	str	r0, [r7, #4]
	uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8008f88:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8008f8c:	613b      	str	r3, [r7, #16]
	uint8_t rx[4];
	bool retVal = false;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]
	do
	{
		dprintf("SPIF_FindChip()\r\n");
		SPIF_CsPin(Handle, 0);
 8008f92:	2100      	movs	r1, #0
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff feef 	bl	8008d78 <SPIF_CsPin>
		if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8008f9a:	f107 020c 	add.w	r2, r7, #12
 8008f9e:	f107 0110 	add.w	r1, r7, #16
 8008fa2:	2364      	movs	r3, #100	; 0x64
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	2304      	movs	r3, #4
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ff02 	bl	8008db2 <SPIF_TransmitReceive>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f083 0301 	eor.w	r3, r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <SPIF_FindChip+0x44>
		{
			SPIF_CsPin(Handle, 1);
 8008fba:	2101      	movs	r1, #1
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff fedb 	bl	8008d78 <SPIF_CsPin>
			break;
 8008fc2:	e165      	b.n	8009290 <SPIF_FindChip+0x310>
		}
		SPIF_CsPin(Handle, 1);
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff fed6 	bl	8008d78 <SPIF_CsPin>
		dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
		Handle->Manufactor = rx[1];
 8008fcc:	7b7a      	ldrb	r2, [r7, #13]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	721a      	strb	r2, [r3, #8]
		Handle->MemType = rx[2];
 8008fd2:	7bba      	ldrb	r2, [r7, #14]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	72da      	strb	r2, [r3, #11]
		Handle->Size = rx[3];
 8008fd8:	7bfa      	ldrb	r2, [r7, #15]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	725a      	strb	r2, [r3, #9]

		dprintf("SPIF MANUFACTURE: ");
		switch (Handle->Manufactor)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7a1b      	ldrb	r3, [r3, #8]
 8008fe2:	2bef      	cmp	r3, #239	; 0xef
 8008fe4:	f000 80e2 	beq.w	80091ac <SPIF_FindChip+0x22c>
 8008fe8:	2bef      	cmp	r3, #239	; 0xef
 8008fea:	f300 80db 	bgt.w	80091a4 <SPIF_FindChip+0x224>
 8008fee:	2bd5      	cmp	r3, #213	; 0xd5
 8008ff0:	f300 80d8 	bgt.w	80091a4 <SPIF_FindChip+0x224>
 8008ff4:	2bbf      	cmp	r3, #191	; 0xbf
 8008ff6:	da16      	bge.n	8009026 <SPIF_FindChip+0xa6>
 8008ff8:	2bad      	cmp	r3, #173	; 0xad
 8008ffa:	f000 80d9 	beq.w	80091b0 <SPIF_FindChip+0x230>
 8008ffe:	2bad      	cmp	r3, #173	; 0xad
 8009000:	f300 80d0 	bgt.w	80091a4 <SPIF_FindChip+0x224>
 8009004:	2ba1      	cmp	r3, #161	; 0xa1
 8009006:	f300 80cd 	bgt.w	80091a4 <SPIF_FindChip+0x224>
 800900a:	2b85      	cmp	r3, #133	; 0x85
 800900c:	da40      	bge.n	8009090 <SPIF_FindChip+0x110>
 800900e:	2b62      	cmp	r3, #98	; 0x62
 8009010:	f000 80d0 	beq.w	80091b4 <SPIF_FindChip+0x234>
 8009014:	2b62      	cmp	r3, #98	; 0x62
 8009016:	f300 80c5 	bgt.w	80091a4 <SPIF_FindChip+0x224>
 800901a:	2b20      	cmp	r3, #32
 800901c:	f300 80c0 	bgt.w	80091a0 <SPIF_FindChip+0x220>
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc77      	bgt.n	8009114 <SPIF_FindChip+0x194>
 8009024:	e0be      	b.n	80091a4 <SPIF_FindChip+0x224>
 8009026:	3bbf      	subs	r3, #191	; 0xbf
 8009028:	2b16      	cmp	r3, #22
 800902a:	f200 80bb 	bhi.w	80091a4 <SPIF_FindChip+0x224>
 800902e:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <SPIF_FindChip+0xb4>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	080091b9 	.word	0x080091b9
 8009038:	080091a5 	.word	0x080091a5
 800903c:	080091a5 	.word	0x080091a5
 8009040:	080091b9 	.word	0x080091b9
 8009044:	080091a5 	.word	0x080091a5
 8009048:	080091a5 	.word	0x080091a5
 800904c:	080091a5 	.word	0x080091a5
 8009050:	080091a5 	.word	0x080091a5
 8009054:	080091a5 	.word	0x080091a5
 8009058:	080091b9 	.word	0x080091b9
 800905c:	080091a5 	.word	0x080091a5
 8009060:	080091a5 	.word	0x080091a5
 8009064:	080091a5 	.word	0x080091a5
 8009068:	080091a5 	.word	0x080091a5
 800906c:	080091a5 	.word	0x080091a5
 8009070:	080091a5 	.word	0x080091a5
 8009074:	080091a5 	.word	0x080091a5
 8009078:	080091a5 	.word	0x080091a5
 800907c:	080091a5 	.word	0x080091a5
 8009080:	080091a5 	.word	0x080091a5
 8009084:	080091a5 	.word	0x080091a5
 8009088:	080091a5 	.word	0x080091a5
 800908c:	080091b9 	.word	0x080091b9
 8009090:	3b85      	subs	r3, #133	; 0x85
 8009092:	2b1c      	cmp	r3, #28
 8009094:	f200 8086 	bhi.w	80091a4 <SPIF_FindChip+0x224>
 8009098:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <SPIF_FindChip+0x120>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080091bd 	.word	0x080091bd
 80090a4:	080091a5 	.word	0x080091a5
 80090a8:	080091a5 	.word	0x080091a5
 80090ac:	080091a5 	.word	0x080091a5
 80090b0:	080091bd 	.word	0x080091bd
 80090b4:	080091a5 	.word	0x080091a5
 80090b8:	080091a5 	.word	0x080091a5
 80090bc:	080091bd 	.word	0x080091bd
 80090c0:	080091a5 	.word	0x080091a5
 80090c4:	080091a5 	.word	0x080091a5
 80090c8:	080091a5 	.word	0x080091a5
 80090cc:	080091a5 	.word	0x080091a5
 80090d0:	080091a5 	.word	0x080091a5
 80090d4:	080091a5 	.word	0x080091a5
 80090d8:	080091a5 	.word	0x080091a5
 80090dc:	080091a5 	.word	0x080091a5
 80090e0:	080091a5 	.word	0x080091a5
 80090e4:	080091a5 	.word	0x080091a5
 80090e8:	080091a5 	.word	0x080091a5
 80090ec:	080091a5 	.word	0x080091a5
 80090f0:	080091a5 	.word	0x080091a5
 80090f4:	080091a5 	.word	0x080091a5
 80090f8:	080091a5 	.word	0x080091a5
 80090fc:	080091a5 	.word	0x080091a5
 8009100:	080091a5 	.word	0x080091a5
 8009104:	080091a5 	.word	0x080091a5
 8009108:	080091a5 	.word	0x080091a5
 800910c:	080091a5 	.word	0x080091a5
 8009110:	080091bd 	.word	0x080091bd
 8009114:	3b01      	subs	r3, #1
 8009116:	2b1f      	cmp	r3, #31
 8009118:	d844      	bhi.n	80091a4 <SPIF_FindChip+0x224>
 800911a:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <SPIF_FindChip+0x1a0>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	080091c1 	.word	0x080091c1
 8009124:	080091a5 	.word	0x080091a5
 8009128:	080091a5 	.word	0x080091a5
 800912c:	080091c1 	.word	0x080091c1
 8009130:	080091a5 	.word	0x080091a5
 8009134:	080091a5 	.word	0x080091a5
 8009138:	080091a5 	.word	0x080091a5
 800913c:	080091a5 	.word	0x080091a5
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091a5 	.word	0x080091a5
 8009148:	080091a5 	.word	0x080091a5
 800914c:	080091a5 	.word	0x080091a5
 8009150:	080091a5 	.word	0x080091a5
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091a5 	.word	0x080091a5
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091a5 	.word	0x080091a5
 8009164:	080091a5 	.word	0x080091a5
 8009168:	080091a5 	.word	0x080091a5
 800916c:	080091a5 	.word	0x080091a5
 8009170:	080091a5 	.word	0x080091a5
 8009174:	080091a5 	.word	0x080091a5
 8009178:	080091a5 	.word	0x080091a5
 800917c:	080091a5 	.word	0x080091a5
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091a5 	.word	0x080091a5
 8009188:	080091a5 	.word	0x080091a5
 800918c:	080091c1 	.word	0x080091c1
 8009190:	080091a5 	.word	0x080091a5
 8009194:	080091a5 	.word	0x080091a5
 8009198:	080091a5 	.word	0x080091a5
 800919c:	080091c1 	.word	0x080091c1
 80091a0:	2b37      	cmp	r3, #55	; 0x37
 80091a2:	d00f      	beq.n	80091c4 <SPIF_FindChip+0x244>
			break;
		case SPIF_MANUFACTOR_PUYA:
			dprintf("PUYA");
			break;
		default:
			Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	721a      	strb	r2, [r3, #8]
			dprintf("ERROR");
			break;
 80091aa:	e00c      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091ac:	bf00      	nop
 80091ae:	e00a      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091b0:	bf00      	nop
 80091b2:	e008      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091b4:	bf00      	nop
 80091b6:	e006      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091b8:	bf00      	nop
 80091ba:	e004      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091bc:	bf00      	nop
 80091be:	e002      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091c0:	bf00      	nop
 80091c2:	e000      	b.n	80091c6 <SPIF_FindChip+0x246>
			break;
 80091c4:	bf00      	nop
		}
		dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
		dprintf(" - SIZE: ");
		switch (Handle->Size)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7a5b      	ldrb	r3, [r3, #9]
 80091ca:	3b11      	subs	r3, #17
 80091cc:	2b0f      	cmp	r3, #15
 80091ce:	d84e      	bhi.n	800926e <SPIF_FindChip+0x2ee>
 80091d0:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <SPIF_FindChip+0x258>)
 80091d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d6:	bf00      	nop
 80091d8:	08009219 	.word	0x08009219
 80091dc:	08009221 	.word	0x08009221
 80091e0:	08009229 	.word	0x08009229
 80091e4:	08009231 	.word	0x08009231
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009241 	.word	0x08009241
 80091f0:	08009249 	.word	0x08009249
 80091f4:	08009251 	.word	0x08009251
 80091f8:	0800925b 	.word	0x0800925b
 80091fc:	0800926f 	.word	0x0800926f
 8009200:	0800926f 	.word	0x0800926f
 8009204:	0800926f 	.word	0x0800926f
 8009208:	0800926f 	.word	0x0800926f
 800920c:	0800926f 	.word	0x0800926f
 8009210:	0800926f 	.word	0x0800926f
 8009214:	08009265 	.word	0x08009265
		{
		case SPIF_SIZE_1MBIT:
			Handle->BlockCnt = 2;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	61da      	str	r2, [r3, #28]
			dprintf("1 MBIT\r\n");
			break;
 800921e:	e02a      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_2MBIT:
			Handle->BlockCnt = 4;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2204      	movs	r2, #4
 8009224:	61da      	str	r2, [r3, #28]
			dprintf("2 MBIT\r\n");
			break;
 8009226:	e026      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_4MBIT:
			Handle->BlockCnt = 8;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2208      	movs	r2, #8
 800922c:	61da      	str	r2, [r3, #28]
			dprintf("4 MBIT\r\n");
			break;
 800922e:	e022      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_8MBIT:
			Handle->BlockCnt = 16;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2210      	movs	r2, #16
 8009234:	61da      	str	r2, [r3, #28]
			dprintf("8 MBIT\r\n");
			break;
 8009236:	e01e      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_16MBIT:
			Handle->BlockCnt = 32;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	61da      	str	r2, [r3, #28]
			dprintf("16 MBIT\r\n");
			break;
 800923e:	e01a      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_32MBIT:
			Handle->BlockCnt = 64;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2240      	movs	r2, #64	; 0x40
 8009244:	61da      	str	r2, [r3, #28]
			dprintf("32 MBIT\r\n");
			break;
 8009246:	e016      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_64MBIT:
			Handle->BlockCnt = 128;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2280      	movs	r2, #128	; 0x80
 800924c:	61da      	str	r2, [r3, #28]
			dprintf("64 MBIT\r\n");
			break;
 800924e:	e012      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_128MBIT:
			Handle->BlockCnt = 256;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009256:	61da      	str	r2, [r3, #28]
			dprintf("128 MBIT\r\n");
			break;
 8009258:	e00d      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_256MBIT:
			Handle->BlockCnt = 512;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009260:	61da      	str	r2, [r3, #28]
			dprintf("256 MBIT\r\n");
			break;
 8009262:	e008      	b.n	8009276 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_512MBIT:
			Handle->BlockCnt = 1024;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800926a:	61da      	str	r2, [r3, #28]
			dprintf("512 MBIT\r\n");
			break;
 800926c:	e003      	b.n	8009276 <SPIF_FindChip+0x2f6>
		default:
			Handle->Size = SPIF_SIZE_ERROR;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	725a      	strb	r2, [r3, #9]
			dprintf("ERROR\r\n");
			break;
 8009274:	bf00      	nop
		}

		Handle->SectorCnt = Handle->BlockCnt * 16;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	011a      	lsls	r2, r3, #4
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
		Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	031b      	lsls	r3, r3, #12
 8009286:	0a1a      	lsrs	r2, r3, #8
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	615a      	str	r2, [r3, #20]
		dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
		dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
		dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
		dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
		dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
		retVal = true;
 800928c:	2301      	movs	r3, #1
 800928e:	75fb      	strb	r3, [r7, #23]

	} while (0);

	return retVal;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop

0800929c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08a      	sub	sp, #40	; 0x28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 80092b0:	2300      	movs	r3, #0
 80092b2:	61fb      	str	r3, [r7, #28]
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80092ba:	61bb      	str	r3, [r7, #24]
	{
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
		uint32_t dbgTime = HAL_GetTick();
#endif
		dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
		if (PageNumber >= Handle->PageCnt)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	f080 808e 	bcs.w	80093e4 <SPIF_WriteFn+0x148>
		{
			dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
			break;
		}
		if (Offset >= SPIF_PAGE_SIZE)
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	2bff      	cmp	r3, #255	; 0xff
 80092cc:	f200 808c 	bhi.w	80093e8 <SPIF_WriteFn+0x14c>
		{
			dprintf("SPIF_WritePage() ERROR Offset\r\n");
			break;
		}
		if (Size > maximum)
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d901      	bls.n	80092dc <SPIF_WriteFn+0x40>
		{
			Size = maximum;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	603b      	str	r3, [r7, #0]
		}
		address = SPIF_PageToAddress(PageNumber) + Offset;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e2:	4413      	add	r3, r2
 80092e4:	61fb      	str	r3, [r7, #28]
#if SPIF_DEBUG == SPIF_DEBUG_FULL
			dprintf("SPIF WRITING {\r\n0x%02X", Data[0]);
			for (int i = 1; i < Size; i++)
 80092e6:	2301      	movs	r3, #1
 80092e8:	623b      	str	r3, [r7, #32]
 80092ea:	e002      	b.n	80092f2 <SPIF_WriteFn+0x56>
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	3301      	adds	r3, #1
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d8f8      	bhi.n	80092ec <SPIF_WriteFn+0x50>
				}
				dprintf(", 0x%02X", Data[i]);
			}
			dprintf("\r\n}\r\n");
#endif
		if (SPIF_WriteEnable(Handle) == false)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fdad 	bl	8008e5a <SPIF_WriteEnable>
 8009300:	4603      	mov	r3, r0
 8009302:	f083 0301 	eor.w	r3, r3, #1
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d16f      	bne.n	80093ec <SPIF_WriteFn+0x150>
		{
			break;
		}
		SPIF_CsPin(Handle, 0);
 800930c:	2100      	movs	r1, #0
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff fd32 	bl	8008d78 <SPIF_CsPin>
		if (Handle->BlockCnt >= 512)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800931c:	d322      	bcc.n	8009364 <SPIF_WriteFn+0xc8>
		{
			tx[0] = SPIF_CMD_PAGEPROG4ADD;
 800931e:	2312      	movs	r3, #18
 8009320:	743b      	strb	r3, [r7, #16]
			tx[1] = (address & 0xFF000000) >> 24;
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	0e1b      	lsrs	r3, r3, #24
 8009326:	b2db      	uxtb	r3, r3
 8009328:	747b      	strb	r3, [r7, #17]
			tx[2] = (address & 0x00FF0000) >> 16;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	b2db      	uxtb	r3, r3
 8009330:	74bb      	strb	r3, [r7, #18]
			tx[3] = (address & 0x0000FF00) >> 8;
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	b2db      	uxtb	r3, r3
 8009338:	74fb      	strb	r3, [r7, #19]
			tx[4] = (address & 0x000000FF);
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	753b      	strb	r3, [r7, #20]
			if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8009340:	f107 0110 	add.w	r1, r7, #16
 8009344:	2364      	movs	r3, #100	; 0x64
 8009346:	2205      	movs	r2, #5
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fd50 	bl	8008dee <SPIF_Transmit>
 800934e:	4603      	mov	r3, r0
 8009350:	f083 0301 	eor.w	r3, r3, #1
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d023      	beq.n	80093a2 <SPIF_WriteFn+0x106>
			{
				SPIF_CsPin(Handle, 1);
 800935a:	2101      	movs	r1, #1
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fd0b 	bl	8008d78 <SPIF_CsPin>
				break;
 8009362:	e044      	b.n	80093ee <SPIF_WriteFn+0x152>
			}
		}
		else
		{
			tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8009364:	2302      	movs	r3, #2
 8009366:	743b      	strb	r3, [r7, #16]
			tx[1] = (address & 0x00FF0000) >> 16;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	b2db      	uxtb	r3, r3
 800936e:	747b      	strb	r3, [r7, #17]
			tx[2] = (address & 0x0000FF00) >> 8;
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	0a1b      	lsrs	r3, r3, #8
 8009374:	b2db      	uxtb	r3, r3
 8009376:	74bb      	strb	r3, [r7, #18]
			tx[3] = (address & 0x000000FF);
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	74fb      	strb	r3, [r7, #19]
			if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 800937e:	f107 0110 	add.w	r1, r7, #16
 8009382:	2364      	movs	r3, #100	; 0x64
 8009384:	2204      	movs	r2, #4
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fd31 	bl	8008dee <SPIF_Transmit>
 800938c:	4603      	mov	r3, r0
 800938e:	f083 0301 	eor.w	r3, r3, #1
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d004      	beq.n	80093a2 <SPIF_WriteFn+0x106>
			{
				SPIF_CsPin(Handle, 1);
 8009398:	2101      	movs	r1, #1
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff fcec 	bl	8008d78 <SPIF_CsPin>
				break;
 80093a0:	e025      	b.n	80093ee <SPIF_WriteFn+0x152>
			}
		}
		if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80093a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fd1f 	bl	8008dee <SPIF_Transmit>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f083 0301 	eor.w	r3, r3, #1
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <SPIF_WriteFn+0x12a>
		{
			SPIF_CsPin(Handle, 1);
 80093bc:	2101      	movs	r1, #1
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7ff fcda 	bl	8008d78 <SPIF_CsPin>
			break;
 80093c4:	e013      	b.n	80093ee <SPIF_WriteFn+0x152>
		}
		SPIF_CsPin(Handle, 1);
 80093c6:	2101      	movs	r1, #1
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff fcd5 	bl	8008d78 <SPIF_CsPin>
		if (SPIF_WaitForWriting(Handle, 100))
 80093ce:	2164      	movs	r1, #100	; 0x64
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f7ff fdaf 	bl	8008f34 <SPIF_WaitForWriting>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d008      	beq.n	80093ee <SPIF_WriteFn+0x152>
		{
			//dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
			retVal = true;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80093e2:	e004      	b.n	80093ee <SPIF_WriteFn+0x152>
			break;
 80093e4:	bf00      	nop
 80093e6:	e002      	b.n	80093ee <SPIF_WriteFn+0x152>
			break;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <SPIF_WriteFn+0x152>
			break;
 80093ec:	bf00      	nop
		}

	} while (0);

	SPIF_WriteDisable(Handle);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f7ff fd57 	bl	8008ea2 <SPIF_WriteDisable>
	return retVal;
 80093f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3728      	adds	r7, #40	; 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 800940e:	2300      	movs	r3, #0
 8009410:	77fb      	strb	r3, [r7, #31]
	{
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
		uint32_t dbgTime = HAL_GetTick();
#endif
		dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
		SPIF_CsPin(Handle, 0);
 8009412:	2100      	movs	r1, #0
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff fcaf 	bl	8008d78 <SPIF_CsPin>
		if (Handle->BlockCnt >= 512)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009422:	d322      	bcc.n	800946a <SPIF_ReadFn+0x6a>
		{
			tx[0] = SPIF_CMD_READDATA4ADD;
 8009424:	2313      	movs	r3, #19
 8009426:	743b      	strb	r3, [r7, #16]
			tx[1] = (Address & 0xFF000000) >> 24;
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	0e1b      	lsrs	r3, r3, #24
 800942c:	b2db      	uxtb	r3, r3
 800942e:	747b      	strb	r3, [r7, #17]
			tx[2] = (Address & 0x00FF0000) >> 16;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	0c1b      	lsrs	r3, r3, #16
 8009434:	b2db      	uxtb	r3, r3
 8009436:	74bb      	strb	r3, [r7, #18]
			tx[3] = (Address & 0x0000FF00) >> 8;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	0a1b      	lsrs	r3, r3, #8
 800943c:	b2db      	uxtb	r3, r3
 800943e:	74fb      	strb	r3, [r7, #19]
			tx[4] = (Address & 0x000000FF);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	753b      	strb	r3, [r7, #20]
			if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8009446:	f107 0110 	add.w	r1, r7, #16
 800944a:	2364      	movs	r3, #100	; 0x64
 800944c:	2205      	movs	r2, #5
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7ff fccd 	bl	8008dee <SPIF_Transmit>
 8009454:	4603      	mov	r3, r0
 8009456:	f083 0301 	eor.w	r3, r3, #1
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d023      	beq.n	80094a8 <SPIF_ReadFn+0xa8>
			{
				SPIF_CsPin(Handle, 1);
 8009460:	2101      	movs	r1, #1
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff fc88 	bl	8008d78 <SPIF_CsPin>
				break;
 8009468:	e040      	b.n	80094ec <SPIF_ReadFn+0xec>
			}
		}
		else
		{
			tx[0] = SPIF_CMD_READDATA3ADD;
 800946a:	2303      	movs	r3, #3
 800946c:	743b      	strb	r3, [r7, #16]
			tx[1] = (Address & 0x00FF0000) >> 16;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	0c1b      	lsrs	r3, r3, #16
 8009472:	b2db      	uxtb	r3, r3
 8009474:	747b      	strb	r3, [r7, #17]
			tx[2] = (Address & 0x0000FF00) >> 8;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	0a1b      	lsrs	r3, r3, #8
 800947a:	b2db      	uxtb	r3, r3
 800947c:	74bb      	strb	r3, [r7, #18]
			tx[3] = (Address & 0x000000FF);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	74fb      	strb	r3, [r7, #19]
			if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8009484:	f107 0110 	add.w	r1, r7, #16
 8009488:	2364      	movs	r3, #100	; 0x64
 800948a:	2204      	movs	r2, #4
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff fcae 	bl	8008dee <SPIF_Transmit>
 8009492:	4603      	mov	r3, r0
 8009494:	f083 0301 	eor.w	r3, r3, #1
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <SPIF_ReadFn+0xa8>
			{
				SPIF_CsPin(Handle, 1);
 800949e:	2101      	movs	r1, #1
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff fc69 	bl	8008d78 <SPIF_CsPin>
				break;
 80094a6:	e021      	b.n	80094ec <SPIF_ReadFn+0xec>
			}
		}
		if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 80094a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f7ff fcb7 	bl	8008e24 <SPIF_Receive>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f083 0301 	eor.w	r3, r3, #1
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <SPIF_ReadFn+0xcc>
		{
			SPIF_CsPin(Handle, 1);
 80094c2:	2101      	movs	r1, #1
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fc57 	bl	8008d78 <SPIF_CsPin>
			break;
 80094ca:	e00f      	b.n	80094ec <SPIF_ReadFn+0xec>
		}
		SPIF_CsPin(Handle, 1);
 80094cc:	2101      	movs	r1, #1
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7ff fc52 	bl	8008d78 <SPIF_CsPin>
		//dprintf("SPIF_ReadAddress() %d BYTES READ DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
#if SPIF_DEBUG == SPIF_DEBUG_FULL
		dprintf("{\r\n0x%02X", Data[0]);
		for (int i = 1; i < Size; i++)
 80094d4:	2301      	movs	r3, #1
 80094d6:	61bb      	str	r3, [r7, #24]
 80094d8:	e002      	b.n	80094e0 <SPIF_ReadFn+0xe0>
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	3301      	adds	r3, #1
 80094de:	61bb      	str	r3, [r7, #24]
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d8f8      	bhi.n	80094da <SPIF_ReadFn+0xda>
			}
			dprintf(", 0x%02X", Data[i]);
		}
		dprintf("\r\n}\r\n");
#endif
		retVal = true;
 80094e8:	2301      	movs	r3, #1
 80094ea:	77fb      	strb	r3, [r7, #31]

	} while (0);

	return retVal;
 80094ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <SPIF_Init>:
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/

bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	807b      	strh	r3, [r7, #2]
	bool retVal = false;
 8009506:	2300      	movs	r3, #0
 8009508:	75fb      	strb	r3, [r7, #23]
	do
	{
		if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d03d      	beq.n	800958c <SPIF_Init+0x94>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d03a      	beq.n	800958c <SPIF_Init+0x94>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d037      	beq.n	800958c <SPIF_Init+0x94>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	7a9b      	ldrb	r3, [r3, #10]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d033      	beq.n	800958c <SPIF_Init+0x94>
		{
			dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
			break;
		}
		memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8009524:	2220      	movs	r2, #32
 8009526:	2100      	movs	r1, #0
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f002 fb87 	bl	800bc3c <memset>
		Handle->HSpi = HSpi;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	601a      	str	r2, [r3, #0]
		Handle->Gpio = Gpio;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	605a      	str	r2, [r3, #4]
		Handle->Pin = Pin;
 800953a:	887a      	ldrh	r2, [r7, #2]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	611a      	str	r2, [r3, #16]
		SPIF_CsPin(Handle, 1);
 8009540:	2101      	movs	r1, #1
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fc18 	bl	8008d78 <SPIF_CsPin>
		/* wait for stable VCC */
		while (HAL_GetTick() < 20)
 8009548:	e002      	b.n	8009550 <SPIF_Init+0x58>
		{
			SPIF_Delay(1);
 800954a:	2001      	movs	r0, #1
 800954c:	f000 f97e 	bl	800984c <HAL_Delay>
		while (HAL_GetTick() < 20)
 8009550:	f000 f972 	bl	8009838 <HAL_GetTick>
 8009554:	4603      	mov	r3, r0
 8009556:	2b13      	cmp	r3, #19
 8009558:	d9f7      	bls.n	800954a <SPIF_Init+0x52>
		}
		if (SPIF_WriteDisable(Handle) == false)
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7ff fca1 	bl	8008ea2 <SPIF_WriteDisable>
 8009560:	4603      	mov	r3, r0
 8009562:	f083 0301 	eor.w	r3, r3, #1
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10e      	bne.n	800958a <SPIF_Init+0x92>
		{
			break;
		}
		retVal = SPIF_FindChip(Handle);
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7ff fd07 	bl	8008f80 <SPIF_FindChip>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
		if (retVal)
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d007      	beq.n	800958c <SPIF_Init+0x94>
		{
			Handle->Inited = 1;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	729a      	strb	r2, [r3, #10]
			dprintf("SPIF_Init() Done\r\n");
			printf("flash init ok \n");
 8009582:	4805      	ldr	r0, [pc, #20]	; (8009598 <SPIF_Init+0xa0>)
 8009584:	f002 fa6a 	bl	800ba5c <puts>
 8009588:	e000      	b.n	800958c <SPIF_Init+0x94>
			break;
 800958a:	bf00      	nop
		}

	} while (0);

	return retVal;
 800958c:	7dfb      	ldrb	r3, [r7, #23]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	0800db3c 	.word	0x0800db3c

0800959c <SPIF_EraseSector>:
}

/***********************************************************************************************************/

bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
	SPIF_Lock(Handle);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fbc7 	bl	8008d3a <SPIF_Lock>
	bool retVal = false;
 80095ac:	2300      	movs	r3, #0
 80095ae:	75fb      	strb	r3, [r7, #23]
	uint32_t address = Sector * SPIF_SECTOR_SIZE;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	031b      	lsls	r3, r3, #12
 80095b4:	613b      	str	r3, [r7, #16]
	{
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
		uint32_t dbgTime = HAL_GetTick();
#endif
		dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
		if (Sector >= Handle->SectorCnt)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d262      	bcs.n	8009686 <SPIF_EraseSector+0xea>
		{
			dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
			break;
		}
		if (SPIF_WriteEnable(Handle) == false)
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fc4a 	bl	8008e5a <SPIF_WriteEnable>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f083 0301 	eor.w	r3, r3, #1
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d15b      	bne.n	800968a <SPIF_EraseSector+0xee>
		{
			break;
		}
		SPIF_CsPin(Handle, 0);
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff fbcf 	bl	8008d78 <SPIF_CsPin>
		if (Handle->BlockCnt >= 512)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e2:	d322      	bcc.n	800962a <SPIF_EraseSector+0x8e>
		{
			tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80095e4:	2321      	movs	r3, #33	; 0x21
 80095e6:	723b      	strb	r3, [r7, #8]
			tx[1] = (address & 0xFF000000) >> 24;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	0e1b      	lsrs	r3, r3, #24
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	727b      	strb	r3, [r7, #9]
			tx[2] = (address & 0x00FF0000) >> 16;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	0c1b      	lsrs	r3, r3, #16
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	72bb      	strb	r3, [r7, #10]
			tx[3] = (address & 0x0000FF00) >> 8;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	0a1b      	lsrs	r3, r3, #8
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	72fb      	strb	r3, [r7, #11]
			tx[4] = (address & 0x000000FF);
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	733b      	strb	r3, [r7, #12]
			if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8009606:	f107 0108 	add.w	r1, r7, #8
 800960a:	2364      	movs	r3, #100	; 0x64
 800960c:	2205      	movs	r2, #5
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff fbed 	bl	8008dee <SPIF_Transmit>
 8009614:	4603      	mov	r3, r0
 8009616:	f083 0301 	eor.w	r3, r3, #1
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d023      	beq.n	8009668 <SPIF_EraseSector+0xcc>
			{
				SPIF_CsPin(Handle, 1);
 8009620:	2101      	movs	r1, #1
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff fba8 	bl	8008d78 <SPIF_CsPin>
				break;
 8009628:	e030      	b.n	800968c <SPIF_EraseSector+0xf0>
			}
		}
		else
		{
			tx[0] = SPIF_CMD_SECTORERASE3ADD;
 800962a:	2320      	movs	r3, #32
 800962c:	723b      	strb	r3, [r7, #8]
			tx[1] = (address & 0x00FF0000) >> 16;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	0c1b      	lsrs	r3, r3, #16
 8009632:	b2db      	uxtb	r3, r3
 8009634:	727b      	strb	r3, [r7, #9]
			tx[2] = (address & 0x0000FF00) >> 8;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	0a1b      	lsrs	r3, r3, #8
 800963a:	b2db      	uxtb	r3, r3
 800963c:	72bb      	strb	r3, [r7, #10]
			tx[3] = (address & 0x000000FF);
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	72fb      	strb	r3, [r7, #11]
			if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8009644:	f107 0108 	add.w	r1, r7, #8
 8009648:	2364      	movs	r3, #100	; 0x64
 800964a:	2204      	movs	r2, #4
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fbce 	bl	8008dee <SPIF_Transmit>
 8009652:	4603      	mov	r3, r0
 8009654:	f083 0301 	eor.w	r3, r3, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <SPIF_EraseSector+0xcc>
			{
				SPIF_CsPin(Handle, 1);
 800965e:	2101      	movs	r1, #1
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff fb89 	bl	8008d78 <SPIF_CsPin>
				break;
 8009666:	e011      	b.n	800968c <SPIF_EraseSector+0xf0>
			}
		}
		SPIF_CsPin(Handle, 1);
 8009668:	2101      	movs	r1, #1
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff fb84 	bl	8008d78 <SPIF_CsPin>
		if (SPIF_WaitForWriting(Handle, 1000))
 8009670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff fc5d 	bl	8008f34 <SPIF_WaitForWriting>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d005      	beq.n	800968c <SPIF_EraseSector+0xf0>
		{
			//dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
			retVal = true;
 8009680:	2301      	movs	r3, #1
 8009682:	75fb      	strb	r3, [r7, #23]
 8009684:	e002      	b.n	800968c <SPIF_EraseSector+0xf0>
			break;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <SPIF_EraseSector+0xf0>
			break;
 800968a:	bf00      	nop
		}

	} while (0);

	SPIF_WriteDisable(Handle);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fc08 	bl	8008ea2 <SPIF_WriteDisable>
	SPIF_UnLock(Handle);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff fb64 	bl	8008d60 <SPIF_UnLock>
	return retVal;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <SPIF_WriteAddress>:
}

/***********************************************************************************************************/

bool SPIF_WriteAddress(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b08e      	sub	sp, #56	; 0x38
 80096a6:	af02      	add	r7, sp, #8
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	603b      	str	r3, [r7, #0]
	SPIF_Lock(Handle);
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff fb42 	bl	8008d3a <SPIF_Lock>
	bool retVal = false;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t page, add, offset, remaining, length, maximum, index = 0;
 80096bc:	2300      	movs	r3, #0
 80096be:	61fb      	str	r3, [r7, #28]
	add = Address;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	62bb      	str	r3, [r7, #40]	; 0x28
	remaining = Size;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
	do
	{
		page = SPIF_AddressToPage(add);
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	61bb      	str	r3, [r7, #24]
		offset = add % SPIF_PAGE_SIZE;
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	617b      	str	r3, [r7, #20]
		maximum = SPIF_PAGE_SIZE - offset;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80096da:	613b      	str	r3, [r7, #16]
		if (remaining <= maximum)
 80096dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d802      	bhi.n	80096ea <SPIF_WriteAddress+0x48>
		{
			length = remaining;
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	623b      	str	r3, [r7, #32]
 80096e8:	e001      	b.n	80096ee <SPIF_WriteAddress+0x4c>
		}
		else
		{
			length = maximum;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	623b      	str	r3, [r7, #32]
		}
		if (SPIF_WriteFn(Handle, page, &Data[index], length, offset) == false)
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	441a      	add	r2, r3
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	69b9      	ldr	r1, [r7, #24]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff fdcd 	bl	800929c <SPIF_WriteFn>
 8009702:	4603      	mov	r3, r0
 8009704:	f083 0301 	eor.w	r3, r3, #1
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d116      	bne.n	800973c <SPIF_WriteAddress+0x9a>
		{
			break;
		}
		add += length;
 800970e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	4413      	add	r3, r2
 8009714:	62bb      	str	r3, [r7, #40]	; 0x28
		index += length;
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	4413      	add	r3, r2
 800971c:	61fb      	str	r3, [r7, #28]
		remaining -= length;
 800971e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
		if (remaining == 0)
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <SPIF_WriteAddress+0x92>
		{
			retVal = true;
 800972c:	2301      	movs	r3, #1
 800972e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009732:	e004      	b.n	800973e <SPIF_WriteAddress+0x9c>
		}

	} while (remaining > 0);
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1c6      	bne.n	80096c8 <SPIF_WriteAddress+0x26>
 800973a:	e000      	b.n	800973e <SPIF_WriteAddress+0x9c>
			break;
 800973c:	bf00      	nop

	SPIF_UnLock(Handle);
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7ff fb0e 	bl	8008d60 <SPIF_UnLock>
	return retVal;
 8009744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009748:	4618      	mov	r0, r3
 800974a:	3730      	adds	r7, #48	; 0x30
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <SPIF_ReadAddress>:
}

/***********************************************************************************************************/

bool SPIF_ReadAddress(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]
	SPIF_Lock(Handle);
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f7ff faeb 	bl	8008d3a <SPIF_Lock>
	bool retVal = false;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]
	retVal = SPIF_ReadFn(Handle, Address, Data, Size);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fe46 	bl	8009400 <SPIF_ReadFn>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]
	SPIF_UnLock(Handle);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff faf1 	bl	8008d60 <SPIF_UnLock>
	return retVal;
 800977e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800978c:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <HAL_Init+0x28>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a07      	ldr	r2, [pc, #28]	; (80097b0 <HAL_Init+0x28>)
 8009792:	f043 0310 	orr.w	r3, r3, #16
 8009796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009798:	2003      	movs	r0, #3
 800979a:	f000 f92b 	bl	80099f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800979e:	200f      	movs	r0, #15
 80097a0:	f000 f808 	bl	80097b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80097a4:	f7f6 fe76 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40022000 	.word	0x40022000

080097b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <HAL_InitTick+0x54>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	4b12      	ldr	r3, [pc, #72]	; (800980c <HAL_InitTick+0x58>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	4619      	mov	r1, r3
 80097c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80097ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f935 	bl	8009a42 <HAL_SYSTICK_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e00e      	b.n	8009800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b0f      	cmp	r3, #15
 80097e6:	d80a      	bhi.n	80097fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80097e8:	2200      	movs	r2, #0
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097f0:	f000 f90b 	bl	8009a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80097f4:	4a06      	ldr	r2, [pc, #24]	; (8009810 <HAL_InitTick+0x5c>)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	e000      	b.n	8009800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000000 	.word	0x20000000
 800980c:	2000007c 	.word	0x2000007c
 8009810:	20000078 	.word	0x20000078

08009814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009818:	4b05      	ldr	r3, [pc, #20]	; (8009830 <HAL_IncTick+0x1c>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	4b05      	ldr	r3, [pc, #20]	; (8009834 <HAL_IncTick+0x20>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4413      	add	r3, r2
 8009824:	4a03      	ldr	r2, [pc, #12]	; (8009834 <HAL_IncTick+0x20>)
 8009826:	6013      	str	r3, [r2, #0]
}
 8009828:	bf00      	nop
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr
 8009830:	2000007c 	.word	0x2000007c
 8009834:	20000234 	.word	0x20000234

08009838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
  return uwTick;
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <HAL_GetTick+0x10>)
 800983e:	681b      	ldr	r3, [r3, #0]
}
 8009840:	4618      	mov	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr
 8009848:	20000234 	.word	0x20000234

0800984c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009854:	f7ff fff0 	bl	8009838 <HAL_GetTick>
 8009858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009864:	d005      	beq.n	8009872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009866:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <HAL_Delay+0x44>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009872:	bf00      	nop
 8009874:	f7ff ffe0 	bl	8009838 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	429a      	cmp	r2, r3
 8009882:	d8f7      	bhi.n	8009874 <HAL_Delay+0x28>
  {
  }
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	2000007c 	.word	0x2000007c

08009894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80098a4:	4b0c      	ldr	r3, [pc, #48]	; (80098d8 <__NVIC_SetPriorityGrouping+0x44>)
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80098b0:	4013      	ands	r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80098bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80098c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80098c6:	4a04      	ldr	r2, [pc, #16]	; (80098d8 <__NVIC_SetPriorityGrouping+0x44>)
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	60d3      	str	r3, [r2, #12]
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bc80      	pop	{r7}
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	e000ed00 	.word	0xe000ed00

080098dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80098e0:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <__NVIC_GetPriorityGrouping+0x18>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	0a1b      	lsrs	r3, r3, #8
 80098e6:	f003 0307 	and.w	r3, r3, #7
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	e000ed00 	.word	0xe000ed00

080098f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009908:	2b00      	cmp	r3, #0
 800990a:	db0a      	blt.n	8009922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	b2da      	uxtb	r2, r3
 8009910:	490c      	ldr	r1, [pc, #48]	; (8009944 <__NVIC_SetPriority+0x4c>)
 8009912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009916:	0112      	lsls	r2, r2, #4
 8009918:	b2d2      	uxtb	r2, r2
 800991a:	440b      	add	r3, r1
 800991c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009920:	e00a      	b.n	8009938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	b2da      	uxtb	r2, r3
 8009926:	4908      	ldr	r1, [pc, #32]	; (8009948 <__NVIC_SetPriority+0x50>)
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	f003 030f 	and.w	r3, r3, #15
 800992e:	3b04      	subs	r3, #4
 8009930:	0112      	lsls	r2, r2, #4
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	440b      	add	r3, r1
 8009936:	761a      	strb	r2, [r3, #24]
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	e000e100 	.word	0xe000e100
 8009948:	e000ed00 	.word	0xe000ed00

0800994c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800994c:	b480      	push	{r7}
 800994e:	b089      	sub	sp, #36	; 0x24
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	f1c3 0307 	rsb	r3, r3, #7
 8009966:	2b04      	cmp	r3, #4
 8009968:	bf28      	it	cs
 800996a:	2304      	movcs	r3, #4
 800996c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	3304      	adds	r3, #4
 8009972:	2b06      	cmp	r3, #6
 8009974:	d902      	bls.n	800997c <NVIC_EncodePriority+0x30>
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	3b03      	subs	r3, #3
 800997a:	e000      	b.n	800997e <NVIC_EncodePriority+0x32>
 800997c:	2300      	movs	r3, #0
 800997e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	fa02 f303 	lsl.w	r3, r2, r3
 800998a:	43da      	mvns	r2, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	401a      	ands	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	fa01 f303 	lsl.w	r3, r1, r3
 800999e:	43d9      	mvns	r1, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099a4:	4313      	orrs	r3, r2
         );
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3724      	adds	r7, #36	; 0x24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bc80      	pop	{r7}
 80099ae:	4770      	bx	lr

080099b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099c0:	d301      	bcc.n	80099c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099c2:	2301      	movs	r3, #1
 80099c4:	e00f      	b.n	80099e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099c6:	4a0a      	ldr	r2, [pc, #40]	; (80099f0 <SysTick_Config+0x40>)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099ce:	210f      	movs	r1, #15
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099d4:	f7ff ff90 	bl	80098f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099d8:	4b05      	ldr	r3, [pc, #20]	; (80099f0 <SysTick_Config+0x40>)
 80099da:	2200      	movs	r2, #0
 80099dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <SysTick_Config+0x40>)
 80099e0:	2207      	movs	r2, #7
 80099e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	e000e010 	.word	0xe000e010

080099f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff ff49 	bl	8009894 <__NVIC_SetPriorityGrouping>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b086      	sub	sp, #24
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	4603      	mov	r3, r0
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009a1c:	f7ff ff5e 	bl	80098dc <__NVIC_GetPriorityGrouping>
 8009a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	68b9      	ldr	r1, [r7, #8]
 8009a26:	6978      	ldr	r0, [r7, #20]
 8009a28:	f7ff ff90 	bl	800994c <NVIC_EncodePriority>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a32:	4611      	mov	r1, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7ff ff5f 	bl	80098f8 <__NVIC_SetPriority>
}
 8009a3a:	bf00      	nop
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff ffb0 	bl	80099b0 <SysTick_Config>
 8009a50:	4603      	mov	r3, r0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b08b      	sub	sp, #44	; 0x2c
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a66:	2300      	movs	r3, #0
 8009a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a6e:	e169      	b.n	8009d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009a70:	2201      	movs	r2, #1
 8009a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a74:	fa02 f303 	lsl.w	r3, r2, r3
 8009a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	4013      	ands	r3, r2
 8009a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	f040 8158 	bne.w	8009d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	4a9a      	ldr	r2, [pc, #616]	; (8009cfc <HAL_GPIO_Init+0x2a0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d05e      	beq.n	8009b56 <HAL_GPIO_Init+0xfa>
 8009a98:	4a98      	ldr	r2, [pc, #608]	; (8009cfc <HAL_GPIO_Init+0x2a0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d875      	bhi.n	8009b8a <HAL_GPIO_Init+0x12e>
 8009a9e:	4a98      	ldr	r2, [pc, #608]	; (8009d00 <HAL_GPIO_Init+0x2a4>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d058      	beq.n	8009b56 <HAL_GPIO_Init+0xfa>
 8009aa4:	4a96      	ldr	r2, [pc, #600]	; (8009d00 <HAL_GPIO_Init+0x2a4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d86f      	bhi.n	8009b8a <HAL_GPIO_Init+0x12e>
 8009aaa:	4a96      	ldr	r2, [pc, #600]	; (8009d04 <HAL_GPIO_Init+0x2a8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d052      	beq.n	8009b56 <HAL_GPIO_Init+0xfa>
 8009ab0:	4a94      	ldr	r2, [pc, #592]	; (8009d04 <HAL_GPIO_Init+0x2a8>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d869      	bhi.n	8009b8a <HAL_GPIO_Init+0x12e>
 8009ab6:	4a94      	ldr	r2, [pc, #592]	; (8009d08 <HAL_GPIO_Init+0x2ac>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d04c      	beq.n	8009b56 <HAL_GPIO_Init+0xfa>
 8009abc:	4a92      	ldr	r2, [pc, #584]	; (8009d08 <HAL_GPIO_Init+0x2ac>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d863      	bhi.n	8009b8a <HAL_GPIO_Init+0x12e>
 8009ac2:	4a92      	ldr	r2, [pc, #584]	; (8009d0c <HAL_GPIO_Init+0x2b0>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d046      	beq.n	8009b56 <HAL_GPIO_Init+0xfa>
 8009ac8:	4a90      	ldr	r2, [pc, #576]	; (8009d0c <HAL_GPIO_Init+0x2b0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d85d      	bhi.n	8009b8a <HAL_GPIO_Init+0x12e>
 8009ace:	2b12      	cmp	r3, #18
 8009ad0:	d82a      	bhi.n	8009b28 <HAL_GPIO_Init+0xcc>
 8009ad2:	2b12      	cmp	r3, #18
 8009ad4:	d859      	bhi.n	8009b8a <HAL_GPIO_Init+0x12e>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <HAL_GPIO_Init+0x80>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b57 	.word	0x08009b57
 8009ae0:	08009b31 	.word	0x08009b31
 8009ae4:	08009b43 	.word	0x08009b43
 8009ae8:	08009b85 	.word	0x08009b85
 8009aec:	08009b8b 	.word	0x08009b8b
 8009af0:	08009b8b 	.word	0x08009b8b
 8009af4:	08009b8b 	.word	0x08009b8b
 8009af8:	08009b8b 	.word	0x08009b8b
 8009afc:	08009b8b 	.word	0x08009b8b
 8009b00:	08009b8b 	.word	0x08009b8b
 8009b04:	08009b8b 	.word	0x08009b8b
 8009b08:	08009b8b 	.word	0x08009b8b
 8009b0c:	08009b8b 	.word	0x08009b8b
 8009b10:	08009b8b 	.word	0x08009b8b
 8009b14:	08009b8b 	.word	0x08009b8b
 8009b18:	08009b8b 	.word	0x08009b8b
 8009b1c:	08009b8b 	.word	0x08009b8b
 8009b20:	08009b39 	.word	0x08009b39
 8009b24:	08009b4d 	.word	0x08009b4d
 8009b28:	4a79      	ldr	r2, [pc, #484]	; (8009d10 <HAL_GPIO_Init+0x2b4>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d013      	beq.n	8009b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009b2e:	e02c      	b.n	8009b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	623b      	str	r3, [r7, #32]
          break;
 8009b36:	e029      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	623b      	str	r3, [r7, #32]
          break;
 8009b40:	e024      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	3308      	adds	r3, #8
 8009b48:	623b      	str	r3, [r7, #32]
          break;
 8009b4a:	e01f      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	330c      	adds	r3, #12
 8009b52:	623b      	str	r3, [r7, #32]
          break;
 8009b54:	e01a      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d102      	bne.n	8009b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009b5e:	2304      	movs	r3, #4
 8009b60:	623b      	str	r3, [r7, #32]
          break;
 8009b62:	e013      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d105      	bne.n	8009b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	611a      	str	r2, [r3, #16]
          break;
 8009b76:	e009      	b.n	8009b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009b78:	2308      	movs	r3, #8
 8009b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	615a      	str	r2, [r3, #20]
          break;
 8009b82:	e003      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009b84:	2300      	movs	r3, #0
 8009b86:	623b      	str	r3, [r7, #32]
          break;
 8009b88:	e000      	b.n	8009b8c <HAL_GPIO_Init+0x130>
          break;
 8009b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2bff      	cmp	r3, #255	; 0xff
 8009b90:	d801      	bhi.n	8009b96 <HAL_GPIO_Init+0x13a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	e001      	b.n	8009b9a <HAL_GPIO_Init+0x13e>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2bff      	cmp	r3, #255	; 0xff
 8009ba0:	d802      	bhi.n	8009ba8 <HAL_GPIO_Init+0x14c>
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	e002      	b.n	8009bae <HAL_GPIO_Init+0x152>
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	3b08      	subs	r3, #8
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	210f      	movs	r1, #15
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	401a      	ands	r2, r3
 8009bc0:	6a39      	ldr	r1, [r7, #32]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 80b1 	beq.w	8009d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009bdc:	4b4d      	ldr	r3, [pc, #308]	; (8009d14 <HAL_GPIO_Init+0x2b8>)
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	4a4c      	ldr	r2, [pc, #304]	; (8009d14 <HAL_GPIO_Init+0x2b8>)
 8009be2:	f043 0301 	orr.w	r3, r3, #1
 8009be6:	6193      	str	r3, [r2, #24]
 8009be8:	4b4a      	ldr	r3, [pc, #296]	; (8009d14 <HAL_GPIO_Init+0x2b8>)
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f003 0301 	and.w	r3, r3, #1
 8009bf0:	60bb      	str	r3, [r7, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009bf4:	4a48      	ldr	r2, [pc, #288]	; (8009d18 <HAL_GPIO_Init+0x2bc>)
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	089b      	lsrs	r3, r3, #2
 8009bfa:	3302      	adds	r3, #2
 8009bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	f003 0303 	and.w	r3, r3, #3
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	220f      	movs	r2, #15
 8009c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c10:	43db      	mvns	r3, r3
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	4013      	ands	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a40      	ldr	r2, [pc, #256]	; (8009d1c <HAL_GPIO_Init+0x2c0>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d013      	beq.n	8009c48 <HAL_GPIO_Init+0x1ec>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a3f      	ldr	r2, [pc, #252]	; (8009d20 <HAL_GPIO_Init+0x2c4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00d      	beq.n	8009c44 <HAL_GPIO_Init+0x1e8>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a3e      	ldr	r2, [pc, #248]	; (8009d24 <HAL_GPIO_Init+0x2c8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d007      	beq.n	8009c40 <HAL_GPIO_Init+0x1e4>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a3d      	ldr	r2, [pc, #244]	; (8009d28 <HAL_GPIO_Init+0x2cc>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d101      	bne.n	8009c3c <HAL_GPIO_Init+0x1e0>
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e006      	b.n	8009c4a <HAL_GPIO_Init+0x1ee>
 8009c3c:	2304      	movs	r3, #4
 8009c3e:	e004      	b.n	8009c4a <HAL_GPIO_Init+0x1ee>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e002      	b.n	8009c4a <HAL_GPIO_Init+0x1ee>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <HAL_GPIO_Init+0x1ee>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4c:	f002 0203 	and.w	r2, r2, #3
 8009c50:	0092      	lsls	r2, r2, #2
 8009c52:	4093      	lsls	r3, r2
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009c5a:	492f      	ldr	r1, [pc, #188]	; (8009d18 <HAL_GPIO_Init+0x2bc>)
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	089b      	lsrs	r3, r3, #2
 8009c60:	3302      	adds	r3, #2
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009c74:	4b2d      	ldr	r3, [pc, #180]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009c76:	689a      	ldr	r2, [r3, #8]
 8009c78:	492c      	ldr	r1, [pc, #176]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	608b      	str	r3, [r1, #8]
 8009c80:	e006      	b.n	8009c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009c82:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	43db      	mvns	r3, r3
 8009c8a:	4928      	ldr	r1, [pc, #160]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d006      	beq.n	8009caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009c9c:	4b23      	ldr	r3, [pc, #140]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009c9e:	68da      	ldr	r2, [r3, #12]
 8009ca0:	4922      	ldr	r1, [pc, #136]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60cb      	str	r3, [r1, #12]
 8009ca8:	e006      	b.n	8009cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009caa:	4b20      	ldr	r3, [pc, #128]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	491e      	ldr	r1, [pc, #120]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d006      	beq.n	8009cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009cc4:	4b19      	ldr	r3, [pc, #100]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	4918      	ldr	r1, [pc, #96]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	604b      	str	r3, [r1, #4]
 8009cd0:	e006      	b.n	8009ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009cd2:	4b16      	ldr	r3, [pc, #88]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	4914      	ldr	r1, [pc, #80]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d021      	beq.n	8009d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009cec:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	490e      	ldr	r1, [pc, #56]	; (8009d2c <HAL_GPIO_Init+0x2d0>)
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	600b      	str	r3, [r1, #0]
 8009cf8:	e021      	b.n	8009d3e <HAL_GPIO_Init+0x2e2>
 8009cfa:	bf00      	nop
 8009cfc:	10320000 	.word	0x10320000
 8009d00:	10310000 	.word	0x10310000
 8009d04:	10220000 	.word	0x10220000
 8009d08:	10210000 	.word	0x10210000
 8009d0c:	10120000 	.word	0x10120000
 8009d10:	10110000 	.word	0x10110000
 8009d14:	40021000 	.word	0x40021000
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40010800 	.word	0x40010800
 8009d20:	40010c00 	.word	0x40010c00
 8009d24:	40011000 	.word	0x40011000
 8009d28:	40011400 	.word	0x40011400
 8009d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009d30:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <HAL_GPIO_Init+0x304>)
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	43db      	mvns	r3, r3
 8009d38:	4909      	ldr	r1, [pc, #36]	; (8009d60 <HAL_GPIO_Init+0x304>)
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	3301      	adds	r3, #1
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f47f ae8e 	bne.w	8009a70 <HAL_GPIO_Init+0x14>
  }
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	372c      	adds	r7, #44	; 0x2c
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bc80      	pop	{r7}
 8009d5e:	4770      	bx	lr
 8009d60:	40010400 	.word	0x40010400

08009d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	807b      	strh	r3, [r7, #2]
 8009d70:	4613      	mov	r3, r2
 8009d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009d74:	787b      	ldrb	r3, [r7, #1]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d7a:	887a      	ldrh	r2, [r7, #2]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009d80:	e003      	b.n	8009d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009d82:	887b      	ldrh	r3, [r7, #2]
 8009d84:	041a      	lsls	r2, r3, #16
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	611a      	str	r2, [r3, #16]
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr

08009d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e272      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 8087 	beq.w	8009ec2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009db4:	4b92      	ldr	r3, [pc, #584]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	f003 030c 	and.w	r3, r3, #12
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d00c      	beq.n	8009dda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009dc0:	4b8f      	ldr	r3, [pc, #572]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f003 030c 	and.w	r3, r3, #12
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d112      	bne.n	8009df2 <HAL_RCC_OscConfig+0x5e>
 8009dcc:	4b8c      	ldr	r3, [pc, #560]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dd8:	d10b      	bne.n	8009df2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dda:	4b89      	ldr	r3, [pc, #548]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d06c      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x12c>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d168      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e24c      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dfa:	d106      	bne.n	8009e0a <HAL_RCC_OscConfig+0x76>
 8009dfc:	4b80      	ldr	r3, [pc, #512]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a7f      	ldr	r2, [pc, #508]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	e02e      	b.n	8009e68 <HAL_RCC_OscConfig+0xd4>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10c      	bne.n	8009e2c <HAL_RCC_OscConfig+0x98>
 8009e12:	4b7b      	ldr	r3, [pc, #492]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a7a      	ldr	r2, [pc, #488]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	4b78      	ldr	r3, [pc, #480]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a77      	ldr	r2, [pc, #476]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	e01d      	b.n	8009e68 <HAL_RCC_OscConfig+0xd4>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e34:	d10c      	bne.n	8009e50 <HAL_RCC_OscConfig+0xbc>
 8009e36:	4b72      	ldr	r3, [pc, #456]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a71      	ldr	r2, [pc, #452]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	4b6f      	ldr	r3, [pc, #444]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a6e      	ldr	r2, [pc, #440]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	e00b      	b.n	8009e68 <HAL_RCC_OscConfig+0xd4>
 8009e50:	4b6b      	ldr	r3, [pc, #428]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a6a      	ldr	r2, [pc, #424]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	4b68      	ldr	r3, [pc, #416]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a67      	ldr	r2, [pc, #412]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d013      	beq.n	8009e98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e70:	f7ff fce2 	bl	8009838 <HAL_GetTick>
 8009e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e76:	e008      	b.n	8009e8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e78:	f7ff fcde 	bl	8009838 <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b64      	cmp	r3, #100	; 0x64
 8009e84:	d901      	bls.n	8009e8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e200      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e8a:	4b5d      	ldr	r3, [pc, #372]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0f0      	beq.n	8009e78 <HAL_RCC_OscConfig+0xe4>
 8009e96:	e014      	b.n	8009ec2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e98:	f7ff fcce 	bl	8009838 <HAL_GetTick>
 8009e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ea0:	f7ff fcca 	bl	8009838 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b64      	cmp	r3, #100	; 0x64
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e1ec      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eb2:	4b53      	ldr	r3, [pc, #332]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1f0      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x10c>
 8009ebe:	e000      	b.n	8009ec2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d063      	beq.n	8009f96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ece:	4b4c      	ldr	r3, [pc, #304]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	f003 030c 	and.w	r3, r3, #12
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00b      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009eda:	4b49      	ldr	r3, [pc, #292]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f003 030c 	and.w	r3, r3, #12
 8009ee2:	2b08      	cmp	r3, #8
 8009ee4:	d11c      	bne.n	8009f20 <HAL_RCC_OscConfig+0x18c>
 8009ee6:	4b46      	ldr	r3, [pc, #280]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d116      	bne.n	8009f20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ef2:	4b43      	ldr	r3, [pc, #268]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d005      	beq.n	8009f0a <HAL_RCC_OscConfig+0x176>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d001      	beq.n	8009f0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e1c0      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f0a:	4b3d      	ldr	r3, [pc, #244]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	4939      	ldr	r1, [pc, #228]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f1e:	e03a      	b.n	8009f96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d020      	beq.n	8009f6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f28:	4b36      	ldr	r3, [pc, #216]	; (800a004 <HAL_RCC_OscConfig+0x270>)
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f2e:	f7ff fc83 	bl	8009838 <HAL_GetTick>
 8009f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f34:	e008      	b.n	8009f48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f36:	f7ff fc7f 	bl	8009838 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e1a1      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0f0      	beq.n	8009f36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f54:	4b2a      	ldr	r3, [pc, #168]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	4927      	ldr	r1, [pc, #156]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	600b      	str	r3, [r1, #0]
 8009f68:	e015      	b.n	8009f96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f6a:	4b26      	ldr	r3, [pc, #152]	; (800a004 <HAL_RCC_OscConfig+0x270>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f70:	f7ff fc62 	bl	8009838 <HAL_GetTick>
 8009f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f76:	e008      	b.n	8009f8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f78:	f7ff fc5e 	bl	8009838 <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d901      	bls.n	8009f8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e180      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f8a:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0302 	and.w	r3, r3, #2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1f0      	bne.n	8009f78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0308 	and.w	r3, r3, #8
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d03a      	beq.n	800a018 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d019      	beq.n	8009fde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009faa:	4b17      	ldr	r3, [pc, #92]	; (800a008 <HAL_RCC_OscConfig+0x274>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fb0:	f7ff fc42 	bl	8009838 <HAL_GetTick>
 8009fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fb8:	f7ff fc3e 	bl	8009838 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e160      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fca:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <HAL_RCC_OscConfig+0x26c>)
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0f0      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	f000 face 	bl	800a578 <RCC_Delay>
 8009fdc:	e01c      	b.n	800a018 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fde:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <HAL_RCC_OscConfig+0x274>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fe4:	f7ff fc28 	bl	8009838 <HAL_GetTick>
 8009fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fea:	e00f      	b.n	800a00c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009fec:	f7ff fc24 	bl	8009838 <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d908      	bls.n	800a00c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e146      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
 8009ffe:	bf00      	nop
 800a000:	40021000 	.word	0x40021000
 800a004:	42420000 	.word	0x42420000
 800a008:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a00c:	4b92      	ldr	r3, [pc, #584]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1e9      	bne.n	8009fec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80a6 	beq.w	800a172 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a02a:	4b8b      	ldr	r3, [pc, #556]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10d      	bne.n	800a052 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a036:	4b88      	ldr	r3, [pc, #544]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	4a87      	ldr	r2, [pc, #540]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a03c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a040:	61d3      	str	r3, [r2, #28]
 800a042:	4b85      	ldr	r3, [pc, #532]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04a:	60bb      	str	r3, [r7, #8]
 800a04c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a04e:	2301      	movs	r3, #1
 800a050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a052:	4b82      	ldr	r3, [pc, #520]	; (800a25c <HAL_RCC_OscConfig+0x4c8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d118      	bne.n	800a090 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a05e:	4b7f      	ldr	r3, [pc, #508]	; (800a25c <HAL_RCC_OscConfig+0x4c8>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a7e      	ldr	r2, [pc, #504]	; (800a25c <HAL_RCC_OscConfig+0x4c8>)
 800a064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a06a:	f7ff fbe5 	bl	8009838 <HAL_GetTick>
 800a06e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a070:	e008      	b.n	800a084 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a072:	f7ff fbe1 	bl	8009838 <HAL_GetTick>
 800a076:	4602      	mov	r2, r0
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	1ad3      	subs	r3, r2, r3
 800a07c:	2b64      	cmp	r3, #100	; 0x64
 800a07e:	d901      	bls.n	800a084 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e103      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a084:	4b75      	ldr	r3, [pc, #468]	; (800a25c <HAL_RCC_OscConfig+0x4c8>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0f0      	beq.n	800a072 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d106      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x312>
 800a098:	4b6f      	ldr	r3, [pc, #444]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	4a6e      	ldr	r2, [pc, #440]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a09e:	f043 0301 	orr.w	r3, r3, #1
 800a0a2:	6213      	str	r3, [r2, #32]
 800a0a4:	e02d      	b.n	800a102 <HAL_RCC_OscConfig+0x36e>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10c      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x334>
 800a0ae:	4b6a      	ldr	r3, [pc, #424]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	4a69      	ldr	r2, [pc, #420]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0b4:	f023 0301 	bic.w	r3, r3, #1
 800a0b8:	6213      	str	r3, [r2, #32]
 800a0ba:	4b67      	ldr	r3, [pc, #412]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	4a66      	ldr	r2, [pc, #408]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0c0:	f023 0304 	bic.w	r3, r3, #4
 800a0c4:	6213      	str	r3, [r2, #32]
 800a0c6:	e01c      	b.n	800a102 <HAL_RCC_OscConfig+0x36e>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	2b05      	cmp	r3, #5
 800a0ce:	d10c      	bne.n	800a0ea <HAL_RCC_OscConfig+0x356>
 800a0d0:	4b61      	ldr	r3, [pc, #388]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	4a60      	ldr	r2, [pc, #384]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0d6:	f043 0304 	orr.w	r3, r3, #4
 800a0da:	6213      	str	r3, [r2, #32]
 800a0dc:	4b5e      	ldr	r3, [pc, #376]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0de:	6a1b      	ldr	r3, [r3, #32]
 800a0e0:	4a5d      	ldr	r2, [pc, #372]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	6213      	str	r3, [r2, #32]
 800a0e8:	e00b      	b.n	800a102 <HAL_RCC_OscConfig+0x36e>
 800a0ea:	4b5b      	ldr	r3, [pc, #364]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	4a5a      	ldr	r2, [pc, #360]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	6213      	str	r3, [r2, #32]
 800a0f6:	4b58      	ldr	r3, [pc, #352]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	4a57      	ldr	r2, [pc, #348]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a0fc:	f023 0304 	bic.w	r3, r3, #4
 800a100:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d015      	beq.n	800a136 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a10a:	f7ff fb95 	bl	8009838 <HAL_GetTick>
 800a10e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a110:	e00a      	b.n	800a128 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a112:	f7ff fb91 	bl	8009838 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a120:	4293      	cmp	r3, r2
 800a122:	d901      	bls.n	800a128 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e0b1      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a128:	4b4b      	ldr	r3, [pc, #300]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a12a:	6a1b      	ldr	r3, [r3, #32]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0ee      	beq.n	800a112 <HAL_RCC_OscConfig+0x37e>
 800a134:	e014      	b.n	800a160 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a136:	f7ff fb7f 	bl	8009838 <HAL_GetTick>
 800a13a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a13c:	e00a      	b.n	800a154 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a13e:	f7ff fb7b 	bl	8009838 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	f241 3288 	movw	r2, #5000	; 0x1388
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d901      	bls.n	800a154 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e09b      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a154:	4b40      	ldr	r3, [pc, #256]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ee      	bne.n	800a13e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d105      	bne.n	800a172 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a166:	4b3c      	ldr	r3, [pc, #240]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a168:	69db      	ldr	r3, [r3, #28]
 800a16a:	4a3b      	ldr	r2, [pc, #236]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a170:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 8087 	beq.w	800a28a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a17c:	4b36      	ldr	r3, [pc, #216]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f003 030c 	and.w	r3, r3, #12
 800a184:	2b08      	cmp	r3, #8
 800a186:	d061      	beq.n	800a24c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d146      	bne.n	800a21e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a190:	4b33      	ldr	r3, [pc, #204]	; (800a260 <HAL_RCC_OscConfig+0x4cc>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a196:	f7ff fb4f 	bl	8009838 <HAL_GetTick>
 800a19a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a19c:	e008      	b.n	800a1b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a19e:	f7ff fb4b 	bl	8009838 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d901      	bls.n	800a1b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e06d      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a1b0:	4b29      	ldr	r3, [pc, #164]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1f0      	bne.n	800a19e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c4:	d108      	bne.n	800a1d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a1c6:	4b24      	ldr	r3, [pc, #144]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	4921      	ldr	r1, [pc, #132]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1d8:	4b1f      	ldr	r3, [pc, #124]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a19      	ldr	r1, [r3, #32]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	430b      	orrs	r3, r1
 800a1ea:	491b      	ldr	r1, [pc, #108]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1f0:	4b1b      	ldr	r3, [pc, #108]	; (800a260 <HAL_RCC_OscConfig+0x4cc>)
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1f6:	f7ff fb1f 	bl	8009838 <HAL_GetTick>
 800a1fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a1fc:	e008      	b.n	800a210 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1fe:	f7ff fb1b 	bl	8009838 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e03d      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a210:	4b11      	ldr	r3, [pc, #68]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0f0      	beq.n	800a1fe <HAL_RCC_OscConfig+0x46a>
 800a21c:	e035      	b.n	800a28a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a21e:	4b10      	ldr	r3, [pc, #64]	; (800a260 <HAL_RCC_OscConfig+0x4cc>)
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a224:	f7ff fb08 	bl	8009838 <HAL_GetTick>
 800a228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a22a:	e008      	b.n	800a23e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a22c:	f7ff fb04 	bl	8009838 <HAL_GetTick>
 800a230:	4602      	mov	r2, r0
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2b02      	cmp	r3, #2
 800a238:	d901      	bls.n	800a23e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e026      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <HAL_RCC_OscConfig+0x4c4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1f0      	bne.n	800a22c <HAL_RCC_OscConfig+0x498>
 800a24a:	e01e      	b.n	800a28a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d107      	bne.n	800a264 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e019      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
 800a258:	40021000 	.word	0x40021000
 800a25c:	40007000 	.word	0x40007000
 800a260:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <HAL_RCC_OscConfig+0x500>)
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	429a      	cmp	r2, r3
 800a276:	d106      	bne.n	800a286 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a282:	429a      	cmp	r2, r3
 800a284:	d001      	beq.n	800a28a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e000      	b.n	800a28c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	40021000 	.word	0x40021000

0800a298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e0d0      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a2ac:	4b6a      	ldr	r3, [pc, #424]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0307 	and.w	r3, r3, #7
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d910      	bls.n	800a2dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ba:	4b67      	ldr	r3, [pc, #412]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f023 0207 	bic.w	r2, r3, #7
 800a2c2:	4965      	ldr	r1, [pc, #404]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ca:	4b63      	ldr	r3, [pc, #396]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d001      	beq.n	800a2dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e0b8      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d020      	beq.n	800a32a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d005      	beq.n	800a300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2f4:	4b59      	ldr	r3, [pc, #356]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	4a58      	ldr	r2, [pc, #352]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a2fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a2fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a30c:	4b53      	ldr	r3, [pc, #332]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	4a52      	ldr	r2, [pc, #328]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a318:	4b50      	ldr	r3, [pc, #320]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	494d      	ldr	r1, [pc, #308]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a326:	4313      	orrs	r3, r2
 800a328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d040      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d107      	bne.n	800a34e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a33e:	4b47      	ldr	r3, [pc, #284]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d115      	bne.n	800a376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e07f      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d107      	bne.n	800a366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a356:	4b41      	ldr	r3, [pc, #260]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e073      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a366:	4b3d      	ldr	r3, [pc, #244]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e06b      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a376:	4b39      	ldr	r3, [pc, #228]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f023 0203 	bic.w	r2, r3, #3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	4936      	ldr	r1, [pc, #216]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a384:	4313      	orrs	r3, r2
 800a386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a388:	f7ff fa56 	bl	8009838 <HAL_GetTick>
 800a38c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a38e:	e00a      	b.n	800a3a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a390:	f7ff fa52 	bl	8009838 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d901      	bls.n	800a3a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e053      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3a6:	4b2d      	ldr	r3, [pc, #180]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f003 020c 	and.w	r2, r3, #12
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d1eb      	bne.n	800a390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a3b8:	4b27      	ldr	r3, [pc, #156]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d210      	bcs.n	800a3e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3c6:	4b24      	ldr	r3, [pc, #144]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f023 0207 	bic.w	r2, r3, #7
 800a3ce:	4922      	ldr	r1, [pc, #136]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3d6:	4b20      	ldr	r3, [pc, #128]	; (800a458 <HAL_RCC_ClockConfig+0x1c0>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0307 	and.w	r3, r3, #7
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d001      	beq.n	800a3e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e032      	b.n	800a44e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d008      	beq.n	800a406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3f4:	4b19      	ldr	r3, [pc, #100]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	4916      	ldr	r1, [pc, #88]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a402:	4313      	orrs	r3, r2
 800a404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0308 	and.w	r3, r3, #8
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d009      	beq.n	800a426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	00db      	lsls	r3, r3, #3
 800a420:	490e      	ldr	r1, [pc, #56]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a422:	4313      	orrs	r3, r2
 800a424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a426:	f000 f821 	bl	800a46c <HAL_RCC_GetSysClockFreq>
 800a42a:	4602      	mov	r2, r0
 800a42c:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <HAL_RCC_ClockConfig+0x1c4>)
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	091b      	lsrs	r3, r3, #4
 800a432:	f003 030f 	and.w	r3, r3, #15
 800a436:	490a      	ldr	r1, [pc, #40]	; (800a460 <HAL_RCC_ClockConfig+0x1c8>)
 800a438:	5ccb      	ldrb	r3, [r1, r3]
 800a43a:	fa22 f303 	lsr.w	r3, r2, r3
 800a43e:	4a09      	ldr	r2, [pc, #36]	; (800a464 <HAL_RCC_ClockConfig+0x1cc>)
 800a440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a442:	4b09      	ldr	r3, [pc, #36]	; (800a468 <HAL_RCC_ClockConfig+0x1d0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff f9b4 	bl	80097b4 <HAL_InitTick>

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	40022000 	.word	0x40022000
 800a45c:	40021000 	.word	0x40021000
 800a460:	0800db4c 	.word	0x0800db4c
 800a464:	20000000 	.word	0x20000000
 800a468:	20000078 	.word	0x20000078

0800a46c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]
 800a47a:	2300      	movs	r3, #0
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	2300      	movs	r3, #0
 800a480:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a486:	4b1e      	ldr	r3, [pc, #120]	; (800a500 <HAL_RCC_GetSysClockFreq+0x94>)
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f003 030c 	and.w	r3, r3, #12
 800a492:	2b04      	cmp	r3, #4
 800a494:	d002      	beq.n	800a49c <HAL_RCC_GetSysClockFreq+0x30>
 800a496:	2b08      	cmp	r3, #8
 800a498:	d003      	beq.n	800a4a2 <HAL_RCC_GetSysClockFreq+0x36>
 800a49a:	e027      	b.n	800a4ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a49c:	4b19      	ldr	r3, [pc, #100]	; (800a504 <HAL_RCC_GetSysClockFreq+0x98>)
 800a49e:	613b      	str	r3, [r7, #16]
      break;
 800a4a0:	e027      	b.n	800a4f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	0c9b      	lsrs	r3, r3, #18
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	4a17      	ldr	r2, [pc, #92]	; (800a508 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a4ac:	5cd3      	ldrb	r3, [r2, r3]
 800a4ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d010      	beq.n	800a4dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <HAL_RCC_GetSysClockFreq+0x94>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	0c5b      	lsrs	r3, r3, #17
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	4a11      	ldr	r2, [pc, #68]	; (800a50c <HAL_RCC_GetSysClockFreq+0xa0>)
 800a4c6:	5cd3      	ldrb	r3, [r2, r3]
 800a4c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a0d      	ldr	r2, [pc, #52]	; (800a504 <HAL_RCC_GetSysClockFreq+0x98>)
 800a4ce:	fb03 f202 	mul.w	r2, r3, r2
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	e004      	b.n	800a4e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a0c      	ldr	r2, [pc, #48]	; (800a510 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a4e0:	fb02 f303 	mul.w	r3, r2, r3
 800a4e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	613b      	str	r3, [r7, #16]
      break;
 800a4ea:	e002      	b.n	800a4f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a4ec:	4b05      	ldr	r3, [pc, #20]	; (800a504 <HAL_RCC_GetSysClockFreq+0x98>)
 800a4ee:	613b      	str	r3, [r7, #16]
      break;
 800a4f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4f2:	693b      	ldr	r3, [r7, #16]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	371c      	adds	r7, #28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40021000 	.word	0x40021000
 800a504:	007a1200 	.word	0x007a1200
 800a508:	0800dd90 	.word	0x0800dd90
 800a50c:	0800dda0 	.word	0x0800dda0
 800a510:	003d0900 	.word	0x003d0900

0800a514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a518:	4b02      	ldr	r3, [pc, #8]	; (800a524 <HAL_RCC_GetHCLKFreq+0x10>)
 800a51a:	681b      	ldr	r3, [r3, #0]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	46bd      	mov	sp, r7
 800a520:	bc80      	pop	{r7}
 800a522:	4770      	bx	lr
 800a524:	20000000 	.word	0x20000000

0800a528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a52c:	f7ff fff2 	bl	800a514 <HAL_RCC_GetHCLKFreq>
 800a530:	4602      	mov	r2, r0
 800a532:	4b05      	ldr	r3, [pc, #20]	; (800a548 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	0a1b      	lsrs	r3, r3, #8
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	4903      	ldr	r1, [pc, #12]	; (800a54c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a53e:	5ccb      	ldrb	r3, [r1, r3]
 800a540:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a544:	4618      	mov	r0, r3
 800a546:	bd80      	pop	{r7, pc}
 800a548:	40021000 	.word	0x40021000
 800a54c:	0800db5c 	.word	0x0800db5c

0800a550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a554:	f7ff ffde 	bl	800a514 <HAL_RCC_GetHCLKFreq>
 800a558:	4602      	mov	r2, r0
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	0adb      	lsrs	r3, r3, #11
 800a560:	f003 0307 	and.w	r3, r3, #7
 800a564:	4903      	ldr	r1, [pc, #12]	; (800a574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a566:	5ccb      	ldrb	r3, [r1, r3]
 800a568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40021000 	.word	0x40021000
 800a574:	0800db5c 	.word	0x0800db5c

0800a578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a580:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <RCC_Delay+0x34>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a0a      	ldr	r2, [pc, #40]	; (800a5b0 <RCC_Delay+0x38>)
 800a586:	fba2 2303 	umull	r2, r3, r2, r3
 800a58a:	0a5b      	lsrs	r3, r3, #9
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a594:	bf00      	nop
  }
  while (Delay --);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1e5a      	subs	r2, r3, #1
 800a59a:	60fa      	str	r2, [r7, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1f9      	bne.n	800a594 <RCC_Delay+0x1c>
}
 800a5a0:	bf00      	nop
 800a5a2:	bf00      	nop
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bc80      	pop	{r7}
 800a5aa:	4770      	bx	lr
 800a5ac:	20000000 	.word	0x20000000
 800a5b0:	10624dd3 	.word	0x10624dd3

0800a5b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e076      	b.n	800a6b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d108      	bne.n	800a5e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5d6:	d009      	beq.n	800a5ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	61da      	str	r2, [r3, #28]
 800a5de:	e005      	b.n	800a5ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7f5 ff76 	bl	80004f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2202      	movs	r2, #2
 800a610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a63e:	431a      	orrs	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f003 0301 	and.w	r3, r3, #1
 800a652:	431a      	orrs	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a670:	ea42 0103 	orr.w	r1, r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a678:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	0c1a      	lsrs	r2, r3, #16
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f002 0204 	and.w	r2, r2, #4
 800a692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69da      	ldr	r2, [r3, #28]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <HAL_SPI_Transmit+0x22>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e12d      	b.n	800a93a <HAL_SPI_Transmit+0x27e>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6e6:	f7ff f8a7 	bl	8009838 <HAL_GetTick>
 800a6ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a6ec:	88fb      	ldrh	r3, [r7, #6]
 800a6ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d002      	beq.n	800a702 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a700:	e116      	b.n	800a930 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <HAL_SPI_Transmit+0x52>
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a712:	e10d      	b.n	800a930 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2203      	movs	r2, #3
 800a718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	88fa      	ldrh	r2, [r7, #6]
 800a72c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	88fa      	ldrh	r2, [r7, #6]
 800a732:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a75a:	d10f      	bne.n	800a77c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a76a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a77a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a786:	2b40      	cmp	r3, #64	; 0x40
 800a788:	d007      	beq.n	800a79a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a2:	d14f      	bne.n	800a844 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <HAL_SPI_Transmit+0xf6>
 800a7ac:	8afb      	ldrh	r3, [r7, #22]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d142      	bne.n	800a838 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	1c9a      	adds	r2, r3, #2
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7d6:	e02f      	b.n	800a838 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d112      	bne.n	800a80c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	881a      	ldrh	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	1c9a      	adds	r2, r3, #2
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a800:	b29b      	uxth	r3, r3
 800a802:	3b01      	subs	r3, #1
 800a804:	b29a      	uxth	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	86da      	strh	r2, [r3, #54]	; 0x36
 800a80a:	e015      	b.n	800a838 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a80c:	f7ff f814 	bl	8009838 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d803      	bhi.n	800a824 <HAL_SPI_Transmit+0x168>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a822:	d102      	bne.n	800a82a <HAL_SPI_Transmit+0x16e>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800a82a:	2303      	movs	r3, #3
 800a82c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a836:	e07b      	b.n	800a930 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1ca      	bne.n	800a7d8 <HAL_SPI_Transmit+0x11c>
 800a842:	e050      	b.n	800a8e6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <HAL_SPI_Transmit+0x196>
 800a84c:	8afb      	ldrh	r3, [r7, #22]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d144      	bne.n	800a8dc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	330c      	adds	r3, #12
 800a85c:	7812      	ldrb	r2, [r2, #0]
 800a85e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a86e:	b29b      	uxth	r3, r3
 800a870:	3b01      	subs	r3, #1
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a878:	e030      	b.n	800a8dc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b02      	cmp	r3, #2
 800a886:	d113      	bne.n	800a8b0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	330c      	adds	r3, #12
 800a892:	7812      	ldrb	r2, [r2, #0]
 800a894:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8ae:	e015      	b.n	800a8dc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b0:	f7fe ffc2 	bl	8009838 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d803      	bhi.n	800a8c8 <HAL_SPI_Transmit+0x20c>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8c6:	d102      	bne.n	800a8ce <HAL_SPI_Transmit+0x212>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a8da:	e029      	b.n	800a930 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1c9      	bne.n	800a87a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fbcc 	bl	800b088 <SPI_EndRxTxTransaction>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a904:	2300      	movs	r3, #0
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d002      	beq.n	800a928 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	77fb      	strb	r3, [r7, #31]
 800a926:	e003      	b.n	800a930 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a938:	7ffb      	ldrb	r3, [r7, #31]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b088      	sub	sp, #32
 800a946:	af02      	add	r7, sp, #8
 800a948:	60f8      	str	r0, [r7, #12]
 800a94a:	60b9      	str	r1, [r7, #8]
 800a94c:	603b      	str	r3, [r7, #0]
 800a94e:	4613      	mov	r3, r2
 800a950:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d002      	beq.n	800a968 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800a962:	2302      	movs	r3, #2
 800a964:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a966:	e0fb      	b.n	800ab60 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a970:	d112      	bne.n	800a998 <HAL_SPI_Receive+0x56>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10e      	bne.n	800a998 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2204      	movs	r2, #4
 800a97e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a982:	88fa      	ldrh	r2, [r7, #6]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	68b9      	ldr	r1, [r7, #8]
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 f8ef 	bl	800ab72 <HAL_SPI_TransmitReceive>
 800a994:	4603      	mov	r3, r0
 800a996:	e0e8      	b.n	800ab6a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <HAL_SPI_Receive+0x64>
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	e0e1      	b.n	800ab6a <HAL_SPI_Receive+0x228>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9ae:	f7fe ff43 	bl	8009838 <HAL_GetTick>
 800a9b2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <HAL_SPI_Receive+0x7e>
 800a9ba:	88fb      	ldrh	r3, [r7, #6]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9c4:	e0cc      	b.n	800ab60 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2204      	movs	r2, #4
 800a9ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	88fa      	ldrh	r2, [r7, #6]
 800a9de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	88fa      	ldrh	r2, [r7, #6]
 800a9e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa0c:	d10f      	bne.n	800aa2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d007      	beq.n	800aa4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d16a      	bne.n	800ab2a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aa54:	e032      	b.n	800aabc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d115      	bne.n	800aa90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f103 020c 	add.w	r2, r3, #12
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa70:	7812      	ldrb	r2, [r2, #0]
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa8e:	e015      	b.n	800aabc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa90:	f7fe fed2 	bl	8009838 <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d803      	bhi.n	800aaa8 <HAL_SPI_Receive+0x166>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaa6:	d102      	bne.n	800aaae <HAL_SPI_Receive+0x16c>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800aaba:	e051      	b.n	800ab60 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1c7      	bne.n	800aa56 <HAL_SPI_Receive+0x114>
 800aac6:	e035      	b.n	800ab34 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d113      	bne.n	800aafe <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68da      	ldr	r2, [r3, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae0:	b292      	uxth	r2, r2
 800aae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	1c9a      	adds	r2, r3, #2
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aafc:	e015      	b.n	800ab2a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aafe:	f7fe fe9b 	bl	8009838 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d803      	bhi.n	800ab16 <HAL_SPI_Receive+0x1d4>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab14:	d102      	bne.n	800ab1c <HAL_SPI_Receive+0x1da>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ab28:	e01a      	b.n	800ab60 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1c9      	bne.n	800aac8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 fa53 	bl	800afe4 <SPI_EndRxTransaction>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2220      	movs	r2, #32
 800ab48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	75fb      	strb	r3, [r7, #23]
 800ab56:	e003      	b.n	800ab60 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b08c      	sub	sp, #48	; 0x30
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab80:	2301      	movs	r3, #1
 800ab82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d101      	bne.n	800ab98 <HAL_SPI_TransmitReceive+0x26>
 800ab94:	2302      	movs	r3, #2
 800ab96:	e198      	b.n	800aeca <HAL_SPI_TransmitReceive+0x358>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aba0:	f7fe fe4a 	bl	8009838 <HAL_GetTick>
 800aba4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800abb6:	887b      	ldrh	r3, [r7, #2]
 800abb8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800abba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d00f      	beq.n	800abe2 <HAL_SPI_TransmitReceive+0x70>
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abc8:	d107      	bne.n	800abda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d103      	bne.n	800abda <HAL_SPI_TransmitReceive+0x68>
 800abd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	d003      	beq.n	800abe2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800abda:	2302      	movs	r3, #2
 800abdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800abe0:	e16d      	b.n	800aebe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <HAL_SPI_TransmitReceive+0x82>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <HAL_SPI_TransmitReceive+0x82>
 800abee:	887b      	ldrh	r3, [r7, #2]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d103      	bne.n	800abfc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800abfa:	e160      	b.n	800aebe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d003      	beq.n	800ac10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2205      	movs	r2, #5
 800ac0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	887a      	ldrh	r2, [r7, #2]
 800ac20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	887a      	ldrh	r2, [r7, #2]
 800ac26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	887a      	ldrh	r2, [r7, #2]
 800ac32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	887a      	ldrh	r2, [r7, #2]
 800ac38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac50:	2b40      	cmp	r3, #64	; 0x40
 800ac52:	d007      	beq.n	800ac64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac6c:	d17c      	bne.n	800ad68 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <HAL_SPI_TransmitReceive+0x10a>
 800ac76:	8b7b      	ldrh	r3, [r7, #26]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d16a      	bne.n	800ad52 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac80:	881a      	ldrh	r2, [r3, #0]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac8c:	1c9a      	adds	r2, r3, #2
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aca0:	e057      	b.n	800ad52 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b02      	cmp	r3, #2
 800acae:	d11b      	bne.n	800ace8 <HAL_SPI_TransmitReceive+0x176>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d016      	beq.n	800ace8 <HAL_SPI_TransmitReceive+0x176>
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d113      	bne.n	800ace8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	881a      	ldrh	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd0:	1c9a      	adds	r2, r3, #2
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acda:	b29b      	uxth	r3, r3
 800acdc:	3b01      	subs	r3, #1
 800acde:	b29a      	uxth	r2, r3
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	f003 0301 	and.w	r3, r3, #1
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d119      	bne.n	800ad2a <HAL_SPI_TransmitReceive+0x1b8>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d014      	beq.n	800ad2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68da      	ldr	r2, [r3, #12]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0a:	b292      	uxth	r2, r2
 800ad0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	1c9a      	adds	r2, r3, #2
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad26:	2301      	movs	r3, #1
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad2a:	f7fe fd85 	bl	8009838 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d80b      	bhi.n	800ad52 <HAL_SPI_TransmitReceive+0x1e0>
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad40:	d007      	beq.n	800ad52 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800ad50:	e0b5      	b.n	800aebe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1a2      	bne.n	800aca2 <HAL_SPI_TransmitReceive+0x130>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d19d      	bne.n	800aca2 <HAL_SPI_TransmitReceive+0x130>
 800ad66:	e080      	b.n	800ae6a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_SPI_TransmitReceive+0x204>
 800ad70:	8b7b      	ldrh	r3, [r7, #26]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d16f      	bne.n	800ae56 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	330c      	adds	r3, #12
 800ad80:	7812      	ldrb	r2, [r2, #0]
 800ad82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad9c:	e05b      	b.n	800ae56 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 0302 	and.w	r3, r3, #2
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d11c      	bne.n	800ade6 <HAL_SPI_TransmitReceive+0x274>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d017      	beq.n	800ade6 <HAL_SPI_TransmitReceive+0x274>
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d114      	bne.n	800ade6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	7812      	ldrb	r2, [r2, #0]
 800adc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800add8:	b29b      	uxth	r3, r3
 800adda:	3b01      	subs	r3, #1
 800addc:	b29a      	uxth	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d119      	bne.n	800ae28 <HAL_SPI_TransmitReceive+0x2b6>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d014      	beq.n	800ae28 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68da      	ldr	r2, [r3, #12]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae24:	2301      	movs	r3, #1
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae28:	f7fe fd06 	bl	8009838 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d803      	bhi.n	800ae40 <HAL_SPI_TransmitReceive+0x2ce>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3e:	d102      	bne.n	800ae46 <HAL_SPI_TransmitReceive+0x2d4>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d107      	bne.n	800ae56 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800ae54:	e033      	b.n	800aebe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d19e      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x22c>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d199      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f90a 	bl	800b088 <SPI_EndRxTxTransaction>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d006      	beq.n	800ae88 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2220      	movs	r2, #32
 800ae84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ae86:	e01a      	b.n	800aebe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeb4:	e003      	b.n	800aebe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3730      	adds	r7, #48	; 0x30
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	4613      	mov	r3, r2
 800aee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aee4:	f7fe fca8 	bl	8009838 <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	1a9b      	subs	r3, r3, r2
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4413      	add	r3, r2
 800aef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aef4:	f7fe fca0 	bl	8009838 <HAL_GetTick>
 800aef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aefa:	4b39      	ldr	r3, [pc, #228]	; (800afe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	015b      	lsls	r3, r3, #5
 800af00:	0d1b      	lsrs	r3, r3, #20
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	fb02 f303 	mul.w	r3, r2, r3
 800af08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af0a:	e054      	b.n	800afb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af12:	d050      	beq.n	800afb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af14:	f7fe fc90 	bl	8009838 <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	429a      	cmp	r2, r3
 800af22:	d902      	bls.n	800af2a <SPI_WaitFlagStateUntilTimeout+0x56>
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d13d      	bne.n	800afa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af42:	d111      	bne.n	800af68 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af4c:	d004      	beq.n	800af58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af56:	d107      	bne.n	800af68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af70:	d10f      	bne.n	800af92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af80:	601a      	str	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2201      	movs	r2, #1
 800af96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e017      	b.n	800afd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d101      	bne.n	800afb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4013      	ands	r3, r2
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	bf0c      	ite	eq
 800afc6:	2301      	moveq	r3, #1
 800afc8:	2300      	movne	r3, #0
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d19b      	bne.n	800af0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3720      	adds	r7, #32
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000000 	.word	0x20000000

0800afe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af02      	add	r7, sp, #8
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aff8:	d111      	bne.n	800b01e <SPI_EndRxTransaction+0x3a>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b002:	d004      	beq.n	800b00e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00c:	d107      	bne.n	800b01e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b01c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b026:	d117      	bne.n	800b058 <SPI_EndRxTransaction+0x74>
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b030:	d112      	bne.n	800b058 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2200      	movs	r2, #0
 800b03a:	2101      	movs	r1, #1
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff ff49 	bl	800aed4 <SPI_WaitFlagStateUntilTimeout>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01a      	beq.n	800b07e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	f043 0220 	orr.w	r2, r3, #32
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e013      	b.n	800b080 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2200      	movs	r2, #0
 800b060:	2180      	movs	r1, #128	; 0x80
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff ff36 	bl	800aed4 <SPI_WaitFlagStateUntilTimeout>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b072:	f043 0220 	orr.w	r2, r3, #32
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e000      	b.n	800b080 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2200      	movs	r2, #0
 800b09c:	2180      	movs	r1, #128	; 0x80
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff ff18 	bl	800aed4 <SPI_WaitFlagStateUntilTimeout>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d007      	beq.n	800b0ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ae:	f043 0220 	orr.w	r2, r3, #32
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e000      	b.n	800b0bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e042      	b.n	800b15c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7f5 fa4e 	bl	800058c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2224      	movs	r2, #36	; 0x24
 800b0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68da      	ldr	r2, [r3, #12]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f91d 	bl	800b348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	691a      	ldr	r2, [r3, #16]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b11c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	695a      	ldr	r2, [r3, #20]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b12c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b13c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2220      	movs	r2, #32
 800b148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2220      	movs	r2, #32
 800b150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b08a      	sub	sp, #40	; 0x28
 800b168:	af02      	add	r7, sp, #8
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	4613      	mov	r3, r2
 800b172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b20      	cmp	r3, #32
 800b182:	d16d      	bne.n	800b260 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <HAL_UART_Transmit+0x2c>
 800b18a:	88fb      	ldrh	r3, [r7, #6]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e066      	b.n	800b262 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2221      	movs	r2, #33	; 0x21
 800b19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1a2:	f7fe fb49 	bl	8009838 <HAL_GetTick>
 800b1a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	88fa      	ldrh	r2, [r7, #6]
 800b1ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1bc:	d108      	bne.n	800b1d0 <HAL_UART_Transmit+0x6c>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d104      	bne.n	800b1d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	e003      	b.n	800b1d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1d8:	e02a      	b.n	800b230 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	2180      	movs	r1, #128	; 0x80
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f000 f840 	bl	800b26a <UART_WaitOnFlagUntilTimeout>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	e036      	b.n	800b262 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10b      	bne.n	800b212 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	3302      	adds	r3, #2
 800b20e:	61bb      	str	r3, [r7, #24]
 800b210:	e007      	b.n	800b222 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	781a      	ldrb	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	3301      	adds	r3, #1
 800b220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b226:	b29b      	uxth	r3, r3
 800b228:	3b01      	subs	r3, #1
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b234:	b29b      	uxth	r3, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1cf      	bne.n	800b1da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2200      	movs	r2, #0
 800b242:	2140      	movs	r1, #64	; 0x40
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f000 f810 	bl	800b26a <UART_WaitOnFlagUntilTimeout>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e006      	b.n	800b262 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	e000      	b.n	800b262 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b260:	2302      	movs	r3, #2
  }
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b090      	sub	sp, #64	; 0x40
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	603b      	str	r3, [r7, #0]
 800b276:	4613      	mov	r3, r2
 800b278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b27a:	e050      	b.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b282:	d04c      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <UART_WaitOnFlagUntilTimeout+0x30>
 800b28a:	f7fe fad5 	bl	8009838 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b296:	429a      	cmp	r2, r3
 800b298:	d241      	bcs.n	800b31e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	330c      	adds	r3, #12
 800b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	330c      	adds	r3, #12
 800b2b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2ba:	637a      	str	r2, [r7, #52]	; 0x34
 800b2bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e5      	bne.n	800b29a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3314      	adds	r3, #20
 800b2d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f023 0301 	bic.w	r3, r3, #1
 800b2e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ee:	623a      	str	r2, [r7, #32]
 800b2f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	69f9      	ldr	r1, [r7, #28]
 800b2f4:	6a3a      	ldr	r2, [r7, #32]
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e5      	bne.n	800b2ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2220      	movs	r2, #32
 800b306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e00f      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4013      	ands	r3, r2
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	bf0c      	ite	eq
 800b32e:	2301      	moveq	r3, #1
 800b330:	2300      	movne	r3, #0
 800b332:	b2db      	uxtb	r3, r3
 800b334:	461a      	mov	r2, r3
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d09f      	beq.n	800b27c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3740      	adds	r7, #64	; 0x40
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68da      	ldr	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	689a      	ldr	r2, [r3, #8]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	431a      	orrs	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	4313      	orrs	r3, r2
 800b376:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b382:	f023 030c 	bic.w	r3, r3, #12
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	6812      	ldr	r2, [r2, #0]
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	430b      	orrs	r3, r1
 800b38e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699a      	ldr	r2, [r3, #24]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a2c      	ldr	r2, [pc, #176]	; (800b45c <UART_SetConfig+0x114>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d103      	bne.n	800b3b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b3b0:	f7ff f8ce 	bl	800a550 <HAL_RCC_GetPCLK2Freq>
 800b3b4:	60f8      	str	r0, [r7, #12]
 800b3b6:	e002      	b.n	800b3be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b3b8:	f7ff f8b6 	bl	800a528 <HAL_RCC_GetPCLK1Freq>
 800b3bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009a      	lsls	r2, r3, #2
 800b3c8:	441a      	add	r2, r3
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d4:	4a22      	ldr	r2, [pc, #136]	; (800b460 <UART_SetConfig+0x118>)
 800b3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3da:	095b      	lsrs	r3, r3, #5
 800b3dc:	0119      	lsls	r1, r3, #4
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009a      	lsls	r2, r3, #2
 800b3e8:	441a      	add	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b3f4:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <UART_SetConfig+0x118>)
 800b3f6:	fba3 0302 	umull	r0, r3, r3, r2
 800b3fa:	095b      	lsrs	r3, r3, #5
 800b3fc:	2064      	movs	r0, #100	; 0x64
 800b3fe:	fb00 f303 	mul.w	r3, r0, r3
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	3332      	adds	r3, #50	; 0x32
 800b408:	4a15      	ldr	r2, [pc, #84]	; (800b460 <UART_SetConfig+0x118>)
 800b40a:	fba2 2303 	umull	r2, r3, r2, r3
 800b40e:	095b      	lsrs	r3, r3, #5
 800b410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b414:	4419      	add	r1, r3
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4613      	mov	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	009a      	lsls	r2, r3, #2
 800b420:	441a      	add	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	fbb2 f2f3 	udiv	r2, r2, r3
 800b42c:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <UART_SetConfig+0x118>)
 800b42e:	fba3 0302 	umull	r0, r3, r3, r2
 800b432:	095b      	lsrs	r3, r3, #5
 800b434:	2064      	movs	r0, #100	; 0x64
 800b436:	fb00 f303 	mul.w	r3, r0, r3
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	3332      	adds	r3, #50	; 0x32
 800b440:	4a07      	ldr	r2, [pc, #28]	; (800b460 <UART_SetConfig+0x118>)
 800b442:	fba2 2303 	umull	r2, r3, r2, r3
 800b446:	095b      	lsrs	r3, r3, #5
 800b448:	f003 020f 	and.w	r2, r3, #15
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	440a      	add	r2, r1
 800b452:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b454:	bf00      	nop
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	40013800 	.word	0x40013800
 800b460:	51eb851f 	.word	0x51eb851f

0800b464 <__assert_func>:
 800b464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b466:	4614      	mov	r4, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <__assert_func+0x2c>)
 800b46c:	4605      	mov	r5, r0
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68d8      	ldr	r0, [r3, #12]
 800b472:	b14c      	cbz	r4, 800b488 <__assert_func+0x24>
 800b474:	4b07      	ldr	r3, [pc, #28]	; (800b494 <__assert_func+0x30>)
 800b476:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b47a:	9100      	str	r1, [sp, #0]
 800b47c:	462b      	mov	r3, r5
 800b47e:	4906      	ldr	r1, [pc, #24]	; (800b498 <__assert_func+0x34>)
 800b480:	f000 fa56 	bl	800b930 <fiprintf>
 800b484:	f000 fcb9 	bl	800bdfa <abort>
 800b488:	4b04      	ldr	r3, [pc, #16]	; (800b49c <__assert_func+0x38>)
 800b48a:	461c      	mov	r4, r3
 800b48c:	e7f3      	b.n	800b476 <__assert_func+0x12>
 800b48e:	bf00      	nop
 800b490:	200000d8 	.word	0x200000d8
 800b494:	0800dda2 	.word	0x0800dda2
 800b498:	0800ddaf 	.word	0x0800ddaf
 800b49c:	0800dddd 	.word	0x0800dddd

0800b4a0 <atoi>:
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	f000 b954 	b.w	800b750 <strtol>

0800b4a8 <__itoa>:
 800b4a8:	1e93      	subs	r3, r2, #2
 800b4aa:	2b22      	cmp	r3, #34	; 0x22
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	d904      	bls.n	800b4bc <__itoa+0x14>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	461c      	mov	r4, r3
 800b4b6:	700b      	strb	r3, [r1, #0]
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	bd10      	pop	{r4, pc}
 800b4bc:	2a0a      	cmp	r2, #10
 800b4be:	d109      	bne.n	800b4d4 <__itoa+0x2c>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	da07      	bge.n	800b4d4 <__itoa+0x2c>
 800b4c4:	232d      	movs	r3, #45	; 0x2d
 800b4c6:	700b      	strb	r3, [r1, #0]
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	4240      	negs	r0, r0
 800b4cc:	4421      	add	r1, r4
 800b4ce:	f000 f949 	bl	800b764 <__utoa>
 800b4d2:	e7f1      	b.n	800b4b8 <__itoa+0x10>
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	e7f9      	b.n	800b4cc <__itoa+0x24>

0800b4d8 <itoa>:
 800b4d8:	f7ff bfe6 	b.w	800b4a8 <__itoa>

0800b4dc <malloc>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <malloc+0xc>)
 800b4de:	4601      	mov	r1, r0
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f000 b82b 	b.w	800b53c <_malloc_r>
 800b4e6:	bf00      	nop
 800b4e8:	200000d8 	.word	0x200000d8

0800b4ec <free>:
 800b4ec:	4b02      	ldr	r3, [pc, #8]	; (800b4f8 <free+0xc>)
 800b4ee:	4601      	mov	r1, r0
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	f000 bc89 	b.w	800be08 <_free_r>
 800b4f6:	bf00      	nop
 800b4f8:	200000d8 	.word	0x200000d8

0800b4fc <sbrk_aligned>:
 800b4fc:	b570      	push	{r4, r5, r6, lr}
 800b4fe:	4e0e      	ldr	r6, [pc, #56]	; (800b538 <sbrk_aligned+0x3c>)
 800b500:	460c      	mov	r4, r1
 800b502:	6831      	ldr	r1, [r6, #0]
 800b504:	4605      	mov	r5, r0
 800b506:	b911      	cbnz	r1, 800b50e <sbrk_aligned+0x12>
 800b508:	f000 fc12 	bl	800bd30 <_sbrk_r>
 800b50c:	6030      	str	r0, [r6, #0]
 800b50e:	4621      	mov	r1, r4
 800b510:	4628      	mov	r0, r5
 800b512:	f000 fc0d 	bl	800bd30 <_sbrk_r>
 800b516:	1c43      	adds	r3, r0, #1
 800b518:	d00a      	beq.n	800b530 <sbrk_aligned+0x34>
 800b51a:	1cc4      	adds	r4, r0, #3
 800b51c:	f024 0403 	bic.w	r4, r4, #3
 800b520:	42a0      	cmp	r0, r4
 800b522:	d007      	beq.n	800b534 <sbrk_aligned+0x38>
 800b524:	1a21      	subs	r1, r4, r0
 800b526:	4628      	mov	r0, r5
 800b528:	f000 fc02 	bl	800bd30 <_sbrk_r>
 800b52c:	3001      	adds	r0, #1
 800b52e:	d101      	bne.n	800b534 <sbrk_aligned+0x38>
 800b530:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b534:	4620      	mov	r0, r4
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	2000023c 	.word	0x2000023c

0800b53c <_malloc_r>:
 800b53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b540:	1ccd      	adds	r5, r1, #3
 800b542:	f025 0503 	bic.w	r5, r5, #3
 800b546:	3508      	adds	r5, #8
 800b548:	2d0c      	cmp	r5, #12
 800b54a:	bf38      	it	cc
 800b54c:	250c      	movcc	r5, #12
 800b54e:	2d00      	cmp	r5, #0
 800b550:	4607      	mov	r7, r0
 800b552:	db01      	blt.n	800b558 <_malloc_r+0x1c>
 800b554:	42a9      	cmp	r1, r5
 800b556:	d905      	bls.n	800b564 <_malloc_r+0x28>
 800b558:	230c      	movs	r3, #12
 800b55a:	2600      	movs	r6, #0
 800b55c:	603b      	str	r3, [r7, #0]
 800b55e:	4630      	mov	r0, r6
 800b560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b638 <_malloc_r+0xfc>
 800b568:	f000 f868 	bl	800b63c <__malloc_lock>
 800b56c:	f8d8 3000 	ldr.w	r3, [r8]
 800b570:	461c      	mov	r4, r3
 800b572:	bb5c      	cbnz	r4, 800b5cc <_malloc_r+0x90>
 800b574:	4629      	mov	r1, r5
 800b576:	4638      	mov	r0, r7
 800b578:	f7ff ffc0 	bl	800b4fc <sbrk_aligned>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	4604      	mov	r4, r0
 800b580:	d155      	bne.n	800b62e <_malloc_r+0xf2>
 800b582:	f8d8 4000 	ldr.w	r4, [r8]
 800b586:	4626      	mov	r6, r4
 800b588:	2e00      	cmp	r6, #0
 800b58a:	d145      	bne.n	800b618 <_malloc_r+0xdc>
 800b58c:	2c00      	cmp	r4, #0
 800b58e:	d048      	beq.n	800b622 <_malloc_r+0xe6>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	4631      	mov	r1, r6
 800b594:	4638      	mov	r0, r7
 800b596:	eb04 0903 	add.w	r9, r4, r3
 800b59a:	f000 fbc9 	bl	800bd30 <_sbrk_r>
 800b59e:	4581      	cmp	r9, r0
 800b5a0:	d13f      	bne.n	800b622 <_malloc_r+0xe6>
 800b5a2:	6821      	ldr	r1, [r4, #0]
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	1a6d      	subs	r5, r5, r1
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7ff ffa7 	bl	800b4fc <sbrk_aligned>
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d037      	beq.n	800b622 <_malloc_r+0xe6>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	442b      	add	r3, r5
 800b5b6:	6023      	str	r3, [r4, #0]
 800b5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d038      	beq.n	800b632 <_malloc_r+0xf6>
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	42a2      	cmp	r2, r4
 800b5c4:	d12b      	bne.n	800b61e <_malloc_r+0xe2>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	605a      	str	r2, [r3, #4]
 800b5ca:	e00f      	b.n	800b5ec <_malloc_r+0xb0>
 800b5cc:	6822      	ldr	r2, [r4, #0]
 800b5ce:	1b52      	subs	r2, r2, r5
 800b5d0:	d41f      	bmi.n	800b612 <_malloc_r+0xd6>
 800b5d2:	2a0b      	cmp	r2, #11
 800b5d4:	d917      	bls.n	800b606 <_malloc_r+0xca>
 800b5d6:	1961      	adds	r1, r4, r5
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	6025      	str	r5, [r4, #0]
 800b5dc:	bf18      	it	ne
 800b5de:	6059      	strne	r1, [r3, #4]
 800b5e0:	6863      	ldr	r3, [r4, #4]
 800b5e2:	bf08      	it	eq
 800b5e4:	f8c8 1000 	streq.w	r1, [r8]
 800b5e8:	5162      	str	r2, [r4, r5]
 800b5ea:	604b      	str	r3, [r1, #4]
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f104 060b 	add.w	r6, r4, #11
 800b5f2:	f000 f829 	bl	800b648 <__malloc_unlock>
 800b5f6:	f026 0607 	bic.w	r6, r6, #7
 800b5fa:	1d23      	adds	r3, r4, #4
 800b5fc:	1af2      	subs	r2, r6, r3
 800b5fe:	d0ae      	beq.n	800b55e <_malloc_r+0x22>
 800b600:	1b9b      	subs	r3, r3, r6
 800b602:	50a3      	str	r3, [r4, r2]
 800b604:	e7ab      	b.n	800b55e <_malloc_r+0x22>
 800b606:	42a3      	cmp	r3, r4
 800b608:	6862      	ldr	r2, [r4, #4]
 800b60a:	d1dd      	bne.n	800b5c8 <_malloc_r+0x8c>
 800b60c:	f8c8 2000 	str.w	r2, [r8]
 800b610:	e7ec      	b.n	800b5ec <_malloc_r+0xb0>
 800b612:	4623      	mov	r3, r4
 800b614:	6864      	ldr	r4, [r4, #4]
 800b616:	e7ac      	b.n	800b572 <_malloc_r+0x36>
 800b618:	4634      	mov	r4, r6
 800b61a:	6876      	ldr	r6, [r6, #4]
 800b61c:	e7b4      	b.n	800b588 <_malloc_r+0x4c>
 800b61e:	4613      	mov	r3, r2
 800b620:	e7cc      	b.n	800b5bc <_malloc_r+0x80>
 800b622:	230c      	movs	r3, #12
 800b624:	4638      	mov	r0, r7
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	f000 f80e 	bl	800b648 <__malloc_unlock>
 800b62c:	e797      	b.n	800b55e <_malloc_r+0x22>
 800b62e:	6025      	str	r5, [r4, #0]
 800b630:	e7dc      	b.n	800b5ec <_malloc_r+0xb0>
 800b632:	605b      	str	r3, [r3, #4]
 800b634:	deff      	udf	#255	; 0xff
 800b636:	bf00      	nop
 800b638:	20000238 	.word	0x20000238

0800b63c <__malloc_lock>:
 800b63c:	4801      	ldr	r0, [pc, #4]	; (800b644 <__malloc_lock+0x8>)
 800b63e:	f000 bbc4 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800b642:	bf00      	nop
 800b644:	20000380 	.word	0x20000380

0800b648 <__malloc_unlock>:
 800b648:	4801      	ldr	r0, [pc, #4]	; (800b650 <__malloc_unlock+0x8>)
 800b64a:	f000 bbbf 	b.w	800bdcc <__retarget_lock_release_recursive>
 800b64e:	bf00      	nop
 800b650:	20000380 	.word	0x20000380

0800b654 <_strtol_l.constprop.0>:
 800b654:	2b01      	cmp	r3, #1
 800b656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65a:	4686      	mov	lr, r0
 800b65c:	4690      	mov	r8, r2
 800b65e:	d001      	beq.n	800b664 <_strtol_l.constprop.0+0x10>
 800b660:	2b24      	cmp	r3, #36	; 0x24
 800b662:	d906      	bls.n	800b672 <_strtol_l.constprop.0+0x1e>
 800b664:	f000 fb86 	bl	800bd74 <__errno>
 800b668:	2316      	movs	r3, #22
 800b66a:	6003      	str	r3, [r0, #0]
 800b66c:	2000      	movs	r0, #0
 800b66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b672:	460d      	mov	r5, r1
 800b674:	4835      	ldr	r0, [pc, #212]	; (800b74c <_strtol_l.constprop.0+0xf8>)
 800b676:	462a      	mov	r2, r5
 800b678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b67c:	5d06      	ldrb	r6, [r0, r4]
 800b67e:	f016 0608 	ands.w	r6, r6, #8
 800b682:	d1f8      	bne.n	800b676 <_strtol_l.constprop.0+0x22>
 800b684:	2c2d      	cmp	r4, #45	; 0x2d
 800b686:	d12e      	bne.n	800b6e6 <_strtol_l.constprop.0+0x92>
 800b688:	2601      	movs	r6, #1
 800b68a:	782c      	ldrb	r4, [r5, #0]
 800b68c:	1c95      	adds	r5, r2, #2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d057      	beq.n	800b742 <_strtol_l.constprop.0+0xee>
 800b692:	2b10      	cmp	r3, #16
 800b694:	d109      	bne.n	800b6aa <_strtol_l.constprop.0+0x56>
 800b696:	2c30      	cmp	r4, #48	; 0x30
 800b698:	d107      	bne.n	800b6aa <_strtol_l.constprop.0+0x56>
 800b69a:	782a      	ldrb	r2, [r5, #0]
 800b69c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b6a0:	2a58      	cmp	r2, #88	; 0x58
 800b6a2:	d149      	bne.n	800b738 <_strtol_l.constprop.0+0xe4>
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	786c      	ldrb	r4, [r5, #1]
 800b6a8:	3502      	adds	r5, #2
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b6b0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b6b4:	fbbc f9f3 	udiv	r9, ip, r3
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b6c2:	2f09      	cmp	r7, #9
 800b6c4:	d814      	bhi.n	800b6f0 <_strtol_l.constprop.0+0x9c>
 800b6c6:	463c      	mov	r4, r7
 800b6c8:	42a3      	cmp	r3, r4
 800b6ca:	dd20      	ble.n	800b70e <_strtol_l.constprop.0+0xba>
 800b6cc:	1c57      	adds	r7, r2, #1
 800b6ce:	d007      	beq.n	800b6e0 <_strtol_l.constprop.0+0x8c>
 800b6d0:	4581      	cmp	r9, r0
 800b6d2:	d319      	bcc.n	800b708 <_strtol_l.constprop.0+0xb4>
 800b6d4:	d101      	bne.n	800b6da <_strtol_l.constprop.0+0x86>
 800b6d6:	45a2      	cmp	sl, r4
 800b6d8:	db16      	blt.n	800b708 <_strtol_l.constprop.0+0xb4>
 800b6da:	2201      	movs	r2, #1
 800b6dc:	fb00 4003 	mla	r0, r0, r3, r4
 800b6e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6e4:	e7eb      	b.n	800b6be <_strtol_l.constprop.0+0x6a>
 800b6e6:	2c2b      	cmp	r4, #43	; 0x2b
 800b6e8:	bf04      	itt	eq
 800b6ea:	782c      	ldrbeq	r4, [r5, #0]
 800b6ec:	1c95      	addeq	r5, r2, #2
 800b6ee:	e7ce      	b.n	800b68e <_strtol_l.constprop.0+0x3a>
 800b6f0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b6f4:	2f19      	cmp	r7, #25
 800b6f6:	d801      	bhi.n	800b6fc <_strtol_l.constprop.0+0xa8>
 800b6f8:	3c37      	subs	r4, #55	; 0x37
 800b6fa:	e7e5      	b.n	800b6c8 <_strtol_l.constprop.0+0x74>
 800b6fc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b700:	2f19      	cmp	r7, #25
 800b702:	d804      	bhi.n	800b70e <_strtol_l.constprop.0+0xba>
 800b704:	3c57      	subs	r4, #87	; 0x57
 800b706:	e7df      	b.n	800b6c8 <_strtol_l.constprop.0+0x74>
 800b708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b70c:	e7e8      	b.n	800b6e0 <_strtol_l.constprop.0+0x8c>
 800b70e:	1c53      	adds	r3, r2, #1
 800b710:	d108      	bne.n	800b724 <_strtol_l.constprop.0+0xd0>
 800b712:	2322      	movs	r3, #34	; 0x22
 800b714:	4660      	mov	r0, ip
 800b716:	f8ce 3000 	str.w	r3, [lr]
 800b71a:	f1b8 0f00 	cmp.w	r8, #0
 800b71e:	d0a6      	beq.n	800b66e <_strtol_l.constprop.0+0x1a>
 800b720:	1e69      	subs	r1, r5, #1
 800b722:	e006      	b.n	800b732 <_strtol_l.constprop.0+0xde>
 800b724:	b106      	cbz	r6, 800b728 <_strtol_l.constprop.0+0xd4>
 800b726:	4240      	negs	r0, r0
 800b728:	f1b8 0f00 	cmp.w	r8, #0
 800b72c:	d09f      	beq.n	800b66e <_strtol_l.constprop.0+0x1a>
 800b72e:	2a00      	cmp	r2, #0
 800b730:	d1f6      	bne.n	800b720 <_strtol_l.constprop.0+0xcc>
 800b732:	f8c8 1000 	str.w	r1, [r8]
 800b736:	e79a      	b.n	800b66e <_strtol_l.constprop.0+0x1a>
 800b738:	2430      	movs	r4, #48	; 0x30
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1b5      	bne.n	800b6aa <_strtol_l.constprop.0+0x56>
 800b73e:	2308      	movs	r3, #8
 800b740:	e7b3      	b.n	800b6aa <_strtol_l.constprop.0+0x56>
 800b742:	2c30      	cmp	r4, #48	; 0x30
 800b744:	d0a9      	beq.n	800b69a <_strtol_l.constprop.0+0x46>
 800b746:	230a      	movs	r3, #10
 800b748:	e7af      	b.n	800b6aa <_strtol_l.constprop.0+0x56>
 800b74a:	bf00      	nop
 800b74c:	0800de04 	.word	0x0800de04

0800b750 <strtol>:
 800b750:	4613      	mov	r3, r2
 800b752:	460a      	mov	r2, r1
 800b754:	4601      	mov	r1, r0
 800b756:	4802      	ldr	r0, [pc, #8]	; (800b760 <strtol+0x10>)
 800b758:	6800      	ldr	r0, [r0, #0]
 800b75a:	f7ff bf7b 	b.w	800b654 <_strtol_l.constprop.0>
 800b75e:	bf00      	nop
 800b760:	200000d8 	.word	0x200000d8

0800b764 <__utoa>:
 800b764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b766:	b08b      	sub	sp, #44	; 0x2c
 800b768:	4605      	mov	r5, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	466e      	mov	r6, sp
 800b76e:	4c1d      	ldr	r4, [pc, #116]	; (800b7e4 <__utoa+0x80>)
 800b770:	f104 0c20 	add.w	ip, r4, #32
 800b774:	4637      	mov	r7, r6
 800b776:	6820      	ldr	r0, [r4, #0]
 800b778:	6861      	ldr	r1, [r4, #4]
 800b77a:	3408      	adds	r4, #8
 800b77c:	c703      	stmia	r7!, {r0, r1}
 800b77e:	4564      	cmp	r4, ip
 800b780:	463e      	mov	r6, r7
 800b782:	d1f7      	bne.n	800b774 <__utoa+0x10>
 800b784:	7921      	ldrb	r1, [r4, #4]
 800b786:	6820      	ldr	r0, [r4, #0]
 800b788:	7139      	strb	r1, [r7, #4]
 800b78a:	1e91      	subs	r1, r2, #2
 800b78c:	2922      	cmp	r1, #34	; 0x22
 800b78e:	6038      	str	r0, [r7, #0]
 800b790:	f04f 0100 	mov.w	r1, #0
 800b794:	d904      	bls.n	800b7a0 <__utoa+0x3c>
 800b796:	7019      	strb	r1, [r3, #0]
 800b798:	460b      	mov	r3, r1
 800b79a:	4618      	mov	r0, r3
 800b79c:	b00b      	add	sp, #44	; 0x2c
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a0:	1e58      	subs	r0, r3, #1
 800b7a2:	4684      	mov	ip, r0
 800b7a4:	fbb5 f7f2 	udiv	r7, r5, r2
 800b7a8:	fb02 5617 	mls	r6, r2, r7, r5
 800b7ac:	3628      	adds	r6, #40	; 0x28
 800b7ae:	446e      	add	r6, sp
 800b7b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b7b4:	460c      	mov	r4, r1
 800b7b6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b7ba:	462e      	mov	r6, r5
 800b7bc:	42b2      	cmp	r2, r6
 800b7be:	463d      	mov	r5, r7
 800b7c0:	f101 0101 	add.w	r1, r1, #1
 800b7c4:	d9ee      	bls.n	800b7a4 <__utoa+0x40>
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	545a      	strb	r2, [r3, r1]
 800b7ca:	1919      	adds	r1, r3, r4
 800b7cc:	1aa5      	subs	r5, r4, r2
 800b7ce:	42aa      	cmp	r2, r5
 800b7d0:	dae3      	bge.n	800b79a <__utoa+0x36>
 800b7d2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b7d6:	780e      	ldrb	r6, [r1, #0]
 800b7d8:	3201      	adds	r2, #1
 800b7da:	7006      	strb	r6, [r0, #0]
 800b7dc:	f801 5901 	strb.w	r5, [r1], #-1
 800b7e0:	e7f4      	b.n	800b7cc <__utoa+0x68>
 800b7e2:	bf00      	nop
 800b7e4:	0800ddde 	.word	0x0800ddde

0800b7e8 <std>:
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7f6:	6083      	str	r3, [r0, #8]
 800b7f8:	8181      	strh	r1, [r0, #12]
 800b7fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b7fc:	81c2      	strh	r2, [r0, #14]
 800b7fe:	6183      	str	r3, [r0, #24]
 800b800:	4619      	mov	r1, r3
 800b802:	2208      	movs	r2, #8
 800b804:	305c      	adds	r0, #92	; 0x5c
 800b806:	f000 fa19 	bl	800bc3c <memset>
 800b80a:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <std+0x58>)
 800b80c:	6224      	str	r4, [r4, #32]
 800b80e:	6263      	str	r3, [r4, #36]	; 0x24
 800b810:	4b0c      	ldr	r3, [pc, #48]	; (800b844 <std+0x5c>)
 800b812:	62a3      	str	r3, [r4, #40]	; 0x28
 800b814:	4b0c      	ldr	r3, [pc, #48]	; (800b848 <std+0x60>)
 800b816:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b818:	4b0c      	ldr	r3, [pc, #48]	; (800b84c <std+0x64>)
 800b81a:	6323      	str	r3, [r4, #48]	; 0x30
 800b81c:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <std+0x68>)
 800b81e:	429c      	cmp	r4, r3
 800b820:	d006      	beq.n	800b830 <std+0x48>
 800b822:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b826:	4294      	cmp	r4, r2
 800b828:	d002      	beq.n	800b830 <std+0x48>
 800b82a:	33d0      	adds	r3, #208	; 0xd0
 800b82c:	429c      	cmp	r4, r3
 800b82e:	d105      	bne.n	800b83c <std+0x54>
 800b830:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b838:	f000 bac6 	b.w	800bdc8 <__retarget_lock_init_recursive>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	bf00      	nop
 800b840:	0800ba6d 	.word	0x0800ba6d
 800b844:	0800ba8f 	.word	0x0800ba8f
 800b848:	0800bac7 	.word	0x0800bac7
 800b84c:	0800baeb 	.word	0x0800baeb
 800b850:	20000240 	.word	0x20000240

0800b854 <stdio_exit_handler>:
 800b854:	4a02      	ldr	r2, [pc, #8]	; (800b860 <stdio_exit_handler+0xc>)
 800b856:	4903      	ldr	r1, [pc, #12]	; (800b864 <stdio_exit_handler+0x10>)
 800b858:	4803      	ldr	r0, [pc, #12]	; (800b868 <stdio_exit_handler+0x14>)
 800b85a:	f000 b87b 	b.w	800b954 <_fwalk_sglue>
 800b85e:	bf00      	nop
 800b860:	20000080 	.word	0x20000080
 800b864:	0800c549 	.word	0x0800c549
 800b868:	2000008c 	.word	0x2000008c

0800b86c <cleanup_stdio>:
 800b86c:	6841      	ldr	r1, [r0, #4]
 800b86e:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <cleanup_stdio+0x34>)
 800b870:	b510      	push	{r4, lr}
 800b872:	4299      	cmp	r1, r3
 800b874:	4604      	mov	r4, r0
 800b876:	d001      	beq.n	800b87c <cleanup_stdio+0x10>
 800b878:	f000 fe66 	bl	800c548 <_fflush_r>
 800b87c:	68a1      	ldr	r1, [r4, #8]
 800b87e:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <cleanup_stdio+0x38>)
 800b880:	4299      	cmp	r1, r3
 800b882:	d002      	beq.n	800b88a <cleanup_stdio+0x1e>
 800b884:	4620      	mov	r0, r4
 800b886:	f000 fe5f 	bl	800c548 <_fflush_r>
 800b88a:	68e1      	ldr	r1, [r4, #12]
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <cleanup_stdio+0x3c>)
 800b88e:	4299      	cmp	r1, r3
 800b890:	d004      	beq.n	800b89c <cleanup_stdio+0x30>
 800b892:	4620      	mov	r0, r4
 800b894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b898:	f000 be56 	b.w	800c548 <_fflush_r>
 800b89c:	bd10      	pop	{r4, pc}
 800b89e:	bf00      	nop
 800b8a0:	20000240 	.word	0x20000240
 800b8a4:	200002a8 	.word	0x200002a8
 800b8a8:	20000310 	.word	0x20000310

0800b8ac <global_stdio_init.part.0>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <global_stdio_init.part.0+0x30>)
 800b8b0:	4c0b      	ldr	r4, [pc, #44]	; (800b8e0 <global_stdio_init.part.0+0x34>)
 800b8b2:	4a0c      	ldr	r2, [pc, #48]	; (800b8e4 <global_stdio_init.part.0+0x38>)
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	2104      	movs	r1, #4
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f7ff ff94 	bl	800b7e8 <std>
 800b8c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	2109      	movs	r1, #9
 800b8c8:	f7ff ff8e 	bl	800b7e8 <std>
 800b8cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d6:	2112      	movs	r1, #18
 800b8d8:	f7ff bf86 	b.w	800b7e8 <std>
 800b8dc:	20000378 	.word	0x20000378
 800b8e0:	20000240 	.word	0x20000240
 800b8e4:	0800b855 	.word	0x0800b855

0800b8e8 <__sfp_lock_acquire>:
 800b8e8:	4801      	ldr	r0, [pc, #4]	; (800b8f0 <__sfp_lock_acquire+0x8>)
 800b8ea:	f000 ba6e 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800b8ee:	bf00      	nop
 800b8f0:	20000381 	.word	0x20000381

0800b8f4 <__sfp_lock_release>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__sfp_lock_release+0x8>)
 800b8f6:	f000 ba69 	b.w	800bdcc <__retarget_lock_release_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	20000381 	.word	0x20000381

0800b900 <__sinit>:
 800b900:	b510      	push	{r4, lr}
 800b902:	4604      	mov	r4, r0
 800b904:	f7ff fff0 	bl	800b8e8 <__sfp_lock_acquire>
 800b908:	6a23      	ldr	r3, [r4, #32]
 800b90a:	b11b      	cbz	r3, 800b914 <__sinit+0x14>
 800b90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b910:	f7ff bff0 	b.w	800b8f4 <__sfp_lock_release>
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <__sinit+0x28>)
 800b916:	6223      	str	r3, [r4, #32]
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <__sinit+0x2c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1f5      	bne.n	800b90c <__sinit+0xc>
 800b920:	f7ff ffc4 	bl	800b8ac <global_stdio_init.part.0>
 800b924:	e7f2      	b.n	800b90c <__sinit+0xc>
 800b926:	bf00      	nop
 800b928:	0800b86d 	.word	0x0800b86d
 800b92c:	20000378 	.word	0x20000378

0800b930 <fiprintf>:
 800b930:	b40e      	push	{r1, r2, r3}
 800b932:	b503      	push	{r0, r1, lr}
 800b934:	4601      	mov	r1, r0
 800b936:	ab03      	add	r3, sp, #12
 800b938:	4805      	ldr	r0, [pc, #20]	; (800b950 <fiprintf+0x20>)
 800b93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b93e:	6800      	ldr	r0, [r0, #0]
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f000 fad1 	bl	800bee8 <_vfiprintf_r>
 800b946:	b002      	add	sp, #8
 800b948:	f85d eb04 	ldr.w	lr, [sp], #4
 800b94c:	b003      	add	sp, #12
 800b94e:	4770      	bx	lr
 800b950:	200000d8 	.word	0x200000d8

0800b954 <_fwalk_sglue>:
 800b954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b958:	4607      	mov	r7, r0
 800b95a:	4688      	mov	r8, r1
 800b95c:	4614      	mov	r4, r2
 800b95e:	2600      	movs	r6, #0
 800b960:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b964:	f1b9 0901 	subs.w	r9, r9, #1
 800b968:	d505      	bpl.n	800b976 <_fwalk_sglue+0x22>
 800b96a:	6824      	ldr	r4, [r4, #0]
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	d1f7      	bne.n	800b960 <_fwalk_sglue+0xc>
 800b970:	4630      	mov	r0, r6
 800b972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b976:	89ab      	ldrh	r3, [r5, #12]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d907      	bls.n	800b98c <_fwalk_sglue+0x38>
 800b97c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b980:	3301      	adds	r3, #1
 800b982:	d003      	beq.n	800b98c <_fwalk_sglue+0x38>
 800b984:	4629      	mov	r1, r5
 800b986:	4638      	mov	r0, r7
 800b988:	47c0      	blx	r8
 800b98a:	4306      	orrs	r6, r0
 800b98c:	3568      	adds	r5, #104	; 0x68
 800b98e:	e7e9      	b.n	800b964 <_fwalk_sglue+0x10>

0800b990 <iprintf>:
 800b990:	b40f      	push	{r0, r1, r2, r3}
 800b992:	b507      	push	{r0, r1, r2, lr}
 800b994:	4906      	ldr	r1, [pc, #24]	; (800b9b0 <iprintf+0x20>)
 800b996:	ab04      	add	r3, sp, #16
 800b998:	6808      	ldr	r0, [r1, #0]
 800b99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b99e:	6881      	ldr	r1, [r0, #8]
 800b9a0:	9301      	str	r3, [sp, #4]
 800b9a2:	f000 faa1 	bl	800bee8 <_vfiprintf_r>
 800b9a6:	b003      	add	sp, #12
 800b9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9ac:	b004      	add	sp, #16
 800b9ae:	4770      	bx	lr
 800b9b0:	200000d8 	.word	0x200000d8

0800b9b4 <_puts_r>:
 800b9b4:	6a03      	ldr	r3, [r0, #32]
 800b9b6:	b570      	push	{r4, r5, r6, lr}
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460e      	mov	r6, r1
 800b9bc:	6884      	ldr	r4, [r0, #8]
 800b9be:	b90b      	cbnz	r3, 800b9c4 <_puts_r+0x10>
 800b9c0:	f7ff ff9e 	bl	800b900 <__sinit>
 800b9c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9c6:	07db      	lsls	r3, r3, #31
 800b9c8:	d405      	bmi.n	800b9d6 <_puts_r+0x22>
 800b9ca:	89a3      	ldrh	r3, [r4, #12]
 800b9cc:	0598      	lsls	r0, r3, #22
 800b9ce:	d402      	bmi.n	800b9d6 <_puts_r+0x22>
 800b9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d2:	f000 f9fa 	bl	800bdca <__retarget_lock_acquire_recursive>
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	0719      	lsls	r1, r3, #28
 800b9da:	d513      	bpl.n	800ba04 <_puts_r+0x50>
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	b18b      	cbz	r3, 800ba04 <_puts_r+0x50>
 800b9e0:	3e01      	subs	r6, #1
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	60a3      	str	r3, [r4, #8]
 800b9ec:	b9e9      	cbnz	r1, 800ba2a <_puts_r+0x76>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da2e      	bge.n	800ba50 <_puts_r+0x9c>
 800b9f2:	4622      	mov	r2, r4
 800b9f4:	210a      	movs	r1, #10
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f87b 	bl	800baf2 <__swbuf_r>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d007      	beq.n	800ba10 <_puts_r+0x5c>
 800ba00:	250a      	movs	r5, #10
 800ba02:	e007      	b.n	800ba14 <_puts_r+0x60>
 800ba04:	4621      	mov	r1, r4
 800ba06:	4628      	mov	r0, r5
 800ba08:	f000 f8b0 	bl	800bb6c <__swsetup_r>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d0e7      	beq.n	800b9e0 <_puts_r+0x2c>
 800ba10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ba14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba16:	07da      	lsls	r2, r3, #31
 800ba18:	d405      	bmi.n	800ba26 <_puts_r+0x72>
 800ba1a:	89a3      	ldrh	r3, [r4, #12]
 800ba1c:	059b      	lsls	r3, r3, #22
 800ba1e:	d402      	bmi.n	800ba26 <_puts_r+0x72>
 800ba20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba22:	f000 f9d3 	bl	800bdcc <__retarget_lock_release_recursive>
 800ba26:	4628      	mov	r0, r5
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da04      	bge.n	800ba38 <_puts_r+0x84>
 800ba2e:	69a2      	ldr	r2, [r4, #24]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	dc06      	bgt.n	800ba42 <_puts_r+0x8e>
 800ba34:	290a      	cmp	r1, #10
 800ba36:	d004      	beq.n	800ba42 <_puts_r+0x8e>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	7019      	strb	r1, [r3, #0]
 800ba40:	e7cf      	b.n	800b9e2 <_puts_r+0x2e>
 800ba42:	4622      	mov	r2, r4
 800ba44:	4628      	mov	r0, r5
 800ba46:	f000 f854 	bl	800baf2 <__swbuf_r>
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	d1c9      	bne.n	800b9e2 <_puts_r+0x2e>
 800ba4e:	e7df      	b.n	800ba10 <_puts_r+0x5c>
 800ba50:	250a      	movs	r5, #10
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	6022      	str	r2, [r4, #0]
 800ba58:	701d      	strb	r5, [r3, #0]
 800ba5a:	e7db      	b.n	800ba14 <_puts_r+0x60>

0800ba5c <puts>:
 800ba5c:	4b02      	ldr	r3, [pc, #8]	; (800ba68 <puts+0xc>)
 800ba5e:	4601      	mov	r1, r0
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	f7ff bfa7 	b.w	800b9b4 <_puts_r>
 800ba66:	bf00      	nop
 800ba68:	200000d8 	.word	0x200000d8

0800ba6c <__sread>:
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	460c      	mov	r4, r1
 800ba70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba74:	f000 f94a 	bl	800bd0c <_read_r>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	bfab      	itete	ge
 800ba7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba80:	181b      	addge	r3, r3, r0
 800ba82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba86:	bfac      	ite	ge
 800ba88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba8a:	81a3      	strhlt	r3, [r4, #12]
 800ba8c:	bd10      	pop	{r4, pc}

0800ba8e <__swrite>:
 800ba8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba92:	461f      	mov	r7, r3
 800ba94:	898b      	ldrh	r3, [r1, #12]
 800ba96:	4605      	mov	r5, r0
 800ba98:	05db      	lsls	r3, r3, #23
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4616      	mov	r6, r2
 800ba9e:	d505      	bpl.n	800baac <__swrite+0x1e>
 800baa0:	2302      	movs	r3, #2
 800baa2:	2200      	movs	r2, #0
 800baa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa8:	f000 f91e 	bl	800bce8 <_lseek_r>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	4632      	mov	r2, r6
 800bab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	4628      	mov	r0, r5
 800bab8:	463b      	mov	r3, r7
 800baba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800babe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	f000 b945 	b.w	800bd50 <_write_r>

0800bac6 <__sseek>:
 800bac6:	b510      	push	{r4, lr}
 800bac8:	460c      	mov	r4, r1
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	f000 f90b 	bl	800bce8 <_lseek_r>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	bf15      	itete	ne
 800bad8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bae2:	81a3      	strheq	r3, [r4, #12]
 800bae4:	bf18      	it	ne
 800bae6:	81a3      	strhne	r3, [r4, #12]
 800bae8:	bd10      	pop	{r4, pc}

0800baea <__sclose>:
 800baea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baee:	f000 b8eb 	b.w	800bcc8 <_close_r>

0800baf2 <__swbuf_r>:
 800baf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf4:	460e      	mov	r6, r1
 800baf6:	4614      	mov	r4, r2
 800baf8:	4605      	mov	r5, r0
 800bafa:	b118      	cbz	r0, 800bb04 <__swbuf_r+0x12>
 800bafc:	6a03      	ldr	r3, [r0, #32]
 800bafe:	b90b      	cbnz	r3, 800bb04 <__swbuf_r+0x12>
 800bb00:	f7ff fefe 	bl	800b900 <__sinit>
 800bb04:	69a3      	ldr	r3, [r4, #24]
 800bb06:	60a3      	str	r3, [r4, #8]
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	071a      	lsls	r2, r3, #28
 800bb0c:	d525      	bpl.n	800bb5a <__swbuf_r+0x68>
 800bb0e:	6923      	ldr	r3, [r4, #16]
 800bb10:	b31b      	cbz	r3, 800bb5a <__swbuf_r+0x68>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	6922      	ldr	r2, [r4, #16]
 800bb16:	b2f6      	uxtb	r6, r6
 800bb18:	1a98      	subs	r0, r3, r2
 800bb1a:	6963      	ldr	r3, [r4, #20]
 800bb1c:	4637      	mov	r7, r6
 800bb1e:	4283      	cmp	r3, r0
 800bb20:	dc04      	bgt.n	800bb2c <__swbuf_r+0x3a>
 800bb22:	4621      	mov	r1, r4
 800bb24:	4628      	mov	r0, r5
 800bb26:	f000 fd0f 	bl	800c548 <_fflush_r>
 800bb2a:	b9e0      	cbnz	r0, 800bb66 <__swbuf_r+0x74>
 800bb2c:	68a3      	ldr	r3, [r4, #8]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	60a3      	str	r3, [r4, #8]
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	6022      	str	r2, [r4, #0]
 800bb38:	701e      	strb	r6, [r3, #0]
 800bb3a:	6962      	ldr	r2, [r4, #20]
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d004      	beq.n	800bb4c <__swbuf_r+0x5a>
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	07db      	lsls	r3, r3, #31
 800bb46:	d506      	bpl.n	800bb56 <__swbuf_r+0x64>
 800bb48:	2e0a      	cmp	r6, #10
 800bb4a:	d104      	bne.n	800bb56 <__swbuf_r+0x64>
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f000 fcfa 	bl	800c548 <_fflush_r>
 800bb54:	b938      	cbnz	r0, 800bb66 <__swbuf_r+0x74>
 800bb56:	4638      	mov	r0, r7
 800bb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f000 f805 	bl	800bb6c <__swsetup_r>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d0d5      	beq.n	800bb12 <__swbuf_r+0x20>
 800bb66:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bb6a:	e7f4      	b.n	800bb56 <__swbuf_r+0x64>

0800bb6c <__swsetup_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	4b2a      	ldr	r3, [pc, #168]	; (800bc18 <__swsetup_r+0xac>)
 800bb70:	4605      	mov	r5, r0
 800bb72:	6818      	ldr	r0, [r3, #0]
 800bb74:	460c      	mov	r4, r1
 800bb76:	b118      	cbz	r0, 800bb80 <__swsetup_r+0x14>
 800bb78:	6a03      	ldr	r3, [r0, #32]
 800bb7a:	b90b      	cbnz	r3, 800bb80 <__swsetup_r+0x14>
 800bb7c:	f7ff fec0 	bl	800b900 <__sinit>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb86:	0718      	lsls	r0, r3, #28
 800bb88:	d422      	bmi.n	800bbd0 <__swsetup_r+0x64>
 800bb8a:	06d9      	lsls	r1, r3, #27
 800bb8c:	d407      	bmi.n	800bb9e <__swsetup_r+0x32>
 800bb8e:	2309      	movs	r3, #9
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	e034      	b.n	800bc08 <__swsetup_r+0x9c>
 800bb9e:	0758      	lsls	r0, r3, #29
 800bba0:	d512      	bpl.n	800bbc8 <__swsetup_r+0x5c>
 800bba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba4:	b141      	cbz	r1, 800bbb8 <__swsetup_r+0x4c>
 800bba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	d002      	beq.n	800bbb4 <__swsetup_r+0x48>
 800bbae:	4628      	mov	r0, r5
 800bbb0:	f000 f92a 	bl	800be08 <_free_r>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	6363      	str	r3, [r4, #52]	; 0x34
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbbe:	81a3      	strh	r3, [r4, #12]
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	6063      	str	r3, [r4, #4]
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	f043 0308 	orr.w	r3, r3, #8
 800bbce:	81a3      	strh	r3, [r4, #12]
 800bbd0:	6923      	ldr	r3, [r4, #16]
 800bbd2:	b94b      	cbnz	r3, 800bbe8 <__swsetup_r+0x7c>
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbde:	d003      	beq.n	800bbe8 <__swsetup_r+0x7c>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	f000 fcfd 	bl	800c5e2 <__smakebuf_r>
 800bbe8:	89a0      	ldrh	r0, [r4, #12]
 800bbea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbee:	f010 0301 	ands.w	r3, r0, #1
 800bbf2:	d00a      	beq.n	800bc0a <__swsetup_r+0x9e>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60a3      	str	r3, [r4, #8]
 800bbf8:	6963      	ldr	r3, [r4, #20]
 800bbfa:	425b      	negs	r3, r3
 800bbfc:	61a3      	str	r3, [r4, #24]
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	b943      	cbnz	r3, 800bc14 <__swsetup_r+0xa8>
 800bc02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc06:	d1c4      	bne.n	800bb92 <__swsetup_r+0x26>
 800bc08:	bd38      	pop	{r3, r4, r5, pc}
 800bc0a:	0781      	lsls	r1, r0, #30
 800bc0c:	bf58      	it	pl
 800bc0e:	6963      	ldrpl	r3, [r4, #20]
 800bc10:	60a3      	str	r3, [r4, #8]
 800bc12:	e7f4      	b.n	800bbfe <__swsetup_r+0x92>
 800bc14:	2000      	movs	r0, #0
 800bc16:	e7f7      	b.n	800bc08 <__swsetup_r+0x9c>
 800bc18:	200000d8 	.word	0x200000d8

0800bc1c <memcmp>:
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	3901      	subs	r1, #1
 800bc20:	4402      	add	r2, r0
 800bc22:	4290      	cmp	r0, r2
 800bc24:	d101      	bne.n	800bc2a <memcmp+0xe>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e005      	b.n	800bc36 <memcmp+0x1a>
 800bc2a:	7803      	ldrb	r3, [r0, #0]
 800bc2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	d001      	beq.n	800bc38 <memcmp+0x1c>
 800bc34:	1b18      	subs	r0, r3, r4
 800bc36:	bd10      	pop	{r4, pc}
 800bc38:	3001      	adds	r0, #1
 800bc3a:	e7f2      	b.n	800bc22 <memcmp+0x6>

0800bc3c <memset>:
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	4402      	add	r2, r0
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d100      	bne.n	800bc46 <memset+0xa>
 800bc44:	4770      	bx	lr
 800bc46:	f803 1b01 	strb.w	r1, [r3], #1
 800bc4a:	e7f9      	b.n	800bc40 <memset+0x4>

0800bc4c <strcat>:
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	7814      	ldrb	r4, [r2, #0]
 800bc52:	4613      	mov	r3, r2
 800bc54:	3201      	adds	r2, #1
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	d1fa      	bne.n	800bc50 <strcat+0x4>
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc60:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	d1f9      	bne.n	800bc5c <strcat+0x10>
 800bc68:	bd10      	pop	{r4, pc}

0800bc6a <strchr>:
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	b2c9      	uxtb	r1, r1
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc74:	b112      	cbz	r2, 800bc7c <strchr+0x12>
 800bc76:	428a      	cmp	r2, r1
 800bc78:	d1f9      	bne.n	800bc6e <strchr+0x4>
 800bc7a:	4770      	bx	lr
 800bc7c:	2900      	cmp	r1, #0
 800bc7e:	bf18      	it	ne
 800bc80:	2000      	movne	r0, #0
 800bc82:	4770      	bx	lr

0800bc84 <strcspn>:
 800bc84:	4603      	mov	r3, r0
 800bc86:	b570      	push	{r4, r5, r6, lr}
 800bc88:	461e      	mov	r6, r3
 800bc8a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800bc8e:	b144      	cbz	r4, 800bca2 <strcspn+0x1e>
 800bc90:	1e4a      	subs	r2, r1, #1
 800bc92:	e001      	b.n	800bc98 <strcspn+0x14>
 800bc94:	42a5      	cmp	r5, r4
 800bc96:	d004      	beq.n	800bca2 <strcspn+0x1e>
 800bc98:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	d1f9      	bne.n	800bc94 <strcspn+0x10>
 800bca0:	e7f2      	b.n	800bc88 <strcspn+0x4>
 800bca2:	1a30      	subs	r0, r6, r0
 800bca4:	bd70      	pop	{r4, r5, r6, pc}

0800bca6 <strspn>:
 800bca6:	4603      	mov	r3, r0
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	461e      	mov	r6, r3
 800bcac:	f813 4b01 	ldrb.w	r4, [r3], #1
 800bcb0:	b13c      	cbz	r4, 800bcc2 <strspn+0x1c>
 800bcb2:	1e4a      	subs	r2, r1, #1
 800bcb4:	e001      	b.n	800bcba <strspn+0x14>
 800bcb6:	42a5      	cmp	r5, r4
 800bcb8:	d0f7      	beq.n	800bcaa <strspn+0x4>
 800bcba:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800bcbe:	2d00      	cmp	r5, #0
 800bcc0:	d1f9      	bne.n	800bcb6 <strspn+0x10>
 800bcc2:	1a30      	subs	r0, r6, r0
 800bcc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcc8 <_close_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	2300      	movs	r3, #0
 800bccc:	4d05      	ldr	r5, [pc, #20]	; (800bce4 <_close_r+0x1c>)
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f4 fd0b 	bl	80006ee <_close>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_close_r+0x1a>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_close_r+0x1a>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	2000037c 	.word	0x2000037c

0800bce8 <_lseek_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	4611      	mov	r1, r2
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	4d05      	ldr	r5, [pc, #20]	; (800bd08 <_lseek_r+0x20>)
 800bcf4:	602a      	str	r2, [r5, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f7f4 fd1d 	bl	8000736 <_lseek>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_lseek_r+0x1e>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_lseek_r+0x1e>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	2000037c 	.word	0x2000037c

0800bd0c <_read_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	4611      	mov	r1, r2
 800bd14:	2200      	movs	r2, #0
 800bd16:	4d05      	ldr	r5, [pc, #20]	; (800bd2c <_read_r+0x20>)
 800bd18:	602a      	str	r2, [r5, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f7f4 fcca 	bl	80006b4 <_read>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_read_r+0x1e>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_read_r+0x1e>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	2000037c 	.word	0x2000037c

0800bd30 <_sbrk_r>:
 800bd30:	b538      	push	{r3, r4, r5, lr}
 800bd32:	2300      	movs	r3, #0
 800bd34:	4d05      	ldr	r5, [pc, #20]	; (800bd4c <_sbrk_r+0x1c>)
 800bd36:	4604      	mov	r4, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	602b      	str	r3, [r5, #0]
 800bd3c:	f7f4 fd08 	bl	8000750 <_sbrk>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_sbrk_r+0x1a>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_sbrk_r+0x1a>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	2000037c 	.word	0x2000037c

0800bd50 <_write_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4d05      	ldr	r5, [pc, #20]	; (800bd70 <_write_r+0x20>)
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f4 fa10 	bl	8000184 <_write>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_write_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_write_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	2000037c 	.word	0x2000037c

0800bd74 <__errno>:
 800bd74:	4b01      	ldr	r3, [pc, #4]	; (800bd7c <__errno+0x8>)
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	200000d8 	.word	0x200000d8

0800bd80 <__libc_init_array>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	2600      	movs	r6, #0
 800bd84:	4d0c      	ldr	r5, [pc, #48]	; (800bdb8 <__libc_init_array+0x38>)
 800bd86:	4c0d      	ldr	r4, [pc, #52]	; (800bdbc <__libc_init_array+0x3c>)
 800bd88:	1b64      	subs	r4, r4, r5
 800bd8a:	10a4      	asrs	r4, r4, #2
 800bd8c:	42a6      	cmp	r6, r4
 800bd8e:	d109      	bne.n	800bda4 <__libc_init_array+0x24>
 800bd90:	f000 fcd8 	bl	800c744 <_init>
 800bd94:	2600      	movs	r6, #0
 800bd96:	4d0a      	ldr	r5, [pc, #40]	; (800bdc0 <__libc_init_array+0x40>)
 800bd98:	4c0a      	ldr	r4, [pc, #40]	; (800bdc4 <__libc_init_array+0x44>)
 800bd9a:	1b64      	subs	r4, r4, r5
 800bd9c:	10a4      	asrs	r4, r4, #2
 800bd9e:	42a6      	cmp	r6, r4
 800bda0:	d105      	bne.n	800bdae <__libc_init_array+0x2e>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda8:	4798      	blx	r3
 800bdaa:	3601      	adds	r6, #1
 800bdac:	e7ee      	b.n	800bd8c <__libc_init_array+0xc>
 800bdae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb2:	4798      	blx	r3
 800bdb4:	3601      	adds	r6, #1
 800bdb6:	e7f2      	b.n	800bd9e <__libc_init_array+0x1e>
 800bdb8:	0800df38 	.word	0x0800df38
 800bdbc:	0800df38 	.word	0x0800df38
 800bdc0:	0800df38 	.word	0x0800df38
 800bdc4:	0800df3c 	.word	0x0800df3c

0800bdc8 <__retarget_lock_init_recursive>:
 800bdc8:	4770      	bx	lr

0800bdca <__retarget_lock_acquire_recursive>:
 800bdca:	4770      	bx	lr

0800bdcc <__retarget_lock_release_recursive>:
 800bdcc:	4770      	bx	lr

0800bdce <strcpy>:
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdd4:	f803 2b01 	strb.w	r2, [r3], #1
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	d1f9      	bne.n	800bdd0 <strcpy+0x2>
 800bddc:	4770      	bx	lr

0800bdde <memcpy>:
 800bdde:	440a      	add	r2, r1
 800bde0:	4291      	cmp	r1, r2
 800bde2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bde6:	d100      	bne.n	800bdea <memcpy+0xc>
 800bde8:	4770      	bx	lr
 800bdea:	b510      	push	{r4, lr}
 800bdec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdf0:	4291      	cmp	r1, r2
 800bdf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdf6:	d1f9      	bne.n	800bdec <memcpy+0xe>
 800bdf8:	bd10      	pop	{r4, pc}

0800bdfa <abort>:
 800bdfa:	2006      	movs	r0, #6
 800bdfc:	b508      	push	{r3, lr}
 800bdfe:	f000 fc55 	bl	800c6ac <raise>
 800be02:	2001      	movs	r0, #1
 800be04:	f7f4 fc4c 	bl	80006a0 <_exit>

0800be08 <_free_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4605      	mov	r5, r0
 800be0c:	2900      	cmp	r1, #0
 800be0e:	d040      	beq.n	800be92 <_free_r+0x8a>
 800be10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be14:	1f0c      	subs	r4, r1, #4
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfb8      	it	lt
 800be1a:	18e4      	addlt	r4, r4, r3
 800be1c:	f7ff fc0e 	bl	800b63c <__malloc_lock>
 800be20:	4a1c      	ldr	r2, [pc, #112]	; (800be94 <_free_r+0x8c>)
 800be22:	6813      	ldr	r3, [r2, #0]
 800be24:	b933      	cbnz	r3, 800be34 <_free_r+0x2c>
 800be26:	6063      	str	r3, [r4, #4]
 800be28:	6014      	str	r4, [r2, #0]
 800be2a:	4628      	mov	r0, r5
 800be2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be30:	f7ff bc0a 	b.w	800b648 <__malloc_unlock>
 800be34:	42a3      	cmp	r3, r4
 800be36:	d908      	bls.n	800be4a <_free_r+0x42>
 800be38:	6820      	ldr	r0, [r4, #0]
 800be3a:	1821      	adds	r1, r4, r0
 800be3c:	428b      	cmp	r3, r1
 800be3e:	bf01      	itttt	eq
 800be40:	6819      	ldreq	r1, [r3, #0]
 800be42:	685b      	ldreq	r3, [r3, #4]
 800be44:	1809      	addeq	r1, r1, r0
 800be46:	6021      	streq	r1, [r4, #0]
 800be48:	e7ed      	b.n	800be26 <_free_r+0x1e>
 800be4a:	461a      	mov	r2, r3
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	b10b      	cbz	r3, 800be54 <_free_r+0x4c>
 800be50:	42a3      	cmp	r3, r4
 800be52:	d9fa      	bls.n	800be4a <_free_r+0x42>
 800be54:	6811      	ldr	r1, [r2, #0]
 800be56:	1850      	adds	r0, r2, r1
 800be58:	42a0      	cmp	r0, r4
 800be5a:	d10b      	bne.n	800be74 <_free_r+0x6c>
 800be5c:	6820      	ldr	r0, [r4, #0]
 800be5e:	4401      	add	r1, r0
 800be60:	1850      	adds	r0, r2, r1
 800be62:	4283      	cmp	r3, r0
 800be64:	6011      	str	r1, [r2, #0]
 800be66:	d1e0      	bne.n	800be2a <_free_r+0x22>
 800be68:	6818      	ldr	r0, [r3, #0]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	4408      	add	r0, r1
 800be6e:	6010      	str	r0, [r2, #0]
 800be70:	6053      	str	r3, [r2, #4]
 800be72:	e7da      	b.n	800be2a <_free_r+0x22>
 800be74:	d902      	bls.n	800be7c <_free_r+0x74>
 800be76:	230c      	movs	r3, #12
 800be78:	602b      	str	r3, [r5, #0]
 800be7a:	e7d6      	b.n	800be2a <_free_r+0x22>
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	1821      	adds	r1, r4, r0
 800be80:	428b      	cmp	r3, r1
 800be82:	bf01      	itttt	eq
 800be84:	6819      	ldreq	r1, [r3, #0]
 800be86:	685b      	ldreq	r3, [r3, #4]
 800be88:	1809      	addeq	r1, r1, r0
 800be8a:	6021      	streq	r1, [r4, #0]
 800be8c:	6063      	str	r3, [r4, #4]
 800be8e:	6054      	str	r4, [r2, #4]
 800be90:	e7cb      	b.n	800be2a <_free_r+0x22>
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	20000238 	.word	0x20000238

0800be98 <__sfputc_r>:
 800be98:	6893      	ldr	r3, [r2, #8]
 800be9a:	b410      	push	{r4}
 800be9c:	3b01      	subs	r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	6093      	str	r3, [r2, #8]
 800bea2:	da07      	bge.n	800beb4 <__sfputc_r+0x1c>
 800bea4:	6994      	ldr	r4, [r2, #24]
 800bea6:	42a3      	cmp	r3, r4
 800bea8:	db01      	blt.n	800beae <__sfputc_r+0x16>
 800beaa:	290a      	cmp	r1, #10
 800beac:	d102      	bne.n	800beb4 <__sfputc_r+0x1c>
 800beae:	bc10      	pop	{r4}
 800beb0:	f7ff be1f 	b.w	800baf2 <__swbuf_r>
 800beb4:	6813      	ldr	r3, [r2, #0]
 800beb6:	1c58      	adds	r0, r3, #1
 800beb8:	6010      	str	r0, [r2, #0]
 800beba:	7019      	strb	r1, [r3, #0]
 800bebc:	4608      	mov	r0, r1
 800bebe:	bc10      	pop	{r4}
 800bec0:	4770      	bx	lr

0800bec2 <__sfputs_r>:
 800bec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec4:	4606      	mov	r6, r0
 800bec6:	460f      	mov	r7, r1
 800bec8:	4614      	mov	r4, r2
 800beca:	18d5      	adds	r5, r2, r3
 800becc:	42ac      	cmp	r4, r5
 800bece:	d101      	bne.n	800bed4 <__sfputs_r+0x12>
 800bed0:	2000      	movs	r0, #0
 800bed2:	e007      	b.n	800bee4 <__sfputs_r+0x22>
 800bed4:	463a      	mov	r2, r7
 800bed6:	4630      	mov	r0, r6
 800bed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bedc:	f7ff ffdc 	bl	800be98 <__sfputc_r>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d1f3      	bne.n	800becc <__sfputs_r+0xa>
 800bee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bee8 <_vfiprintf_r>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	460d      	mov	r5, r1
 800beee:	4614      	mov	r4, r2
 800bef0:	4698      	mov	r8, r3
 800bef2:	4606      	mov	r6, r0
 800bef4:	b09d      	sub	sp, #116	; 0x74
 800bef6:	b118      	cbz	r0, 800bf00 <_vfiprintf_r+0x18>
 800bef8:	6a03      	ldr	r3, [r0, #32]
 800befa:	b90b      	cbnz	r3, 800bf00 <_vfiprintf_r+0x18>
 800befc:	f7ff fd00 	bl	800b900 <__sinit>
 800bf00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf02:	07d9      	lsls	r1, r3, #31
 800bf04:	d405      	bmi.n	800bf12 <_vfiprintf_r+0x2a>
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	059a      	lsls	r2, r3, #22
 800bf0a:	d402      	bmi.n	800bf12 <_vfiprintf_r+0x2a>
 800bf0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0e:	f7ff ff5c 	bl	800bdca <__retarget_lock_acquire_recursive>
 800bf12:	89ab      	ldrh	r3, [r5, #12]
 800bf14:	071b      	lsls	r3, r3, #28
 800bf16:	d501      	bpl.n	800bf1c <_vfiprintf_r+0x34>
 800bf18:	692b      	ldr	r3, [r5, #16]
 800bf1a:	b99b      	cbnz	r3, 800bf44 <_vfiprintf_r+0x5c>
 800bf1c:	4629      	mov	r1, r5
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7ff fe24 	bl	800bb6c <__swsetup_r>
 800bf24:	b170      	cbz	r0, 800bf44 <_vfiprintf_r+0x5c>
 800bf26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf28:	07dc      	lsls	r4, r3, #31
 800bf2a:	d504      	bpl.n	800bf36 <_vfiprintf_r+0x4e>
 800bf2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf30:	b01d      	add	sp, #116	; 0x74
 800bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	0598      	lsls	r0, r3, #22
 800bf3a:	d4f7      	bmi.n	800bf2c <_vfiprintf_r+0x44>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf3e:	f7ff ff45 	bl	800bdcc <__retarget_lock_release_recursive>
 800bf42:	e7f3      	b.n	800bf2c <_vfiprintf_r+0x44>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9309      	str	r3, [sp, #36]	; 0x24
 800bf48:	2320      	movs	r3, #32
 800bf4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf4e:	2330      	movs	r3, #48	; 0x30
 800bf50:	f04f 0901 	mov.w	r9, #1
 800bf54:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c108 <_vfiprintf_r+0x220>
 800bf5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf60:	4623      	mov	r3, r4
 800bf62:	469a      	mov	sl, r3
 800bf64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf68:	b10a      	cbz	r2, 800bf6e <_vfiprintf_r+0x86>
 800bf6a:	2a25      	cmp	r2, #37	; 0x25
 800bf6c:	d1f9      	bne.n	800bf62 <_vfiprintf_r+0x7a>
 800bf6e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf72:	d00b      	beq.n	800bf8c <_vfiprintf_r+0xa4>
 800bf74:	465b      	mov	r3, fp
 800bf76:	4622      	mov	r2, r4
 800bf78:	4629      	mov	r1, r5
 800bf7a:	4630      	mov	r0, r6
 800bf7c:	f7ff ffa1 	bl	800bec2 <__sfputs_r>
 800bf80:	3001      	adds	r0, #1
 800bf82:	f000 80a9 	beq.w	800c0d8 <_vfiprintf_r+0x1f0>
 800bf86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf88:	445a      	add	r2, fp
 800bf8a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 80a1 	beq.w	800c0d8 <_vfiprintf_r+0x1f0>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfa0:	f10a 0a01 	add.w	sl, sl, #1
 800bfa4:	9304      	str	r3, [sp, #16]
 800bfa6:	9307      	str	r3, [sp, #28]
 800bfa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfac:	931a      	str	r3, [sp, #104]	; 0x68
 800bfae:	4654      	mov	r4, sl
 800bfb0:	2205      	movs	r2, #5
 800bfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb6:	4854      	ldr	r0, [pc, #336]	; (800c108 <_vfiprintf_r+0x220>)
 800bfb8:	f000 fbb6 	bl	800c728 <memchr>
 800bfbc:	9a04      	ldr	r2, [sp, #16]
 800bfbe:	b9d8      	cbnz	r0, 800bff8 <_vfiprintf_r+0x110>
 800bfc0:	06d1      	lsls	r1, r2, #27
 800bfc2:	bf44      	itt	mi
 800bfc4:	2320      	movmi	r3, #32
 800bfc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfca:	0713      	lsls	r3, r2, #28
 800bfcc:	bf44      	itt	mi
 800bfce:	232b      	movmi	r3, #43	; 0x2b
 800bfd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfda:	d015      	beq.n	800c008 <_vfiprintf_r+0x120>
 800bfdc:	4654      	mov	r4, sl
 800bfde:	2000      	movs	r0, #0
 800bfe0:	f04f 0c0a 	mov.w	ip, #10
 800bfe4:	9a07      	ldr	r2, [sp, #28]
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfec:	3b30      	subs	r3, #48	; 0x30
 800bfee:	2b09      	cmp	r3, #9
 800bff0:	d94d      	bls.n	800c08e <_vfiprintf_r+0x1a6>
 800bff2:	b1b0      	cbz	r0, 800c022 <_vfiprintf_r+0x13a>
 800bff4:	9207      	str	r2, [sp, #28]
 800bff6:	e014      	b.n	800c022 <_vfiprintf_r+0x13a>
 800bff8:	eba0 0308 	sub.w	r3, r0, r8
 800bffc:	fa09 f303 	lsl.w	r3, r9, r3
 800c000:	4313      	orrs	r3, r2
 800c002:	46a2      	mov	sl, r4
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	e7d2      	b.n	800bfae <_vfiprintf_r+0xc6>
 800c008:	9b03      	ldr	r3, [sp, #12]
 800c00a:	1d19      	adds	r1, r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	9103      	str	r1, [sp, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	bfbb      	ittet	lt
 800c014:	425b      	neglt	r3, r3
 800c016:	f042 0202 	orrlt.w	r2, r2, #2
 800c01a:	9307      	strge	r3, [sp, #28]
 800c01c:	9307      	strlt	r3, [sp, #28]
 800c01e:	bfb8      	it	lt
 800c020:	9204      	strlt	r2, [sp, #16]
 800c022:	7823      	ldrb	r3, [r4, #0]
 800c024:	2b2e      	cmp	r3, #46	; 0x2e
 800c026:	d10c      	bne.n	800c042 <_vfiprintf_r+0x15a>
 800c028:	7863      	ldrb	r3, [r4, #1]
 800c02a:	2b2a      	cmp	r3, #42	; 0x2a
 800c02c:	d134      	bne.n	800c098 <_vfiprintf_r+0x1b0>
 800c02e:	9b03      	ldr	r3, [sp, #12]
 800c030:	3402      	adds	r4, #2
 800c032:	1d1a      	adds	r2, r3, #4
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	9203      	str	r2, [sp, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bfb8      	it	lt
 800c03c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c040:	9305      	str	r3, [sp, #20]
 800c042:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c10c <_vfiprintf_r+0x224>
 800c046:	2203      	movs	r2, #3
 800c048:	4650      	mov	r0, sl
 800c04a:	7821      	ldrb	r1, [r4, #0]
 800c04c:	f000 fb6c 	bl	800c728 <memchr>
 800c050:	b138      	cbz	r0, 800c062 <_vfiprintf_r+0x17a>
 800c052:	2240      	movs	r2, #64	; 0x40
 800c054:	9b04      	ldr	r3, [sp, #16]
 800c056:	eba0 000a 	sub.w	r0, r0, sl
 800c05a:	4082      	lsls	r2, r0
 800c05c:	4313      	orrs	r3, r2
 800c05e:	3401      	adds	r4, #1
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c066:	2206      	movs	r2, #6
 800c068:	4829      	ldr	r0, [pc, #164]	; (800c110 <_vfiprintf_r+0x228>)
 800c06a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c06e:	f000 fb5b 	bl	800c728 <memchr>
 800c072:	2800      	cmp	r0, #0
 800c074:	d03f      	beq.n	800c0f6 <_vfiprintf_r+0x20e>
 800c076:	4b27      	ldr	r3, [pc, #156]	; (800c114 <_vfiprintf_r+0x22c>)
 800c078:	bb1b      	cbnz	r3, 800c0c2 <_vfiprintf_r+0x1da>
 800c07a:	9b03      	ldr	r3, [sp, #12]
 800c07c:	3307      	adds	r3, #7
 800c07e:	f023 0307 	bic.w	r3, r3, #7
 800c082:	3308      	adds	r3, #8
 800c084:	9303      	str	r3, [sp, #12]
 800c086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c088:	443b      	add	r3, r7
 800c08a:	9309      	str	r3, [sp, #36]	; 0x24
 800c08c:	e768      	b.n	800bf60 <_vfiprintf_r+0x78>
 800c08e:	460c      	mov	r4, r1
 800c090:	2001      	movs	r0, #1
 800c092:	fb0c 3202 	mla	r2, ip, r2, r3
 800c096:	e7a6      	b.n	800bfe6 <_vfiprintf_r+0xfe>
 800c098:	2300      	movs	r3, #0
 800c09a:	f04f 0c0a 	mov.w	ip, #10
 800c09e:	4619      	mov	r1, r3
 800c0a0:	3401      	adds	r4, #1
 800c0a2:	9305      	str	r3, [sp, #20]
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0aa:	3a30      	subs	r2, #48	; 0x30
 800c0ac:	2a09      	cmp	r2, #9
 800c0ae:	d903      	bls.n	800c0b8 <_vfiprintf_r+0x1d0>
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0c6      	beq.n	800c042 <_vfiprintf_r+0x15a>
 800c0b4:	9105      	str	r1, [sp, #20]
 800c0b6:	e7c4      	b.n	800c042 <_vfiprintf_r+0x15a>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0c0:	e7f0      	b.n	800c0a4 <_vfiprintf_r+0x1bc>
 800c0c2:	ab03      	add	r3, sp, #12
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	462a      	mov	r2, r5
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4b13      	ldr	r3, [pc, #76]	; (800c118 <_vfiprintf_r+0x230>)
 800c0cc:	a904      	add	r1, sp, #16
 800c0ce:	f3af 8000 	nop.w
 800c0d2:	4607      	mov	r7, r0
 800c0d4:	1c78      	adds	r0, r7, #1
 800c0d6:	d1d6      	bne.n	800c086 <_vfiprintf_r+0x19e>
 800c0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0da:	07d9      	lsls	r1, r3, #31
 800c0dc:	d405      	bmi.n	800c0ea <_vfiprintf_r+0x202>
 800c0de:	89ab      	ldrh	r3, [r5, #12]
 800c0e0:	059a      	lsls	r2, r3, #22
 800c0e2:	d402      	bmi.n	800c0ea <_vfiprintf_r+0x202>
 800c0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0e6:	f7ff fe71 	bl	800bdcc <__retarget_lock_release_recursive>
 800c0ea:	89ab      	ldrh	r3, [r5, #12]
 800c0ec:	065b      	lsls	r3, r3, #25
 800c0ee:	f53f af1d 	bmi.w	800bf2c <_vfiprintf_r+0x44>
 800c0f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0f4:	e71c      	b.n	800bf30 <_vfiprintf_r+0x48>
 800c0f6:	ab03      	add	r3, sp, #12
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	462a      	mov	r2, r5
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	4b06      	ldr	r3, [pc, #24]	; (800c118 <_vfiprintf_r+0x230>)
 800c100:	a904      	add	r1, sp, #16
 800c102:	f000 f87d 	bl	800c200 <_printf_i>
 800c106:	e7e4      	b.n	800c0d2 <_vfiprintf_r+0x1ea>
 800c108:	0800df04 	.word	0x0800df04
 800c10c:	0800df0a 	.word	0x0800df0a
 800c110:	0800df0e 	.word	0x0800df0e
 800c114:	00000000 	.word	0x00000000
 800c118:	0800bec3 	.word	0x0800bec3

0800c11c <_printf_common>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	4616      	mov	r6, r2
 800c122:	4699      	mov	r9, r3
 800c124:	688a      	ldr	r2, [r1, #8]
 800c126:	690b      	ldr	r3, [r1, #16]
 800c128:	4607      	mov	r7, r0
 800c12a:	4293      	cmp	r3, r2
 800c12c:	bfb8      	it	lt
 800c12e:	4613      	movlt	r3, r2
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c136:	460c      	mov	r4, r1
 800c138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c13c:	b10a      	cbz	r2, 800c142 <_printf_common+0x26>
 800c13e:	3301      	adds	r3, #1
 800c140:	6033      	str	r3, [r6, #0]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	0699      	lsls	r1, r3, #26
 800c146:	bf42      	ittt	mi
 800c148:	6833      	ldrmi	r3, [r6, #0]
 800c14a:	3302      	addmi	r3, #2
 800c14c:	6033      	strmi	r3, [r6, #0]
 800c14e:	6825      	ldr	r5, [r4, #0]
 800c150:	f015 0506 	ands.w	r5, r5, #6
 800c154:	d106      	bne.n	800c164 <_printf_common+0x48>
 800c156:	f104 0a19 	add.w	sl, r4, #25
 800c15a:	68e3      	ldr	r3, [r4, #12]
 800c15c:	6832      	ldr	r2, [r6, #0]
 800c15e:	1a9b      	subs	r3, r3, r2
 800c160:	42ab      	cmp	r3, r5
 800c162:	dc2b      	bgt.n	800c1bc <_printf_common+0xa0>
 800c164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c168:	1e13      	subs	r3, r2, #0
 800c16a:	6822      	ldr	r2, [r4, #0]
 800c16c:	bf18      	it	ne
 800c16e:	2301      	movne	r3, #1
 800c170:	0692      	lsls	r2, r2, #26
 800c172:	d430      	bmi.n	800c1d6 <_printf_common+0xba>
 800c174:	4649      	mov	r1, r9
 800c176:	4638      	mov	r0, r7
 800c178:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c17c:	47c0      	blx	r8
 800c17e:	3001      	adds	r0, #1
 800c180:	d023      	beq.n	800c1ca <_printf_common+0xae>
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	6922      	ldr	r2, [r4, #16]
 800c186:	f003 0306 	and.w	r3, r3, #6
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	bf14      	ite	ne
 800c18e:	2500      	movne	r5, #0
 800c190:	6833      	ldreq	r3, [r6, #0]
 800c192:	f04f 0600 	mov.w	r6, #0
 800c196:	bf08      	it	eq
 800c198:	68e5      	ldreq	r5, [r4, #12]
 800c19a:	f104 041a 	add.w	r4, r4, #26
 800c19e:	bf08      	it	eq
 800c1a0:	1aed      	subeq	r5, r5, r3
 800c1a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c1a6:	bf08      	it	eq
 800c1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	bfc4      	itt	gt
 800c1b0:	1a9b      	subgt	r3, r3, r2
 800c1b2:	18ed      	addgt	r5, r5, r3
 800c1b4:	42b5      	cmp	r5, r6
 800c1b6:	d11a      	bne.n	800c1ee <_printf_common+0xd2>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e008      	b.n	800c1ce <_printf_common+0xb2>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	4652      	mov	r2, sl
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	47c0      	blx	r8
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d103      	bne.n	800c1d2 <_printf_common+0xb6>
 800c1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d2:	3501      	adds	r5, #1
 800c1d4:	e7c1      	b.n	800c15a <_printf_common+0x3e>
 800c1d6:	2030      	movs	r0, #48	; 0x30
 800c1d8:	18e1      	adds	r1, r4, r3
 800c1da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1e4:	4422      	add	r2, r4
 800c1e6:	3302      	adds	r3, #2
 800c1e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1ec:	e7c2      	b.n	800c174 <_printf_common+0x58>
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4649      	mov	r1, r9
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	47c0      	blx	r8
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	d0e6      	beq.n	800c1ca <_printf_common+0xae>
 800c1fc:	3601      	adds	r6, #1
 800c1fe:	e7d9      	b.n	800c1b4 <_printf_common+0x98>

0800c200 <_printf_i>:
 800c200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c204:	7e0f      	ldrb	r7, [r1, #24]
 800c206:	4691      	mov	r9, r2
 800c208:	2f78      	cmp	r7, #120	; 0x78
 800c20a:	4680      	mov	r8, r0
 800c20c:	460c      	mov	r4, r1
 800c20e:	469a      	mov	sl, r3
 800c210:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c216:	d807      	bhi.n	800c228 <_printf_i+0x28>
 800c218:	2f62      	cmp	r7, #98	; 0x62
 800c21a:	d80a      	bhi.n	800c232 <_printf_i+0x32>
 800c21c:	2f00      	cmp	r7, #0
 800c21e:	f000 80d5 	beq.w	800c3cc <_printf_i+0x1cc>
 800c222:	2f58      	cmp	r7, #88	; 0x58
 800c224:	f000 80c1 	beq.w	800c3aa <_printf_i+0x1aa>
 800c228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c22c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c230:	e03a      	b.n	800c2a8 <_printf_i+0xa8>
 800c232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c236:	2b15      	cmp	r3, #21
 800c238:	d8f6      	bhi.n	800c228 <_printf_i+0x28>
 800c23a:	a101      	add	r1, pc, #4	; (adr r1, 800c240 <_printf_i+0x40>)
 800c23c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c240:	0800c299 	.word	0x0800c299
 800c244:	0800c2ad 	.word	0x0800c2ad
 800c248:	0800c229 	.word	0x0800c229
 800c24c:	0800c229 	.word	0x0800c229
 800c250:	0800c229 	.word	0x0800c229
 800c254:	0800c229 	.word	0x0800c229
 800c258:	0800c2ad 	.word	0x0800c2ad
 800c25c:	0800c229 	.word	0x0800c229
 800c260:	0800c229 	.word	0x0800c229
 800c264:	0800c229 	.word	0x0800c229
 800c268:	0800c229 	.word	0x0800c229
 800c26c:	0800c3b3 	.word	0x0800c3b3
 800c270:	0800c2d9 	.word	0x0800c2d9
 800c274:	0800c36d 	.word	0x0800c36d
 800c278:	0800c229 	.word	0x0800c229
 800c27c:	0800c229 	.word	0x0800c229
 800c280:	0800c3d5 	.word	0x0800c3d5
 800c284:	0800c229 	.word	0x0800c229
 800c288:	0800c2d9 	.word	0x0800c2d9
 800c28c:	0800c229 	.word	0x0800c229
 800c290:	0800c229 	.word	0x0800c229
 800c294:	0800c375 	.word	0x0800c375
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	1d1a      	adds	r2, r3, #4
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	602a      	str	r2, [r5, #0]
 800c2a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e0a0      	b.n	800c3ee <_printf_i+0x1ee>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	0607      	lsls	r7, r0, #24
 800c2b2:	f103 0104 	add.w	r1, r3, #4
 800c2b6:	6029      	str	r1, [r5, #0]
 800c2b8:	d501      	bpl.n	800c2be <_printf_i+0xbe>
 800c2ba:	681e      	ldr	r6, [r3, #0]
 800c2bc:	e003      	b.n	800c2c6 <_printf_i+0xc6>
 800c2be:	0646      	lsls	r6, r0, #25
 800c2c0:	d5fb      	bpl.n	800c2ba <_printf_i+0xba>
 800c2c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2c6:	2e00      	cmp	r6, #0
 800c2c8:	da03      	bge.n	800c2d2 <_printf_i+0xd2>
 800c2ca:	232d      	movs	r3, #45	; 0x2d
 800c2cc:	4276      	negs	r6, r6
 800c2ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2d2:	230a      	movs	r3, #10
 800c2d4:	4859      	ldr	r0, [pc, #356]	; (800c43c <_printf_i+0x23c>)
 800c2d6:	e012      	b.n	800c2fe <_printf_i+0xfe>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	6820      	ldr	r0, [r4, #0]
 800c2dc:	1d19      	adds	r1, r3, #4
 800c2de:	6029      	str	r1, [r5, #0]
 800c2e0:	0605      	lsls	r5, r0, #24
 800c2e2:	d501      	bpl.n	800c2e8 <_printf_i+0xe8>
 800c2e4:	681e      	ldr	r6, [r3, #0]
 800c2e6:	e002      	b.n	800c2ee <_printf_i+0xee>
 800c2e8:	0641      	lsls	r1, r0, #25
 800c2ea:	d5fb      	bpl.n	800c2e4 <_printf_i+0xe4>
 800c2ec:	881e      	ldrh	r6, [r3, #0]
 800c2ee:	2f6f      	cmp	r7, #111	; 0x6f
 800c2f0:	bf0c      	ite	eq
 800c2f2:	2308      	moveq	r3, #8
 800c2f4:	230a      	movne	r3, #10
 800c2f6:	4851      	ldr	r0, [pc, #324]	; (800c43c <_printf_i+0x23c>)
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2fe:	6865      	ldr	r5, [r4, #4]
 800c300:	2d00      	cmp	r5, #0
 800c302:	bfa8      	it	ge
 800c304:	6821      	ldrge	r1, [r4, #0]
 800c306:	60a5      	str	r5, [r4, #8]
 800c308:	bfa4      	itt	ge
 800c30a:	f021 0104 	bicge.w	r1, r1, #4
 800c30e:	6021      	strge	r1, [r4, #0]
 800c310:	b90e      	cbnz	r6, 800c316 <_printf_i+0x116>
 800c312:	2d00      	cmp	r5, #0
 800c314:	d04b      	beq.n	800c3ae <_printf_i+0x1ae>
 800c316:	4615      	mov	r5, r2
 800c318:	fbb6 f1f3 	udiv	r1, r6, r3
 800c31c:	fb03 6711 	mls	r7, r3, r1, r6
 800c320:	5dc7      	ldrb	r7, [r0, r7]
 800c322:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c326:	4637      	mov	r7, r6
 800c328:	42bb      	cmp	r3, r7
 800c32a:	460e      	mov	r6, r1
 800c32c:	d9f4      	bls.n	800c318 <_printf_i+0x118>
 800c32e:	2b08      	cmp	r3, #8
 800c330:	d10b      	bne.n	800c34a <_printf_i+0x14a>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	07de      	lsls	r6, r3, #31
 800c336:	d508      	bpl.n	800c34a <_printf_i+0x14a>
 800c338:	6923      	ldr	r3, [r4, #16]
 800c33a:	6861      	ldr	r1, [r4, #4]
 800c33c:	4299      	cmp	r1, r3
 800c33e:	bfde      	ittt	le
 800c340:	2330      	movle	r3, #48	; 0x30
 800c342:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c346:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c34a:	1b52      	subs	r2, r2, r5
 800c34c:	6122      	str	r2, [r4, #16]
 800c34e:	464b      	mov	r3, r9
 800c350:	4621      	mov	r1, r4
 800c352:	4640      	mov	r0, r8
 800c354:	f8cd a000 	str.w	sl, [sp]
 800c358:	aa03      	add	r2, sp, #12
 800c35a:	f7ff fedf 	bl	800c11c <_printf_common>
 800c35e:	3001      	adds	r0, #1
 800c360:	d14a      	bne.n	800c3f8 <_printf_i+0x1f8>
 800c362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c366:	b004      	add	sp, #16
 800c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	f043 0320 	orr.w	r3, r3, #32
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	2778      	movs	r7, #120	; 0x78
 800c376:	4832      	ldr	r0, [pc, #200]	; (800c440 <_printf_i+0x240>)
 800c378:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	6829      	ldr	r1, [r5, #0]
 800c380:	061f      	lsls	r7, r3, #24
 800c382:	f851 6b04 	ldr.w	r6, [r1], #4
 800c386:	d402      	bmi.n	800c38e <_printf_i+0x18e>
 800c388:	065f      	lsls	r7, r3, #25
 800c38a:	bf48      	it	mi
 800c38c:	b2b6      	uxthmi	r6, r6
 800c38e:	07df      	lsls	r7, r3, #31
 800c390:	bf48      	it	mi
 800c392:	f043 0320 	orrmi.w	r3, r3, #32
 800c396:	6029      	str	r1, [r5, #0]
 800c398:	bf48      	it	mi
 800c39a:	6023      	strmi	r3, [r4, #0]
 800c39c:	b91e      	cbnz	r6, 800c3a6 <_printf_i+0x1a6>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	f023 0320 	bic.w	r3, r3, #32
 800c3a4:	6023      	str	r3, [r4, #0]
 800c3a6:	2310      	movs	r3, #16
 800c3a8:	e7a6      	b.n	800c2f8 <_printf_i+0xf8>
 800c3aa:	4824      	ldr	r0, [pc, #144]	; (800c43c <_printf_i+0x23c>)
 800c3ac:	e7e4      	b.n	800c378 <_printf_i+0x178>
 800c3ae:	4615      	mov	r5, r2
 800c3b0:	e7bd      	b.n	800c32e <_printf_i+0x12e>
 800c3b2:	682b      	ldr	r3, [r5, #0]
 800c3b4:	6826      	ldr	r6, [r4, #0]
 800c3b6:	1d18      	adds	r0, r3, #4
 800c3b8:	6961      	ldr	r1, [r4, #20]
 800c3ba:	6028      	str	r0, [r5, #0]
 800c3bc:	0635      	lsls	r5, r6, #24
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	d501      	bpl.n	800c3c6 <_printf_i+0x1c6>
 800c3c2:	6019      	str	r1, [r3, #0]
 800c3c4:	e002      	b.n	800c3cc <_printf_i+0x1cc>
 800c3c6:	0670      	lsls	r0, r6, #25
 800c3c8:	d5fb      	bpl.n	800c3c2 <_printf_i+0x1c2>
 800c3ca:	8019      	strh	r1, [r3, #0]
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4615      	mov	r5, r2
 800c3d0:	6123      	str	r3, [r4, #16]
 800c3d2:	e7bc      	b.n	800c34e <_printf_i+0x14e>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	1d1a      	adds	r2, r3, #4
 800c3da:	602a      	str	r2, [r5, #0]
 800c3dc:	681d      	ldr	r5, [r3, #0]
 800c3de:	6862      	ldr	r2, [r4, #4]
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	f000 f9a1 	bl	800c728 <memchr>
 800c3e6:	b108      	cbz	r0, 800c3ec <_printf_i+0x1ec>
 800c3e8:	1b40      	subs	r0, r0, r5
 800c3ea:	6060      	str	r0, [r4, #4]
 800c3ec:	6863      	ldr	r3, [r4, #4]
 800c3ee:	6123      	str	r3, [r4, #16]
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3f6:	e7aa      	b.n	800c34e <_printf_i+0x14e>
 800c3f8:	462a      	mov	r2, r5
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	4640      	mov	r0, r8
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	47d0      	blx	sl
 800c402:	3001      	adds	r0, #1
 800c404:	d0ad      	beq.n	800c362 <_printf_i+0x162>
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	079b      	lsls	r3, r3, #30
 800c40a:	d413      	bmi.n	800c434 <_printf_i+0x234>
 800c40c:	68e0      	ldr	r0, [r4, #12]
 800c40e:	9b03      	ldr	r3, [sp, #12]
 800c410:	4298      	cmp	r0, r3
 800c412:	bfb8      	it	lt
 800c414:	4618      	movlt	r0, r3
 800c416:	e7a6      	b.n	800c366 <_printf_i+0x166>
 800c418:	2301      	movs	r3, #1
 800c41a:	4632      	mov	r2, r6
 800c41c:	4649      	mov	r1, r9
 800c41e:	4640      	mov	r0, r8
 800c420:	47d0      	blx	sl
 800c422:	3001      	adds	r0, #1
 800c424:	d09d      	beq.n	800c362 <_printf_i+0x162>
 800c426:	3501      	adds	r5, #1
 800c428:	68e3      	ldr	r3, [r4, #12]
 800c42a:	9903      	ldr	r1, [sp, #12]
 800c42c:	1a5b      	subs	r3, r3, r1
 800c42e:	42ab      	cmp	r3, r5
 800c430:	dcf2      	bgt.n	800c418 <_printf_i+0x218>
 800c432:	e7eb      	b.n	800c40c <_printf_i+0x20c>
 800c434:	2500      	movs	r5, #0
 800c436:	f104 0619 	add.w	r6, r4, #25
 800c43a:	e7f5      	b.n	800c428 <_printf_i+0x228>
 800c43c:	0800df15 	.word	0x0800df15
 800c440:	0800df26 	.word	0x0800df26

0800c444 <__sflush_r>:
 800c444:	898a      	ldrh	r2, [r1, #12]
 800c446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c448:	4605      	mov	r5, r0
 800c44a:	0710      	lsls	r0, r2, #28
 800c44c:	460c      	mov	r4, r1
 800c44e:	d457      	bmi.n	800c500 <__sflush_r+0xbc>
 800c450:	684b      	ldr	r3, [r1, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	dc04      	bgt.n	800c460 <__sflush_r+0x1c>
 800c456:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c458:	2b00      	cmp	r3, #0
 800c45a:	dc01      	bgt.n	800c460 <__sflush_r+0x1c>
 800c45c:	2000      	movs	r0, #0
 800c45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c462:	2e00      	cmp	r6, #0
 800c464:	d0fa      	beq.n	800c45c <__sflush_r+0x18>
 800c466:	2300      	movs	r3, #0
 800c468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c46c:	682f      	ldr	r7, [r5, #0]
 800c46e:	6a21      	ldr	r1, [r4, #32]
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	d032      	beq.n	800c4da <__sflush_r+0x96>
 800c474:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	075a      	lsls	r2, r3, #29
 800c47a:	d505      	bpl.n	800c488 <__sflush_r+0x44>
 800c47c:	6863      	ldr	r3, [r4, #4]
 800c47e:	1ac0      	subs	r0, r0, r3
 800c480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c482:	b10b      	cbz	r3, 800c488 <__sflush_r+0x44>
 800c484:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c486:	1ac0      	subs	r0, r0, r3
 800c488:	2300      	movs	r3, #0
 800c48a:	4602      	mov	r2, r0
 800c48c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c48e:	4628      	mov	r0, r5
 800c490:	6a21      	ldr	r1, [r4, #32]
 800c492:	47b0      	blx	r6
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	d106      	bne.n	800c4a8 <__sflush_r+0x64>
 800c49a:	6829      	ldr	r1, [r5, #0]
 800c49c:	291d      	cmp	r1, #29
 800c49e:	d82b      	bhi.n	800c4f8 <__sflush_r+0xb4>
 800c4a0:	4a28      	ldr	r2, [pc, #160]	; (800c544 <__sflush_r+0x100>)
 800c4a2:	410a      	asrs	r2, r1
 800c4a4:	07d6      	lsls	r6, r2, #31
 800c4a6:	d427      	bmi.n	800c4f8 <__sflush_r+0xb4>
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	6062      	str	r2, [r4, #4]
 800c4ac:	6922      	ldr	r2, [r4, #16]
 800c4ae:	04d9      	lsls	r1, r3, #19
 800c4b0:	6022      	str	r2, [r4, #0]
 800c4b2:	d504      	bpl.n	800c4be <__sflush_r+0x7a>
 800c4b4:	1c42      	adds	r2, r0, #1
 800c4b6:	d101      	bne.n	800c4bc <__sflush_r+0x78>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b903      	cbnz	r3, 800c4be <__sflush_r+0x7a>
 800c4bc:	6560      	str	r0, [r4, #84]	; 0x54
 800c4be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4c0:	602f      	str	r7, [r5, #0]
 800c4c2:	2900      	cmp	r1, #0
 800c4c4:	d0ca      	beq.n	800c45c <__sflush_r+0x18>
 800c4c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	d002      	beq.n	800c4d4 <__sflush_r+0x90>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f7ff fc9a 	bl	800be08 <_free_r>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	6360      	str	r0, [r4, #52]	; 0x34
 800c4d8:	e7c1      	b.n	800c45e <__sflush_r+0x1a>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b0      	blx	r6
 800c4e0:	1c41      	adds	r1, r0, #1
 800c4e2:	d1c8      	bne.n	800c476 <__sflush_r+0x32>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0c5      	beq.n	800c476 <__sflush_r+0x32>
 800c4ea:	2b1d      	cmp	r3, #29
 800c4ec:	d001      	beq.n	800c4f2 <__sflush_r+0xae>
 800c4ee:	2b16      	cmp	r3, #22
 800c4f0:	d101      	bne.n	800c4f6 <__sflush_r+0xb2>
 800c4f2:	602f      	str	r7, [r5, #0]
 800c4f4:	e7b2      	b.n	800c45c <__sflush_r+0x18>
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4fc:	81a3      	strh	r3, [r4, #12]
 800c4fe:	e7ae      	b.n	800c45e <__sflush_r+0x1a>
 800c500:	690f      	ldr	r7, [r1, #16]
 800c502:	2f00      	cmp	r7, #0
 800c504:	d0aa      	beq.n	800c45c <__sflush_r+0x18>
 800c506:	0793      	lsls	r3, r2, #30
 800c508:	bf18      	it	ne
 800c50a:	2300      	movne	r3, #0
 800c50c:	680e      	ldr	r6, [r1, #0]
 800c50e:	bf08      	it	eq
 800c510:	694b      	ldreq	r3, [r1, #20]
 800c512:	1bf6      	subs	r6, r6, r7
 800c514:	600f      	str	r7, [r1, #0]
 800c516:	608b      	str	r3, [r1, #8]
 800c518:	2e00      	cmp	r6, #0
 800c51a:	dd9f      	ble.n	800c45c <__sflush_r+0x18>
 800c51c:	4633      	mov	r3, r6
 800c51e:	463a      	mov	r2, r7
 800c520:	4628      	mov	r0, r5
 800c522:	6a21      	ldr	r1, [r4, #32]
 800c524:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c528:	47e0      	blx	ip
 800c52a:	2800      	cmp	r0, #0
 800c52c:	dc06      	bgt.n	800c53c <__sflush_r+0xf8>
 800c52e:	89a3      	ldrh	r3, [r4, #12]
 800c530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c538:	81a3      	strh	r3, [r4, #12]
 800c53a:	e790      	b.n	800c45e <__sflush_r+0x1a>
 800c53c:	4407      	add	r7, r0
 800c53e:	1a36      	subs	r6, r6, r0
 800c540:	e7ea      	b.n	800c518 <__sflush_r+0xd4>
 800c542:	bf00      	nop
 800c544:	dfbffffe 	.word	0xdfbffffe

0800c548 <_fflush_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	690b      	ldr	r3, [r1, #16]
 800c54c:	4605      	mov	r5, r0
 800c54e:	460c      	mov	r4, r1
 800c550:	b913      	cbnz	r3, 800c558 <_fflush_r+0x10>
 800c552:	2500      	movs	r5, #0
 800c554:	4628      	mov	r0, r5
 800c556:	bd38      	pop	{r3, r4, r5, pc}
 800c558:	b118      	cbz	r0, 800c562 <_fflush_r+0x1a>
 800c55a:	6a03      	ldr	r3, [r0, #32]
 800c55c:	b90b      	cbnz	r3, 800c562 <_fflush_r+0x1a>
 800c55e:	f7ff f9cf 	bl	800b900 <__sinit>
 800c562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0f3      	beq.n	800c552 <_fflush_r+0xa>
 800c56a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c56c:	07d0      	lsls	r0, r2, #31
 800c56e:	d404      	bmi.n	800c57a <_fflush_r+0x32>
 800c570:	0599      	lsls	r1, r3, #22
 800c572:	d402      	bmi.n	800c57a <_fflush_r+0x32>
 800c574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c576:	f7ff fc28 	bl	800bdca <__retarget_lock_acquire_recursive>
 800c57a:	4628      	mov	r0, r5
 800c57c:	4621      	mov	r1, r4
 800c57e:	f7ff ff61 	bl	800c444 <__sflush_r>
 800c582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c584:	4605      	mov	r5, r0
 800c586:	07da      	lsls	r2, r3, #31
 800c588:	d4e4      	bmi.n	800c554 <_fflush_r+0xc>
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	059b      	lsls	r3, r3, #22
 800c58e:	d4e1      	bmi.n	800c554 <_fflush_r+0xc>
 800c590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c592:	f7ff fc1b 	bl	800bdcc <__retarget_lock_release_recursive>
 800c596:	e7dd      	b.n	800c554 <_fflush_r+0xc>

0800c598 <__swhatbuf_r>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	460c      	mov	r4, r1
 800c59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a0:	4615      	mov	r5, r2
 800c5a2:	2900      	cmp	r1, #0
 800c5a4:	461e      	mov	r6, r3
 800c5a6:	b096      	sub	sp, #88	; 0x58
 800c5a8:	da0c      	bge.n	800c5c4 <__swhatbuf_r+0x2c>
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c5b2:	bf0c      	ite	eq
 800c5b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c5b8:	2340      	movne	r3, #64	; 0x40
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	6031      	str	r1, [r6, #0]
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	b016      	add	sp, #88	; 0x58
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}
 800c5c4:	466a      	mov	r2, sp
 800c5c6:	f000 f879 	bl	800c6bc <_fstat_r>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	dbed      	blt.n	800c5aa <__swhatbuf_r+0x12>
 800c5ce:	9901      	ldr	r1, [sp, #4]
 800c5d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c5d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c5d8:	4259      	negs	r1, r3
 800c5da:	4159      	adcs	r1, r3
 800c5dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5e0:	e7eb      	b.n	800c5ba <__swhatbuf_r+0x22>

0800c5e2 <__smakebuf_r>:
 800c5e2:	898b      	ldrh	r3, [r1, #12]
 800c5e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5e6:	079d      	lsls	r5, r3, #30
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	d507      	bpl.n	800c5fe <__smakebuf_r+0x1c>
 800c5ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5f2:	6023      	str	r3, [r4, #0]
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	6163      	str	r3, [r4, #20]
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd70      	pop	{r4, r5, r6, pc}
 800c5fe:	466a      	mov	r2, sp
 800c600:	ab01      	add	r3, sp, #4
 800c602:	f7ff ffc9 	bl	800c598 <__swhatbuf_r>
 800c606:	9900      	ldr	r1, [sp, #0]
 800c608:	4605      	mov	r5, r0
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7fe ff96 	bl	800b53c <_malloc_r>
 800c610:	b948      	cbnz	r0, 800c626 <__smakebuf_r+0x44>
 800c612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c616:	059a      	lsls	r2, r3, #22
 800c618:	d4ef      	bmi.n	800c5fa <__smakebuf_r+0x18>
 800c61a:	f023 0303 	bic.w	r3, r3, #3
 800c61e:	f043 0302 	orr.w	r3, r3, #2
 800c622:	81a3      	strh	r3, [r4, #12]
 800c624:	e7e3      	b.n	800c5ee <__smakebuf_r+0xc>
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	6020      	str	r0, [r4, #0]
 800c62a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c62e:	81a3      	strh	r3, [r4, #12]
 800c630:	9b00      	ldr	r3, [sp, #0]
 800c632:	6120      	str	r0, [r4, #16]
 800c634:	6163      	str	r3, [r4, #20]
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	b15b      	cbz	r3, 800c652 <__smakebuf_r+0x70>
 800c63a:	4630      	mov	r0, r6
 800c63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c640:	f000 f84e 	bl	800c6e0 <_isatty_r>
 800c644:	b128      	cbz	r0, 800c652 <__smakebuf_r+0x70>
 800c646:	89a3      	ldrh	r3, [r4, #12]
 800c648:	f023 0303 	bic.w	r3, r3, #3
 800c64c:	f043 0301 	orr.w	r3, r3, #1
 800c650:	81a3      	strh	r3, [r4, #12]
 800c652:	89a3      	ldrh	r3, [r4, #12]
 800c654:	431d      	orrs	r5, r3
 800c656:	81a5      	strh	r5, [r4, #12]
 800c658:	e7cf      	b.n	800c5fa <__smakebuf_r+0x18>

0800c65a <_raise_r>:
 800c65a:	291f      	cmp	r1, #31
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4604      	mov	r4, r0
 800c660:	460d      	mov	r5, r1
 800c662:	d904      	bls.n	800c66e <_raise_r+0x14>
 800c664:	2316      	movs	r3, #22
 800c666:	6003      	str	r3, [r0, #0]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66c:	bd38      	pop	{r3, r4, r5, pc}
 800c66e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c670:	b112      	cbz	r2, 800c678 <_raise_r+0x1e>
 800c672:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c676:	b94b      	cbnz	r3, 800c68c <_raise_r+0x32>
 800c678:	4620      	mov	r0, r4
 800c67a:	f000 f853 	bl	800c724 <_getpid_r>
 800c67e:	462a      	mov	r2, r5
 800c680:	4601      	mov	r1, r0
 800c682:	4620      	mov	r0, r4
 800c684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c688:	f000 b83a 	b.w	800c700 <_kill_r>
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d00a      	beq.n	800c6a6 <_raise_r+0x4c>
 800c690:	1c59      	adds	r1, r3, #1
 800c692:	d103      	bne.n	800c69c <_raise_r+0x42>
 800c694:	2316      	movs	r3, #22
 800c696:	6003      	str	r3, [r0, #0]
 800c698:	2001      	movs	r0, #1
 800c69a:	e7e7      	b.n	800c66c <_raise_r+0x12>
 800c69c:	2400      	movs	r4, #0
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6a4:	4798      	blx	r3
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e7e0      	b.n	800c66c <_raise_r+0x12>
	...

0800c6ac <raise>:
 800c6ac:	4b02      	ldr	r3, [pc, #8]	; (800c6b8 <raise+0xc>)
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f7ff bfd2 	b.w	800c65a <_raise_r>
 800c6b6:	bf00      	nop
 800c6b8:	200000d8 	.word	0x200000d8

0800c6bc <_fstat_r>:
 800c6bc:	b538      	push	{r3, r4, r5, lr}
 800c6be:	2300      	movs	r3, #0
 800c6c0:	4d06      	ldr	r5, [pc, #24]	; (800c6dc <_fstat_r+0x20>)
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	4608      	mov	r0, r1
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	f7f4 f81b 	bl	8000704 <_fstat>
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	d102      	bne.n	800c6d8 <_fstat_r+0x1c>
 800c6d2:	682b      	ldr	r3, [r5, #0]
 800c6d4:	b103      	cbz	r3, 800c6d8 <_fstat_r+0x1c>
 800c6d6:	6023      	str	r3, [r4, #0]
 800c6d8:	bd38      	pop	{r3, r4, r5, pc}
 800c6da:	bf00      	nop
 800c6dc:	2000037c 	.word	0x2000037c

0800c6e0 <_isatty_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	4d05      	ldr	r5, [pc, #20]	; (800c6fc <_isatty_r+0x1c>)
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	4608      	mov	r0, r1
 800c6ea:	602b      	str	r3, [r5, #0]
 800c6ec:	f7f4 f819 	bl	8000722 <_isatty>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d102      	bne.n	800c6fa <_isatty_r+0x1a>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	b103      	cbz	r3, 800c6fa <_isatty_r+0x1a>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	2000037c 	.word	0x2000037c

0800c700 <_kill_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	2300      	movs	r3, #0
 800c704:	4d06      	ldr	r5, [pc, #24]	; (800c720 <_kill_r+0x20>)
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	602b      	str	r3, [r5, #0]
 800c70e:	f7f3 ffb7 	bl	8000680 <_kill>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	d102      	bne.n	800c71c <_kill_r+0x1c>
 800c716:	682b      	ldr	r3, [r5, #0]
 800c718:	b103      	cbz	r3, 800c71c <_kill_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd38      	pop	{r3, r4, r5, pc}
 800c71e:	bf00      	nop
 800c720:	2000037c 	.word	0x2000037c

0800c724 <_getpid_r>:
 800c724:	f7f3 bfa5 	b.w	8000672 <_getpid>

0800c728 <memchr>:
 800c728:	4603      	mov	r3, r0
 800c72a:	b510      	push	{r4, lr}
 800c72c:	b2c9      	uxtb	r1, r1
 800c72e:	4402      	add	r2, r0
 800c730:	4293      	cmp	r3, r2
 800c732:	4618      	mov	r0, r3
 800c734:	d101      	bne.n	800c73a <memchr+0x12>
 800c736:	2000      	movs	r0, #0
 800c738:	e003      	b.n	800c742 <memchr+0x1a>
 800c73a:	7804      	ldrb	r4, [r0, #0]
 800c73c:	3301      	adds	r3, #1
 800c73e:	428c      	cmp	r4, r1
 800c740:	d1f6      	bne.n	800c730 <memchr+0x8>
 800c742:	bd10      	pop	{r4, pc}

0800c744 <_init>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr

0800c750 <_fini>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr
