
Lfs_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000186c  0800cdb4  0800cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e620  0800e620  000200dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e620  0800e620  000200dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e620  0800e620  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e620  0800e620  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e624  0800e624  0001e624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800e628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200000dc  0800e704  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800e704  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119d9  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221e  00000000  00000000  00031b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00033d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e10  00000000  00000000  00034d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e26  00000000  00000000  00035b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001107a  00000000  00000000  0004e996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089310  00000000  00000000  0005fa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005110  00000000  00000000  000e8d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ede30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000dc 	.word	0x200000dc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800cd9c 	.word	0x0800cd9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e0 	.word	0x200000e0
 8000148:	0800cd9c 	.word	0x0800cd9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__popcountsi2>:
 800015c:	0843      	lsrs	r3, r0, #1
 800015e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000162:	1ac0      	subs	r0, r0, r3
 8000164:	0883      	lsrs	r3, r0, #2
 8000166:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800016a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800016e:	4418      	add	r0, r3
 8000170:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000174:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000178:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800017c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000180:	0e00      	lsrs	r0, r0, #24
 8000182:	4770      	bx	lr

08000184 <_write>:
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */


int _write(int file, char *ptr, int len)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	60f8      	str	r0, [r7, #12]
 800018c:	60b9      	str	r1, [r7, #8]
 800018e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	b29a      	uxth	r2, r3
 8000194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000198:	68b9      	ldr	r1, [r7, #8]
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <_write+0x28>)
 800019c:	f00b fad2 	bl	800b744 <HAL_UART_Transmit>
  return len;
 80001a0:	687b      	ldr	r3, [r7, #4]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000150 	.word	0x20000150

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b5b0      	push	{r4, r5, r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char file_to_write_test[43]="a quick brown fox jumps over the lazy dog \n" ;
 80001b6:	4b72      	ldr	r3, [pc, #456]	; (8000380 <main+0x1d0>)
 80001b8:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 80001bc:	461d      	mov	r5, r3
 80001be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ca:	c403      	stmia	r4!, {r0, r1}
 80001cc:	8022      	strh	r2, [r4, #0]
 80001ce:	3402      	adds	r4, #2
 80001d0:	0c13      	lsrs	r3, r2, #16
 80001d2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f009 fdc8 	bl	8009d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f8e4 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f988 	bl	80004f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001e0:	f000 f926 	bl	8000430 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80001e4:	f000 f95a 	bl	800049c <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Storage_error_t  err = init_storage(&hspi1 ,GPIOB, GPIO_PIN_0);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4966      	ldr	r1, [pc, #408]	; (8000384 <main+0x1d4>)
 80001ec:	4866      	ldr	r0, [pc, #408]	; (8000388 <main+0x1d8>)
 80001ee:	f007 fd83 	bl	8007cf8 <init_storage>
 80001f2:	4603      	mov	r3, r0
 80001f4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  if(err != STORAGE_OK )
 80001f8:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d003      	beq.n	8000208 <main+0x58>
  {
	  printf("main : fail to initialize local storage \n");	while(1);
 8000200:	4862      	ldr	r0, [pc, #392]	; (800038c <main+0x1dc>)
 8000202:	f00b ff23 	bl	800c04c <puts>
 8000206:	e7fe      	b.n	8000206 <main+0x56>
//		  printf("read lfs %s \n", lb);
//		  HAL_Delay(50);
//  }

  Info_firmware_t _firmware ;
  err = get_firmware_info(&_firmware);
 8000208:	f107 0308 	add.w	r3, r7, #8
 800020c:	4618      	mov	r0, r3
 800020e:	f008 fbdd 	bl	80089cc <get_firmware_info>
 8000212:	4603      	mov	r3, r0
 8000214:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  if(err != 1)
 8000218:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 800021c:	2b01      	cmp	r3, #1
 800021e:	d003      	beq.n	8000228 <main+0x78>
  {
	  printf("fail to get firmware info \n");	while(1);
 8000220:	485b      	ldr	r0, [pc, #364]	; (8000390 <main+0x1e0>)
 8000222:	f00b ff13 	bl	800c04c <puts>
 8000226:	e7fe      	b.n	8000226 <main+0x76>
  }

  printf("firmware local dir : %s \n", _firmware.local_firmwre_dir);
 8000228:	f107 0308 	add.w	r3, r7, #8
 800022c:	3398      	adds	r3, #152	; 0x98
 800022e:	4619      	mov	r1, r3
 8000230:	4858      	ldr	r0, [pc, #352]	; (8000394 <main+0x1e4>)
 8000232:	f00b fe9d 	bl	800bf70 <iprintf>

  //_firmware.remove();


  int p = 8 ;
 8000236:	2308      	movs	r3, #8
 8000238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  int x = 43/p ;
 800023c:	222b      	movs	r2, #43	; 0x2b
 800023e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000242:	fb92 f3f3 	sdiv	r3, r2, r3
 8000246:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  char my_temp_buff[8];
  for(int i=0; i<=x; i++)
 800024a:	2300      	movs	r3, #0
 800024c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000250:	e03e      	b.n	80002d0 <main+0x120>
  {
	  memset(my_temp_buff, 0, 8);
 8000252:	463b      	mov	r3, r7
 8000254:	2208      	movs	r2, #8
 8000256:	2100      	movs	r1, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f00b ffe7 	bl	800c22c <memset>
	  if((43-x*i) < 8)
 800025e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000262:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000266:	fb02 f303 	mul.w	r3, r2, r3
 800026a:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 800026e:	2b07      	cmp	r3, #7
 8000270:	dc09      	bgt.n	8000286 <main+0xd6>
	  {
		  p = 43-x*i ;
 8000272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000276:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800027a:	fb02 f303 	mul.w	r3, r2, r3
 800027e:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8000282:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  }
	  memcpy(my_temp_buff, &file_to_write_test[i*p], p);
 8000286:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800028a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800028e:	fb02 f303 	mul.w	r3, r2, r3
 8000292:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8000296:	18d1      	adds	r1, r2, r3
 8000298:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800029c:	463b      	mov	r3, r7
 800029e:	4618      	mov	r0, r3
 80002a0:	f00c f895 	bl	800c3ce <memcpy>
	  printf("main:to write %s \n", my_temp_buff);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4619      	mov	r1, r3
 80002a8:	483b      	ldr	r0, [pc, #236]	; (8000398 <main+0x1e8>)
 80002aa:	f00b fe61 	bl	800bf70 <iprintf>
	  _firmware.write((uint8_t *)my_temp_buff, p);
 80002ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80002b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002b6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80002ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80002be:	b291      	uxth	r1, r2
 80002c0:	463a      	mov	r2, r7
 80002c2:	4610      	mov	r0, r2
 80002c4:	4798      	blx	r3
  for(int i=0; i<=x; i++)
 80002c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80002ca:	3301      	adds	r3, #1
 80002cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80002d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80002d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80002d8:	429a      	cmp	r2, r3
 80002da:	ddba      	ble.n	8000252 <main+0xa2>
  }

  p=8 ;
 80002dc:	2308      	movs	r3, #8
 80002de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for(int i=0; i<=x; i++)
 80002e2:	2300      	movs	r3, #0
 80002e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80002e8:	e038      	b.n	800035c <main+0x1ac>
  {
	  int seek = i*p ;
 80002ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80002ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  if((43-x*i) < 8)
 80002fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80002fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000302:	fb02 f303 	mul.w	r3, r2, r3
 8000306:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 800030a:	2b07      	cmp	r3, #7
 800030c:	dc09      	bgt.n	8000322 <main+0x172>
	  {
		  p = 43-x*i ;
 800030e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000312:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000316:	fb02 f303 	mul.w	r3, r2, r3
 800031a:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 800031e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  }
	  memset(my_temp_buff, 0, 8);
 8000322:	463b      	mov	r3, r7
 8000324:	2208      	movs	r2, #8
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f00b ff7f 	bl	800c22c <memset>
	  _firmware.read((uint8_t *)my_temp_buff, p, seek);
 800032e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000332:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000336:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800033a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800033e:	b291      	uxth	r1, r2
 8000340:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000344:	4638      	mov	r0, r7
 8000346:	4798      	blx	r3
	  printf("%s", my_temp_buff);
 8000348:	463b      	mov	r3, r7
 800034a:	4619      	mov	r1, r3
 800034c:	4813      	ldr	r0, [pc, #76]	; (800039c <main+0x1ec>)
 800034e:	f00b fe0f 	bl	800bf70 <iprintf>
  for(int i=0; i<=x; i++)
 8000352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000356:	3301      	adds	r3, #1
 8000358:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800035c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000364:	429a      	cmp	r2, r3
 8000366:	ddc0      	ble.n	80002ea <main+0x13a>
  }
  printf("\n");
 8000368:	200a      	movs	r0, #10
 800036a:	f00b fe13 	bl	800bf94 <putchar>
//	  }
//
//	  //_storage.pop(lb, 15);
//	  while(1)
//	  {
		  printf("Main Loop ... \n");
 800036e:	480c      	ldr	r0, [pc, #48]	; (80003a0 <main+0x1f0>)
 8000370:	f00b fe6c 	bl	800c04c <puts>
		  HAL_Delay(1000);
 8000374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000378:	f009 fd58 	bl	8009e2c <HAL_Delay>
		  printf("Main Loop ... \n");
 800037c:	e7f7      	b.n	800036e <main+0x1be>
 800037e:	bf00      	nop
 8000380:	0800ce40 	.word	0x0800ce40
 8000384:	40010c00 	.word	0x40010c00
 8000388:	200000f8 	.word	0x200000f8
 800038c:	0800cdb4 	.word	0x0800cdb4
 8000390:	0800cde0 	.word	0x0800cde0
 8000394:	0800cdfc 	.word	0x0800cdfc
 8000398:	0800ce18 	.word	0x0800ce18
 800039c:	0800ce2c 	.word	0x0800ce2c
 80003a0:	0800ce30 	.word	0x0800ce30

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	; 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f00b ff3a 	bl	800c22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d4:	2301      	movs	r3, #1
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	2302      	movs	r3, #2
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80003e2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	4618      	mov	r0, r3
 80003ee:	f009 ffc1 	bl	800a374 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f8:	f000 f8c4 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2302      	movs	r3, #2
 8000402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000408:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2102      	movs	r1, #2
 8000416:	4618      	mov	r0, r3
 8000418:	f00a fa2e 	bl	800a878 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000422:	f000 f8af 	bl	8000584 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3740      	adds	r7, #64	; 0x40
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_SPI1_Init+0x64>)
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <MX_SPI1_Init+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_SPI1_Init+0x64>)
 800043c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_SPI1_Init+0x64>)
 800045c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_SPI1_Init+0x64>)
 8000464:	2208      	movs	r2, #8
 8000466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_SPI1_Init+0x64>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_SPI1_Init+0x64>)
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_SPI1_Init+0x64>)
 8000476:	2200      	movs	r2, #0
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_SPI1_Init+0x64>)
 800047c:	220a      	movs	r2, #10
 800047e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_SPI1_Init+0x64>)
 8000482:	f00a fb87 	bl	800ab94 <HAL_SPI_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800048c:	f000 f87a 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000f8 	.word	0x200000f8
 8000498:	40013000 	.word	0x40013000

0800049c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART3_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART3_UART_Init+0x4c>)
 80004d4:	f00b f8e6 	bl	800b6a4 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f000 f851 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000150 	.word	0x20000150
 80004ec:	40004800 	.word	0x40004800

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_GPIO_Init+0x8c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a1c      	ldr	r2, [pc, #112]	; (800057c <MX_GPIO_Init+0x8c>)
 800050a:	f043 0320 	orr.w	r3, r3, #32
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_GPIO_Init+0x8c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0320 	and.w	r3, r3, #32
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_GPIO_Init+0x8c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <MX_GPIO_Init+0x8c>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_GPIO_Init+0x8c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_GPIO_Init+0x8c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <MX_GPIO_Init+0x8c>)
 800053a:	f043 0308 	orr.w	r3, r3, #8
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_GPIO_Init+0x8c>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0308 	and.w	r3, r3, #8
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2101      	movs	r1, #1
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <MX_GPIO_Init+0x90>)
 8000552:	f009 fef7 	bl	800a344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000556:	2301      	movs	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	4619      	mov	r1, r3
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <MX_GPIO_Init+0x90>)
 800056e:	f009 fd65 	bl	800a03c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000572:	bf00      	nop
 8000574:	3720      	adds	r7, #32
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	40010c00 	.word	0x40010c00

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_MspInit+0x5c>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a14      	ldr	r2, [pc, #80]	; (80005ec <HAL_MspInit+0x5c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_MspInit+0x5c>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x5c>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x5c>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x5c>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_MspInit+0x60>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_MspInit+0x60>)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010000 	.word	0x40010000

080005f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <HAL_SPI_MspInit+0x88>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d12f      	bne.n	8000674 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <HAL_SPI_MspInit+0x8c>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a19      	ldr	r2, [pc, #100]	; (8000680 <HAL_SPI_MspInit+0x8c>)
 800061a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <HAL_SPI_MspInit+0x8c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <HAL_SPI_MspInit+0x8c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <HAL_SPI_MspInit+0x8c>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_SPI_MspInit+0x8c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000644:	23a0      	movs	r3, #160	; 0xa0
 8000646:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4619      	mov	r1, r3
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <HAL_SPI_MspInit+0x90>)
 8000658:	f009 fcf0 	bl	800a03c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <HAL_SPI_MspInit+0x90>)
 8000670:	f009 fce4 	bl	800a03c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40013000 	.word	0x40013000
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800

08000688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <HAL_UART_MspInit+0x8c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d131      	bne.n	800070c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	4a1a      	ldr	r2, [pc, #104]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b2:	61d3      	str	r3, [r2, #28]
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_UART_MspInit+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <HAL_UART_MspInit+0x94>)
 80006ee:	f009 fca5 	bl	800a03c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <HAL_UART_MspInit+0x94>)
 8000708:	f009 fc98 	bl	800a03c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004800 	.word	0x40004800
 8000718:	40021000 	.word	0x40021000
 800071c:	40010c00 	.word	0x40010c00

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <MemManage_Handler+0x4>

08000732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <UsageFault_Handler+0x4>

0800073e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000766:	f009 fb45 	bl	8009df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}

0800076e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  return 1;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <_kill>:

int _kill(int pid, int sig)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000786:	f00b fded 	bl	800c364 <__errno>
 800078a:	4603      	mov	r3, r0
 800078c:	2216      	movs	r2, #22
 800078e:	601a      	str	r2, [r3, #0]
  return -1;
 8000790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <_exit>:

void _exit (int status)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ffe7 	bl	800077c <_kill>
  while (1) {}    /* Make sure we hang here */
 80007ae:	e7fe      	b.n	80007ae <_exit+0x12>

080007b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e00a      	b.n	80007d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c2:	f3af 8000 	nop.w
 80007c6:	4601      	mov	r1, r0
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf0      	blt.n	80007c2 <_read+0x12>
  }

  return len;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000810:	605a      	str	r2, [r3, #4]
  return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <_isatty>:

int _isatty(int file)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000832:	b480      	push	{r7}
 8000834:	b085      	sub	sp, #20
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
	...

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f00b fd72 	bl	800c364 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20005000 	.word	0x20005000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000198 	.word	0x20000198
 80008b4:	20000388 	.word	0x20000388

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff fff8 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480b      	ldr	r0, [pc, #44]	; (80008f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ca:	490c      	ldr	r1, [pc, #48]	; (80008fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008cc:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008e0:	4c09      	ldr	r4, [pc, #36]	; (8000908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f00b fd3f 	bl	800c370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008f2:	f7ff fc5d 	bl	80001b0 <main>
  bx lr
 80008f6:	4770      	bx	lr
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000900:	0800e628 	.word	0x0800e628
  ldr r2, =_sbss
 8000904:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000908:	20000384 	.word	0x20000384

0800090c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_2_IRQHandler>

0800090e <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4293      	cmp	r3, r2
 800091e:	bf38      	it	cc
 8000920:	4613      	movcc	r3, r2
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4293      	cmp	r3, r2
 800093c:	bf28      	it	cs
 800093e:	4613      	movcs	r3, r2
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	fbb3 f2f2 	udiv	r2, r3, r2
 800095c:	6839      	ldr	r1, [r7, #0]
 800095e:	fb01 f202 	mul.w	r2, r1, r2
 8000962:	1a9b      	subs	r3, r3, r2
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	1ad3      	subs	r3, r2, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	3b01      	subs	r3, #1
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffdf 	bl	800094a <lfs_aligndown>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	fab3 f383 	clz	r3, r3
 80009a6:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	fa93 f3a3 	rbit	r3, r3
 80009c2:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff fbbf 	bl	800015c <__popcountsi2>
 80009de:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	1ad3      	subs	r3, r2, r3
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8000a0a:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ffef 	bl	8000a02 <lfs_fromle32>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ffee 	bl	8000a2e <lfs_frombe32>
 8000a52:	4603      	mov	r3, r0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f00b f829 	bl	800babc <malloc>
 8000a6a:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f00b f825 	bl	800bacc <free>
#else
    (void)p;
#endif
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a9a:	601a      	str	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68d8      	ldr	r0, [r3, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	461a      	mov	r2, r3
 8000abc:	21ff      	movs	r1, #255	; 0xff
 8000abe:	f00b fbb5 	bl	800c22c <memset>
    pcache->block = LFS_BLOCK_NULL;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac8:	601a      	str	r2, [r3, #0]
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8000ad4:	b5b0      	push	{r4, r5, r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
 8000ae0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8000ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae4:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 8000ae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aea:	441a      	add	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d80a      	bhi.n	8000b0c <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8124 	beq.w	8000d48 <lfs_bd_read+0x274>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b06:	429a      	cmp	r2, r3
 8000b08:	f0c0 811e 	bcc.w	8000d48 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 8000b0c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000b10:	e11f      	b.n	8000d52 <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8000b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b14:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d03f      	beq.n	8000b9c <lfs_bd_read+0xc8>
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d13a      	bne.n	8000b9c <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8000b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d232      	bcs.n	8000b9c <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d324      	bcc.n	8000b8a <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	6859      	ldr	r1, [r3, #4]
 8000b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4a:	1acb      	subs	r3, r1, r3
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4619      	mov	r1, r3
 8000b50:	69b8      	ldr	r0, [r7, #24]
 8000b52:	f7ff feeb 	bl	800092c <lfs_min>
 8000b56:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b62:	1acb      	subs	r3, r1, r3
 8000b64:	4413      	add	r3, r2
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	69f8      	ldr	r0, [r7, #28]
 8000b6c:	f00b fc2f 	bl	800c3ce <memcpy>

                data += diff;
 8000b70:	69fa      	ldr	r2, [r7, #28]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4413      	add	r3, r2
 8000b76:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000b88:	e0de      	b.n	8000d48 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	69b8      	ldr	r0, [r7, #24]
 8000b96:	f7ff fec9 	bl	800092c <lfs_min>
 8000b9a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d13a      	bne.n	8000c1c <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	4413      	add	r3, r2
        if (block == rcache->block &&
 8000bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d232      	bcs.n	8000c1c <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d324      	bcc.n	8000c0a <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6859      	ldr	r1, [r3, #4]
 8000bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bca:	1acb      	subs	r3, r1, r3
 8000bcc:	4413      	add	r3, r2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	69b8      	ldr	r0, [r7, #24]
 8000bd2:	f7ff feab 	bl	800092c <lfs_min>
 8000bd6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000be2:	1acb      	subs	r3, r1, r3
 8000be4:	4413      	add	r3, r2
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4619      	mov	r1, r3
 8000bea:	69f8      	ldr	r0, [r7, #28]
 8000bec:	f00b fbef 	bl	800c3ce <memcpy>

                data += diff;
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8000bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8000c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8000c08:	e09e      	b.n	8000d48 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	69b8      	ldr	r0, [r7, #24]
 8000c16:	f7ff fe89 	bl	800092c <lfs_min>
 8000c1a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d336      	bcc.n	8000c92 <lfs_bd_read+0x1be>
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c30:	fb01 f202 	mul.w	r2, r1, r2
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d12b      	bne.n	8000c92 <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c3e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8000c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d325      	bcc.n	8000c92 <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	69b8      	ldr	r0, [r7, #24]
 8000c50:	f7ff fe7b 	bl	800094a <lfs_aligndown>
 8000c54:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c5a:	685c      	ldr	r4, [r3, #4]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c6a:	47a0      	blx	r4
 8000c6c:	6178      	str	r0, [r7, #20]
            if (err) {
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <lfs_bd_read+0x1a4>
                return err;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	e06c      	b.n	8000d52 <lfs_bd_read+0x27e>
            }

            data += diff;
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8000c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4413      	add	r3, r2
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8000c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8000c90:	e05a      	b.n	8000d48 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00a      	beq.n	8000cb0 <lfs_bd_read+0x1dc>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d305      	bcc.n	8000cb0 <lfs_bd_read+0x1dc>
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <lfs_bd_read+0x288>)
 8000ca6:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <lfs_bd_read+0x28c>)
 8000ca8:	216b      	movs	r1, #107	; 0x6b
 8000caa:	482e      	ldr	r0, [pc, #184]	; (8000d64 <lfs_bd_read+0x290>)
 8000cac:	f00a feca 	bl	800ba44 <__assert_func>
        rcache->block = block;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cb4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cc0:	f7ff fe43 	bl	800094a <lfs_aligndown>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8000cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cd4:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4610      	mov	r0, r2
 8000cda:	f7ff fe4a 	bl	8000972 <lfs_alignup>
 8000cde:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ce4:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4610      	mov	r0, r2
 8000cea:	f7ff fe1f 	bl	800092c <lfs_min>
 8000cee:	4602      	mov	r2, r0
                - rcache->off,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8000cf4:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4610      	mov	r0, r2
 8000d00:	f7ff fe14 	bl	800092c <lfs_min>
 8000d04:	4602      	mov	r2, r0
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d0e:	685c      	ldr	r4, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	462b      	mov	r3, r5
 8000d28:	47a0      	blx	r4
 8000d2a:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	dd05      	ble.n	8000d3e <lfs_bd_read+0x26a>
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <lfs_bd_read+0x294>)
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <lfs_bd_read+0x28c>)
 8000d36:	2176      	movs	r1, #118	; 0x76
 8000d38:	480a      	ldr	r0, [pc, #40]	; (8000d64 <lfs_bd_read+0x290>)
 8000d3a:	f00a fe83 	bl	800ba44 <__assert_func>
        if (err) {
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <lfs_bd_read+0x274>
            return err;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	e004      	b.n	8000d52 <lfs_bd_read+0x27e>
    while (size > 0) {
 8000d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f47f aee1 	bne.w	8000b12 <lfs_bd_read+0x3e>
        }
    }

    return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0800ce6c 	.word	0x0800ce6c
 8000d60:	0800e23c 	.word	0x0800e23c
 8000d64:	0800ce9c 	.word	0x0800ce9c
 8000d68:	0800cebc 	.word	0x0800cebc

08000d6c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b090      	sub	sp, #64	; 0x40
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8000d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    lfs_size_t diff = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d86:	e039      	b.n	8000dfc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8000d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2108      	movs	r1, #8
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fdcb 	bl	800092c <lfs_min>
 8000d96:	6278      	str	r0, [r7, #36]	; 0x24
        int err = lfs_bd_read(lfs,
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	1ad1      	subs	r1, r2, r3
 8000d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	4413      	add	r3, r2
 8000da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da6:	9203      	str	r2, [sp, #12]
 8000da8:	f107 0214 	add.w	r2, r7, #20
 8000dac:	9202      	str	r2, [sp, #8]
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	460b      	mov	r3, r1
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fe8a 	bl	8000ad4 <lfs_bd_read>
 8000dc0:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000dc2:	6a3b      	ldr	r3, [r7, #32]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <lfs_bd_cmp+0x60>
            return err;
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	e01c      	b.n	8000e06 <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 8000dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd0:	18d1      	adds	r1, r2, r3
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f00b fa17 	bl	800c20c <memcmp>
 8000dde:	61f8      	str	r0, [r7, #28]
        if (res) {
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da01      	bge.n	8000df0 <lfs_bd_cmp+0x84>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e00a      	b.n	8000e06 <lfs_bd_cmp+0x9a>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e008      	b.n	8000e06 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	4413      	add	r3, r2
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d3c1      	bcc.n	8000d88 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3730      	adds	r7, #48	; 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b08e      	sub	sp, #56	; 0x38
 8000e12:	af04      	add	r7, sp, #16
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
 8000e24:	e030      	b.n	8000e88 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 8000e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fd7c 	bl	800092c <lfs_min>
 8000e34:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	1ad1      	subs	r1, r2, r3
 8000e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	4413      	add	r3, r2
 8000e42:	6a3a      	ldr	r2, [r7, #32]
 8000e44:	9203      	str	r2, [sp, #12]
 8000e46:	f107 0214 	add.w	r2, r7, #20
 8000e4a:	9202      	str	r2, [sp, #8]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	460b      	mov	r3, r1
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fe3b 	bl	8000ad4 <lfs_bd_read>
 8000e5e:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <lfs_bd_crc+0x5c>
            return err;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	e013      	b.n	8000e92 <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 8000e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f107 0114 	add.w	r1, r7, #20
 8000e72:	6a3a      	ldr	r2, [r7, #32]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 feb1 	bl	8007bdc <lfs_crc>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7e:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 8000e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	4413      	add	r3, r2
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
 8000e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d3ca      	bcc.n	8000e26 <lfs_bd_crc+0x18>
    }

    return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af04      	add	r7, sp, #16
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb2:	d060      	beq.n	8000f76 <lfs_bd_flush+0xda>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f113 0f02 	cmn.w	r3, #2
 8000ebc:	d05b      	beq.n	8000f76 <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d305      	bcc.n	8000ed6 <lfs_bd_flush+0x3a>
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <lfs_bd_flush+0xe4>)
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <lfs_bd_flush+0xe8>)
 8000ece:	21b3      	movs	r1, #179	; 0xb3
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <lfs_bd_flush+0xec>)
 8000ed2:	f00a fdb7 	bl	800ba44 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	f7ff fd45 	bl	8000972 <lfs_alignup>
 8000ee8:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000eee:	689c      	ldr	r4, [r3, #8]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	462b      	mov	r3, r5
 8000f06:	47a0      	blx	r4
 8000f08:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dd05      	ble.n	8000f1c <lfs_bd_flush+0x80>
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <lfs_bd_flush+0xf0>)
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <lfs_bd_flush+0xe8>)
 8000f14:	21b7      	movs	r1, #183	; 0xb7
 8000f16:	481c      	ldr	r0, [pc, #112]	; (8000f88 <lfs_bd_flush+0xec>)
 8000f18:	f00a fd94 	bl	800ba44 <__assert_func>
        if (err) {
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <lfs_bd_flush+0x8a>
            return err;
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	e028      	b.n	8000f78 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d020      	beq.n	8000f6e <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff fdab 	bl	8000a8a <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8000f40:	69f8      	ldr	r0, [r7, #28]
 8000f42:	9003      	str	r0, [sp, #12]
 8000f44:	9102      	str	r1, [sp, #8]
 8000f46:	9201      	str	r2, [sp, #4]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff ff0b 	bl	8000d6c <lfs_bd_cmp>
 8000f56:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da01      	bge.n	8000f62 <lfs_bd_flush+0xc6>
                return res;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 8000f68:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8000f6c:	e004      	b.n	8000f78 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fd98 	bl	8000aa6 <lfs_cache_zero>
    }

    return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3720      	adds	r7, #32
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f80:	0800cec8 	.word	0x0800cec8
 8000f84:	0800e248 	.word	0x0800e248
 8000f88:	0800ce9c 	.word	0x0800ce9c
 8000f8c:	0800cebc 	.word	0x0800cebc

08000f90 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff fd72 	bl	8000a8a <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff ff75 	bl	8000e9c <lfs_bd_flush>
 8000fb2:	6178      	str	r0, [r7, #20]
    if (err) {
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <lfs_bd_sync+0x2e>
        return err;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	e011      	b.n	8000fe2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4798      	blx	r3
 8000fcc:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd05      	ble.n	8000fe0 <lfs_bd_sync+0x50>
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <lfs_bd_sync+0x5c>)
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <lfs_bd_sync+0x60>)
 8000fd8:	21dd      	movs	r1, #221	; 0xdd
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <lfs_bd_sync+0x64>)
 8000fdc:	f00a fd32 	bl	800ba44 <__assert_func>
    return err;
 8000fe0:	697b      	ldr	r3, [r7, #20]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	0800cebc 	.word	0x0800cebc
 8000ff0:	0800e258 	.word	0x0800e258
 8000ff4:	0800ce9c 	.word	0x0800ce9c

08000ff8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8001006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001008:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800100a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800100c:	f113 0f02 	cmn.w	r3, #2
 8001010:	d00a      	beq.n	8001028 <lfs_bd_prog+0x30>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001018:	429a      	cmp	r2, r3
 800101a:	d305      	bcc.n	8001028 <lfs_bd_prog+0x30>
 800101c:	4b47      	ldr	r3, [pc, #284]	; (800113c <lfs_bd_prog+0x144>)
 800101e:	4a48      	ldr	r2, [pc, #288]	; (8001140 <lfs_bd_prog+0x148>)
 8001020:	21e8      	movs	r1, #232	; 0xe8
 8001022:	4848      	ldr	r0, [pc, #288]	; (8001144 <lfs_bd_prog+0x14c>)
 8001024:	f00a fd0e 	bl	800ba44 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8001028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102c:	441a      	add	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	d978      	bls.n	800112a <lfs_bd_prog+0x132>
 8001038:	4b43      	ldr	r3, [pc, #268]	; (8001148 <lfs_bd_prog+0x150>)
 800103a:	4a41      	ldr	r2, [pc, #260]	; (8001140 <lfs_bd_prog+0x148>)
 800103c:	21e9      	movs	r1, #233	; 0xe9
 800103e:	4841      	ldr	r0, [pc, #260]	; (8001144 <lfs_bd_prog+0x14c>)
 8001040:	f00a fd00 	bl	800ba44 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800104a:	429a      	cmp	r2, r3
 800104c:	d151      	bne.n	80010f2 <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8001052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001054:	429a      	cmp	r2, r3
 8001056:	d34c      	bcc.n	80010f2 <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	4413      	add	r3, r2
                off >= pcache->off &&
 8001064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001066:	429a      	cmp	r2, r3
 8001068:	d243      	bcs.n	80010f2 <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800106e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8001078:	4413      	add	r3, r2
 800107a:	4619      	mov	r1, r3
 800107c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800107e:	f7ff fc55 	bl	800092c <lfs_min>
 8001082:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800108e:	1acb      	subs	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	69f9      	ldr	r1, [r7, #28]
 8001096:	4618      	mov	r0, r3
 8001098:	f00b f999 	bl	800c3ce <memcpy>

            data += diff;
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4413      	add	r3, r2
 80010a2:	61fb      	str	r3, [r7, #28]
            off += diff;
 80010a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4413      	add	r3, r2
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80010ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	6898      	ldr	r0, [r3, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fc24 	bl	800090e <lfs_max>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d127      	bne.n	800112a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f7ff fedb 	bl	8000e9c <lfs_bd_flush>
 80010e6:	6178      	str	r0, [r7, #20]
                if (err) {
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d01d      	beq.n	800112a <lfs_bd_prog+0x132>
                    return err;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	e01f      	b.n	8001132 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010fa:	d006      	beq.n	800110a <lfs_bd_prog+0x112>
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <lfs_bd_prog+0x154>)
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <lfs_bd_prog+0x148>)
 8001100:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001104:	480f      	ldr	r0, [pc, #60]	; (8001144 <lfs_bd_prog+0x14c>)
 8001106:	f00a fc9d 	bl	800ba44 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4619      	mov	r1, r3
 8001118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111a:	f7ff fc16 	bl	800094a <lfs_aligndown>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112c:	2b00      	cmp	r3, #0
 800112e:	d189      	bne.n	8001044 <lfs_bd_prog+0x4c>
    }

    return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	0800ceec 	.word	0x0800ceec
 8001140:	0800e264 	.word	0x0800e264
 8001144:	0800ce9c 	.word	0x0800ce9c
 8001148:	0800cf24 	.word	0x0800cf24
 800114c:	0800cf48 	.word	0x0800cf48

08001150 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d306      	bcc.n	8001172 <lfs_bd_erase+0x22>
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <lfs_bd_erase+0x54>)
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <lfs_bd_erase+0x58>)
 8001168:	f44f 718a 	mov.w	r1, #276	; 0x114
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <lfs_bd_erase+0x5c>)
 800116e:	f00a fc69 	bl	800ba44 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	4610      	mov	r0, r2
 8001180:	4798      	blx	r3
 8001182:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	dd06      	ble.n	8001198 <lfs_bd_erase+0x48>
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <lfs_bd_erase+0x60>)
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <lfs_bd_erase+0x58>)
 800118e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <lfs_bd_erase+0x5c>)
 8001194:	f00a fc56 	bl	800ba44 <__assert_func>
    return err;
 8001198:	68fb      	ldr	r3, [r7, #12]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800cf6c 	.word	0x0800cf6c
 80011a8:	0800e270 	.word	0x0800e270
 80011ac:	0800ce9c 	.word	0x0800ce9c
 80011b0:	0800cebc 	.word	0x0800cebc

080011b4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3304      	adds	r3, #4
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011ec:	d005      	beq.n	80011fa <lfs_pair_isnull+0x1e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3304      	adds	r3, #4
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011f8:	d101      	bne.n	80011fe <lfs_pair_isnull+0x22>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <lfs_pair_isnull+0x24>
 80011fe:	2300      	movs	r3, #0
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d017      	beq.n	8001256 <lfs_pair_cmp+0x46>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3304      	adds	r3, #4
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	3304      	adds	r3, #4
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d00f      	beq.n	8001256 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8001240:	429a      	cmp	r2, r3
 8001242:	d008      	beq.n	8001256 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3304      	adds	r3, #4
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <lfs_pair_cmp+0x46>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <lfs_pair_cmp+0x48>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d107      	bne.n	8001288 <lfs_pair_issync+0x26>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3304      	adds	r3, #4
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d00d      	beq.n	80012a4 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8001292:	429a      	cmp	r2, r3
 8001294:	d108      	bne.n	80012a8 <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3304      	adds	r3, #4
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d101      	bne.n	80012a8 <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <lfs_pair_issync+0x48>
 80012a8:	2300      	movs	r3, #0
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80012ba:	b590      	push	{r4, r7, lr}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb9b 	bl	8000a02 <lfs_fromle32>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3304      	adds	r3, #4
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1d1c      	adds	r4, r3, #4
 80012dc:	4610      	mov	r0, r2
 80012de:	f7ff fb90 	bl	8000a02 <lfs_fromle32>
 80012e2:	4603      	mov	r3, r0
 80012e4:	6023      	str	r3, [r4, #0]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}

080012ee <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80012ee:	b590      	push	{r4, r7, lr}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fb8b 	bl	8000a16 <lfs_tole32>
 8001300:	4602      	mov	r2, r0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3304      	adds	r3, #4
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	1d1c      	adds	r4, r3, #4
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff fb80 	bl	8000a16 <lfs_tole32>
 8001316:	4603      	mov	r3, r0
 8001318:	6023      	str	r3, [r4, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}

08001322 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	43db      	mvns	r3, r3
 800132e:	0fdb      	lsrs	r3, r3, #31
 8001330:	b2db      	uxtb	r3, r3
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	059b      	lsls	r3, r3, #22
 8001348:	159b      	asrs	r3, r3, #22
 800134a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	0d1b      	lsrs	r3, r3, #20
 800136c:	b29b      	uxth	r3, r3
 800136e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001372:	b29b      	uxth	r3, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	0d1b      	lsrs	r3, r3, #20
 800138a:	b29b      	uxth	r3, r3
 800138c:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
 8001390:	b29b      	uxth	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	0d1b      	lsrs	r3, r3, #20
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ae:	b29b      	uxth	r3, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	0d1b      	lsrs	r3, r3, #20
 80013c6:	b2db      	uxtb	r3, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffed 	bl	80013ba <lfs_tag_chunk>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b25b      	sxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0a9b      	lsrs	r3, r3, #10
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013fe:	b29b      	uxth	r3, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff86 	bl	800133c <lfs_tag_isdelete>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ffe6 	bl	800140a <lfs_tag_size>
 800143e:	4603      	mov	r3, r0
 8001440:	3304      	adds	r3, #4
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e012      	b.n	8001480 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	6819      	ldr	r1, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4403      	add	r3, r0
 8001476:	404a      	eors	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b02      	cmp	r3, #2
 8001484:	dde9      	ble.n	800145a <lfs_gstate_xor+0x10>
    }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e00b      	b.n	80014b8 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <lfs_gstate_iszero+0x20>
            return false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e006      	b.n	80014c0 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	ddf0      	ble.n	80014a0 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff97 	bl	800140a <lfs_tag_size>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	bf14      	ite	ne
 80014e2:	2301      	movne	r3, #1
 80014e4:	2300      	moveq	r3, #0
 80014e6:	b2db      	uxtb	r3, r3
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff84 	bl	800140a <lfs_tag_size>
 8001502:	4603      	mov	r3, r0
 8001504:	b2db      	uxtb	r3, r3
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff20 	bl	8001360 <lfs_tag_type1>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff62 	bl	800140a <lfs_tag_size>
 8001546:	4603      	mov	r3, r0
 8001548:	0a5b      	lsrs	r3, r3, #9
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fef8 	bl	8001360 <lfs_tag_type1>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <lfs_gstate_hasmovehere+0x30>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe47 	bl	8001210 <lfs_pair_cmp>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <lfs_gstate_hasmovehere+0x30>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <lfs_gstate_hasmovehere+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fa2a 	bl	8000a02 <lfs_fromle32>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fa22 	bl	8000a02 <lfs_fromle32>
 80015be:	4602      	mov	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fa1a 	bl	8000a02 <lfs_fromle32>
 80015ce:	4602      	mov	r2, r0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fa14 	bl	8000a16 <lfs_tole32>
 80015ee:	4602      	mov	r2, r0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fa0c 	bl	8000a16 <lfs_tole32>
 80015fe:	4602      	mov	r2, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa04 	bl	8000a16 <lfs_tole32>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f9ea 	bl	8000a02 <lfs_fromle32>
 800162e:	4602      	mov	r2, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff f9e2 	bl	8000a02 <lfs_fromle32>
 800163e:	4602      	mov	r2, r0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	605a      	str	r2, [r3, #4]
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f9dc 	bl	8000a16 <lfs_tole32>
 800165e:	4602      	mov	r2, r0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff f9d4 	bl	8000a16 <lfs_tole32>
 800166e:	4602      	mov	r2, r0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff f9ba 	bl	8000a02 <lfs_fromle32>
 800168e:	4602      	mov	r2, r0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f9b2 	bl	8000a02 <lfs_fromle32>
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	605a      	str	r2, [r3, #4]
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f9ac 	bl	8000a16 <lfs_tole32>
 80016be:	4602      	mov	r2, r0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f9a4 	bl	8000a16 <lfs_tole32>
 80016ce:	4602      	mov	r2, r0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f98a 	bl	8000a02 <lfs_fromle32>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f982 	bl	8000a02 <lfs_fromle32>
 80016fe:	4602      	mov	r2, r0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f97a 	bl	8000a02 <lfs_fromle32>
 800170e:	4602      	mov	r2, r0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f972 	bl	8000a02 <lfs_fromle32>
 800171e:	4602      	mov	r2, r0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f96a 	bl	8000a02 <lfs_fromle32>
 800172e:	4602      	mov	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f962 	bl	8000a02 <lfs_fromle32>
 800173e:	4602      	mov	r2, r0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	615a      	str	r2, [r3, #20]
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f95c 	bl	8000a16 <lfs_tole32>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff f954 	bl	8000a16 <lfs_tole32>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f94c 	bl	8000a16 <lfs_tole32>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff f944 	bl	8000a16 <lfs_tole32>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f93c 	bl	8000a16 <lfs_tole32>
 800179e:	4602      	mov	r2, r0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff f934 	bl	8000a16 <lfs_tole32>
 80017ae:	4602      	mov	r2, r0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	615a      	str	r2, [r3, #20]
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e009      	b.n	80017e0 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d101      	bne.n	80017da <lfs_mlist_isopen+0x1e>
            return true;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e007      	b.n	80017ea <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f1      	bne.n	80017cc <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3328      	adds	r3, #40	; 0x28
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e00d      	b.n	8001822 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d105      	bne.n	800181c <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]
            break;
 800181a:	e007      	b.n	800182c <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ed      	bne.n	8001806 <lfs_mlist_remove+0x12>
        }
    }
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <lfs_fs_disk_version+0x14>)
    }
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	00020001 	.word	0x00020001

08001870 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ffed 	bl	8001858 <lfs_fs_disk_version>
 800187e:	4603      	mov	r3, r0
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	b29b      	uxth	r3, r3

}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffdf 	bl	8001858 <lfs_fs_disk_version>
 800189a:	4603      	mov	r3, r0
 800189c:	b29b      	uxth	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->lookahead.next = 0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ckpoint(lfs);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe6 	bl	80018a6 <lfs_alloc_ckpoint>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018fc:	4413      	add	r3, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 8001902:	fbb3 f1f2 	udiv	r1, r3, r2
 8001906:	fb01 f202 	mul.w	r2, r1, r2
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	d212      	bcs.n	800193e <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	441a      	add	r2, r3
 8001922:	7811      	ldrb	r1, [r2, #0]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	f002 0207 	and.w	r2, r2, #7
 800192a:	2001      	movs	r0, #1
 800192c:	fa00 f202 	lsl.w	r2, r0, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001936:	4403      	add	r3, r0
 8001938:	430a      	orrs	r2, r1
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195c:	4413      	add	r3, r2
            % lfs->block_count;
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001962:	fbb3 f1f2 	udiv	r1, r3, r2
 8001966:	fb01 f202 	mul.w	r2, r1, r2
 800196a:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->lookahead.next = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    lfs->lookahead.size = lfs_min(
 800197c:	00da      	lsls	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f7fe ffd1 	bl	800092c <lfs_min>
 800198a:	4602      	mov	r2, r0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	659a      	str	r2, [r3, #88]	; 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	461a      	mov	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f00a fc45 	bl	800c22c <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 80019a2:	2301      	movs	r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4909      	ldr	r1, [pc, #36]	; (80019cc <lfs_alloc_scan+0x80>)
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f005 f9c3 	bl	8006d34 <lfs_fs_traverse_>
 80019ae:	60f8      	str	r0, [r7, #12]
    if (err) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff82 	bl	80018c0 <lfs_alloc_drop>
        return err;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	e000      	b.n	80019c2 <lfs_alloc_scan+0x76>
    }

    return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	080018e3 	.word	0x080018e3

080019d0 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 80019da:	e04d      	b.n	8001a78 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d131      	bne.n	8001a64 <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	4413      	add	r3, r2
                        % lfs->block_count;
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a12:	fb01 f202 	mul.w	r2, r1, r2
 8001a16:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->lookahead.ckpoint -= 1;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	1e5a      	subs	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	661a      	str	r2, [r3, #96]	; 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d211      	bcs.n	8001a60 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1dd      	bne.n	8001a1c <lfs_alloc+0x4c>
                        return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e033      	b.n	8001acc <lfs_alloc+0xfc>
                    }
                }
            }

            lfs->lookahead.next += 1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->lookahead.ckpoint -= 1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	661a      	str	r2, [r3, #96]	; 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3ab      	bcc.n	80019dc <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d117      	bne.n	8001abc <lfs_alloc+0xec>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	4413      	add	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a9a:	6a12      	ldr	r2, [r2, #32]
 8001a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <lfs_alloc+0x104>)
 8001aa8:	9200      	str	r2, [sp, #0]
 8001aaa:	f240 22b1 	movw	r2, #689	; 0x2b1
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <lfs_alloc+0x108>)
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <lfs_alloc+0x10c>)
 8001ab2:	f00a fa5d 	bl	800bf70 <iprintf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->cfg->block_count);
            return LFS_ERR_NOSPC;
 8001ab6:	f06f 031b 	mvn.w	r3, #27
 8001aba:	e007      	b.n	8001acc <lfs_alloc+0xfc>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff45 	bl	800194c <lfs_alloc_scan>
 8001ac2:	60f8      	str	r0, [r7, #12]
        if(err) {
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d087      	beq.n	80019da <lfs_alloc+0xa>
            return err;
 8001aca:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	0800cfb4 	.word	0x0800cfb4
 8001ad8:	0800ce9c 	.word	0x0800ce9c
 8001adc:	0800cf88 	.word	0x0800cf88

08001ae0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08f      	sub	sp, #60	; 0x3c
 8001ae4:	af04      	add	r7, sp, #16
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	333c      	adds	r3, #60	; 0x3c
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fd28 	bl	800155c <lfs_gstate_hasmovehere>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80ba 	beq.w	8001c88 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fc69 	bl	80013ec <lfs_tag_id>
 8001b1a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80b3 	beq.w	8001c88 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fc60 	bl	80013ec <lfs_tag_id>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461c      	mov	r4, r3
 8001b30:	6838      	ldr	r0, [r7, #0]
 8001b32:	f7ff fc5b 	bl	80013ec <lfs_tag_id>
 8001b36:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8001b38:	429c      	cmp	r4, r3
 8001b3a:	f200 80a5 	bhi.w	8001c88 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001b44:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001b46:	e09f      	b.n	8001c88 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc69 	bl	8001422 <lfs_tag_dsize>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8001b5c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8001b62:	2204      	movs	r2, #4
 8001b64:	9203      	str	r2, [sp, #12]
 8001b66:	f107 0210 	add.w	r2, r7, #16
 8001b6a:	9202      	str	r2, [sp, #8]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	9201      	str	r2, [sp, #4]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2304      	movs	r3, #4
 8001b74:	460a      	mov	r2, r1
 8001b76:	2100      	movs	r1, #0
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7fe ffab 	bl	8000ad4 <lfs_bd_read>
 8001b7e:	61b8      	str	r0, [r7, #24]
        if (err) {
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <lfs_dir_getslice+0xaa>
            return err;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	e08a      	b.n	8001ca0 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe ff4e 	bl	8000a2e <lfs_frombe32>
 8001b92:	4602      	mov	r2, r0
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4053      	eors	r3, r2
 8001b98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b9c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fc24 	bl	80013ec <lfs_tag_id>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d02b      	beq.n	8001c02 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001baa:	69f8      	ldr	r0, [r7, #28]
 8001bac:	f7ff fbd8 	bl	8001360 <lfs_tag_type1>
 8001bb0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d124      	bne.n	8001c02 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8001bb8:	69f8      	ldr	r0, [r7, #28]
 8001bba:	f7ff fc17 	bl	80013ec <lfs_tag_id>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fc0f 	bl	80013ec <lfs_tag_id>
 8001bce:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001bd0:	429c      	cmp	r4, r3
 8001bd2:	d816      	bhi.n	8001c02 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	1ad2      	subs	r2, r2, r3
 8001bda:	4b33      	ldr	r3, [pc, #204]	; (8001ca8 <lfs_dir_getslice+0x1c8>)
 8001bdc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8001bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d102      	bne.n	8001bf2 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8001bec:	f06f 0301 	mvn.w	r3, #1
 8001bf0:	e056      	b.n	8001ca0 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001bf2:	69f8      	ldr	r0, [r7, #28]
 8001bf4:	f7ff fbed 	bl	80013d2 <lfs_tag_splice>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	029a      	lsls	r2, r3, #10
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	4413      	add	r3, r2
 8001c00:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	401a      	ands	r2, r3
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	1ac9      	subs	r1, r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	400b      	ands	r3, r1
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d138      	bne.n	8001c88 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8001c16:	69f8      	ldr	r0, [r7, #28]
 8001c18:	f7ff fb90 	bl	800133c <lfs_tag_isdelete>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8001c22:	f06f 0301 	mvn.w	r3, #1
 8001c26:	e03b      	b.n	8001ca0 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8001c28:	69f8      	ldr	r0, [r7, #28]
 8001c2a:	f7ff fbee 	bl	800140a <lfs_tag_size>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fe7a 	bl	800092c <lfs_min>
 8001c38:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8001c3a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8001c46:	3204      	adds	r2, #4
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	9103      	str	r1, [sp, #12]
 8001c4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c4e:	9102      	str	r1, [sp, #8]
 8001c50:	9201      	str	r2, [sp, #4]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4602      	mov	r2, r0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7fe ff3a 	bl	8000ad4 <lfs_bd_read>
 8001c60:	61b8      	str	r0, [r7, #24]
            if (err) {
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <lfs_dir_getslice+0x18c>
                return err;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	e019      	b.n	8001ca0 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8001c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	18d0      	adds	r0, r2, r3
 8001c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f00a fad6 	bl	800c22c <memset>

            return tag + gdiff;
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	e00b      	b.n	8001ca0 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fbc9 	bl	8001422 <lfs_tag_dsize>
 8001c90:	4603      	mov	r3, r0
 8001c92:	3304      	adds	r3, #4
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	429a      	cmp	r2, r3
 8001c98:	f4bf af56 	bcs.w	8001b48 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8001c9c:	f06f 0301 	mvn.w	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	372c      	adds	r7, #44	; 0x2c
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	000ffc00 	.word	0x000ffc00

08001cac <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f7ff fba5 	bl	800140a <lfs_tag_size>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff ff04 	bl	8001ae0 <lfs_dir_getslice>
 8001cd8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08c      	sub	sp, #48	; 0x30
 8001ce6:	af04      	add	r7, sp, #16
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8001cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8001cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	441a      	add	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f240 80c0 	bls.w	8001e86 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8001d06:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8001d0a:	e0c1      	b.n	8001e90 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8001d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03f      	beq.n	8001d96 <lfs_dir_getread+0xb4>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f113 0f02 	cmn.w	r3, #2
 8001d1e:	d13a      	bne.n	8001d96 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8001d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d232      	bcs.n	8001d96 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d324      	bcc.n	8001d84 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6859      	ldr	r1, [r3, #4]
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	1acb      	subs	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	69b8      	ldr	r0, [r7, #24]
 8001d4c:	f7fe fdee 	bl	800092c <lfs_min>
 8001d50:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d5c:	1acb      	subs	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4619      	mov	r1, r3
 8001d64:	69f8      	ldr	r0, [r7, #28]
 8001d66:	f00a fb32 	bl	800c3ce <memcpy>

                data += diff;
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	4413      	add	r3, r2
 8001d70:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	4413      	add	r3, r2
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001d82:	e080      	b.n	8001e86 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	69b8      	ldr	r0, [r7, #24]
 8001d90:	f7fe fdcc 	bl	800092c <lfs_min>
 8001d94:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f113 0f02 	cmn.w	r3, #2
 8001d9e:	d13a      	bne.n	8001e16 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8001daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d232      	bcs.n	8001e16 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d324      	bcc.n	8001e04 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6859      	ldr	r1, [r3, #4]
 8001dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc4:	1acb      	subs	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	69b8      	ldr	r0, [r7, #24]
 8001dcc:	f7fe fdae 	bl	800092c <lfs_min>
 8001dd0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ddc:	1acb      	subs	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4619      	mov	r1, r3
 8001de4:	69f8      	ldr	r0, [r7, #28]
 8001de6:	f00a faf2 	bl	800c3ce <memcpy>

                data += diff;
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	4413      	add	r3, r2
 8001df0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8001df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	4413      	add	r3, r2
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8001dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8001e02:	e040      	b.n	8001e86 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	69b8      	ldr	r0, [r7, #24]
 8001e10:	f7fe fd8c 	bl	800092c <lfs_min>
 8001e14:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4619      	mov	r1, r3
 8001e26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e28:	f7fe fd8f 	bl	800094a <lfs_aligndown>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	441a      	add	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f7fe fd96 	bl	8000972 <lfs_alignup>
 8001e46:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe fd6b 	bl	800092c <lfs_min>
 8001e56:	4602      	mov	r2, r0
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8001e64:	6839      	ldr	r1, [r7, #0]
 8001e66:	6889      	ldr	r1, [r1, #8]
 8001e68:	9102      	str	r1, [sp, #8]
 8001e6a:	9201      	str	r2, [sp, #4]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f7ff fe33 	bl	8001ae0 <lfs_dir_getslice>
 8001e7a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da01      	bge.n	8001e86 <lfs_dir_getread+0x1a4>
            return err;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	e004      	b.n	8001e90 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8001e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f af3f 	bne.w	8001d0c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <lfs_dir_traverse_filter+0x1e>
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <lfs_dir_traverse_filter+0xac>)
 8001eb4:	e000      	b.n	8001eb8 <lfs_dir_traverse_filter+0x20>
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8001eb8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	405a      	eors	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d014      	beq.n	8001ef4 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fa34 	bl	800133c <lfs_tag_isdelete>
 8001ed4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <lfs_dir_traverse_filter+0xac>)
 8001ede:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <lfs_dir_traverse_filter+0xb4>)
 8001ee6:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8001ee8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8001eec:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d104      	bne.n	8001efe <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
        return true;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e01e      	b.n	8001f3c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001efe:	68b8      	ldr	r0, [r7, #8]
 8001f00:	f7ff fa2e 	bl	8001360 <lfs_tag_type1>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0a:	d116      	bne.n	8001f3a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f7ff fa6d 	bl	80013ec <lfs_tag_id>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461c      	mov	r4, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fa66 	bl	80013ec <lfs_tag_id>
 8001f20:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8001f22:	429c      	cmp	r4, r3
 8001f24:	d809      	bhi.n	8001f3a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f7ff fa53 	bl	80013d2 <lfs_tag_splice>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	029a      	lsls	r2, r3, #10
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	441a      	add	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]
    }

    return false;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd90      	pop	{r4, r7, pc}
 8001f44:	7ffffc00 	.word	0x7ffffc00
 8001f48:	700ffc00 	.word	0x700ffc00
 8001f4c:	000ffc00 	.word	0x000ffc00

08001f50 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b0c1      	sub	sp, #260	; 0x104
 8001f54:	af04      	add	r7, sp, #16
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 8001f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8001f6e:	6838      	ldr	r0, [r7, #0]
 8001f70:	f7ff fa57 	bl	8001422 <lfs_tag_dsize>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	441a      	add	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d237      	bcs.n	8001ff2 <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f7ff fa4d 	bl	8001422 <lfs_tag_dsize>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8001f90:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8001f96:	2204      	movs	r2, #4
 8001f98:	9203      	str	r2, [sp, #12]
 8001f9a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001f9e:	9202      	str	r2, [sp, #8]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	9201      	str	r2, [sp, #4]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	460a      	mov	r2, r1
 8001faa:	2100      	movs	r1, #0
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7fe fd91 	bl	8000ad4 <lfs_bd_read>
 8001fb2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8001fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <lfs_dir_traverse+0x74>
                    return err;
 8001fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fc2:	e3a5      	b.n	8002710 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8001fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fd31 	bl	8000a2e <lfs_frombe32>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4053      	eors	r3, r2
 8001fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8001fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	e01b      	b.n	800202a <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 8001ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	dd13      	ble.n	8002022 <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 8001ffa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8002002:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 800200c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002010:	3308      	adds	r3, #8
 8002012:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8002016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800201a:	3b01      	subs	r3, #1
 800201c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002020:	e003      	b.n	800202a <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8002028:	e2a1      	b.n	800256e <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800202a:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <lfs_dir_traverse+0x2d4>)
 800202c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8002030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002036:	405a      	eors	r2, r3
 8002038:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800203c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002040:	400b      	ands	r3, r1
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 8284 	bne.w	8002552 <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800204a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800204e:	f7ff f9cd 	bl	80013ec <lfs_tag_id>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80ef 	beq.w	8002238 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800205a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800205e:	2b02      	cmp	r3, #2
 8002060:	d906      	bls.n	8002070 <lfs_dir_traverse+0x120>
 8002062:	4b71      	ldr	r3, [pc, #452]	; (8002228 <lfs_dir_traverse+0x2d8>)
 8002064:	4a71      	ldr	r2, [pc, #452]	; (800222c <lfs_dir_traverse+0x2dc>)
 8002066:	f240 31b3 	movw	r1, #947	; 0x3b3
 800206a:	4871      	ldr	r0, [pc, #452]	; (8002230 <lfs_dir_traverse+0x2e0>)
 800206c:	f009 fcea 	bl	800ba44 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8002070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002072:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002076:	4613      	mov	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	33f0      	adds	r3, #240	; 0xf0
 8002080:	443b      	add	r3, r7
 8002082:	3b98      	subs	r3, #152	; 0x98
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	33f0      	adds	r3, #240	; 0xf0
 8002096:	443b      	add	r3, r7
 8002098:	3b94      	subs	r3, #148	; 0x94
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	33f0      	adds	r3, #240	; 0xf0
 80020ac:	443b      	add	r3, r7
 80020ae:	3b90      	subs	r3, #144	; 0x90
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020b8:	4613      	mov	r3, r2
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	33f0      	adds	r3, #240	; 0xf0
 80020c2:	443b      	add	r3, r7
 80020c4:	3b8c      	subs	r3, #140	; 0x8c
 80020c6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	33f0      	adds	r3, #240	; 0xf0
 80020da:	443b      	add	r3, r7
 80020dc:	3b88      	subs	r3, #136	; 0x88
 80020de:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020e8:	4613      	mov	r3, r2
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	33f0      	adds	r3, #240	; 0xf0
 80020f2:	443b      	add	r3, r7
 80020f4:	3b84      	subs	r3, #132	; 0x84
 80020f6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	33f0      	adds	r3, #240	; 0xf0
 800210a:	443b      	add	r3, r7
 800210c:	3b80      	subs	r3, #128	; 0x80
 800210e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	33f0      	adds	r3, #240	; 0xf0
 8002122:	443b      	add	r3, r7
 8002124:	3b7c      	subs	r3, #124	; 0x7c
 8002126:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	33f0      	adds	r3, #240	; 0xf0
 800213a:	443b      	add	r3, r7
 800213c:	3b7a      	subs	r3, #122	; 0x7a
 800213e:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002142:	801a      	strh	r2, [r3, #0]
 8002144:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	33f0      	adds	r3, #240	; 0xf0
 8002152:	443b      	add	r3, r7
 8002154:	3b78      	subs	r3, #120	; 0x78
 8002156:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800215a:	801a      	strh	r2, [r3, #0]
 800215c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	33f0      	adds	r3, #240	; 0xf0
 800216a:	443b      	add	r3, r7
 800216c:	3b74      	subs	r3, #116	; 0x74
 800216e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	33f0      	adds	r3, #240	; 0xf0
 8002182:	443b      	add	r3, r7
 8002184:	3b70      	subs	r3, #112	; 0x70
 8002186:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	33f0      	adds	r3, #240	; 0xf0
 800219a:	443b      	add	r3, r7
 800219c:	3b6c      	subs	r3, #108	; 0x6c
 800219e:	6019      	str	r1, [r3, #0]
 80021a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	33f0      	adds	r3, #240	; 0xf0
 80021ae:	443b      	add	r3, r7
 80021b0:	3b68      	subs	r3, #104	; 0x68
 80021b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	33f0      	adds	r3, #240	; 0xf0
 80021c6:	443b      	add	r3, r7
 80021c8:	3b68      	subs	r3, #104	; 0x68
 80021ca:	3304      	adds	r3, #4
 80021cc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80021d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d4:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80021d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021dc:	3301      	adds	r3, #1
 80021de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <lfs_dir_traverse+0x2e4>)
 8002202:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8002206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	3328      	adds	r3, #40	; 0x28
 800221a:	440b      	add	r3, r1
 800221c:	3304      	adds	r3, #4
 800221e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8002222:	e19d      	b.n	8002560 <lfs_dir_traverse+0x610>
 8002224:	7ff00000 	.word	0x7ff00000
 8002228:	0800cfb8 	.word	0x0800cfb8
 800222c:	0800e280 	.word	0x0800e280
 8002230:	0800ce9c 	.word	0x0800ce9c
 8002234:	08001e99 	.word	0x08001e99
            }
        }

popped:
 8002238:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800223a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800223e:	f7ff f8d5 	bl	80013ec <lfs_tag_id>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f8ce 	bl	80013ec <lfs_tag_id>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8002254:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8002258:	4293      	cmp	r3, r2
 800225a:	f200 817c 	bhi.w	8002556 <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff f8c3 	bl	80013ec <lfs_tag_id>
 8002266:	4603      	mov	r3, r0
 8002268:	461a      	mov	r2, r3
 800226a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800226e:	4293      	cmp	r3, r2
 8002270:	f240 8171 	bls.w	8002556 <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8002274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f890 	bl	800139c <lfs_tag_type3>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f43f ae75 	beq.w	8001f6e <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8002284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f888 	bl	800139c <lfs_tag_type3>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	f240 1301 	movw	r3, #257	; 0x101
 8002294:	429a      	cmp	r2, r3
 8002296:	f040 80e0 	bne.w	800245a <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800229a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800229e:	4ab1      	ldr	r2, [pc, #708]	; (8002564 <lfs_dir_traverse+0x614>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f000 815a 	beq.w	800255a <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80022a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	33f0      	adds	r3, #240	; 0xf0
 80022b4:	443b      	add	r3, r7
 80022b6:	3b98      	subs	r3, #152	; 0x98
 80022b8:	4618      	mov	r0, r3
 80022ba:	233c      	movs	r3, #60	; 0x3c
 80022bc:	461a      	mov	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	f009 ffb4 	bl	800c22c <memset>
 80022c4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	33f0      	adds	r3, #240	; 0xf0
 80022d2:	443b      	add	r3, r7
 80022d4:	3b98      	subs	r3, #152	; 0x98
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	33f0      	adds	r3, #240	; 0xf0
 80022e8:	443b      	add	r3, r7
 80022ea:	3b94      	subs	r3, #148	; 0x94
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	33f0      	adds	r3, #240	; 0xf0
 80022fe:	443b      	add	r3, r7
 8002300:	3b90      	subs	r3, #144	; 0x90
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	33f0      	adds	r3, #240	; 0xf0
 8002314:	443b      	add	r3, r7
 8002316:	3b8c      	subs	r3, #140	; 0x8c
 8002318:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	33f0      	adds	r3, #240	; 0xf0
 800232c:	443b      	add	r3, r7
 800232e:	3b88      	subs	r3, #136	; 0x88
 8002330:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	33f0      	adds	r3, #240	; 0xf0
 8002344:	443b      	add	r3, r7
 8002346:	3b84      	subs	r3, #132	; 0x84
 8002348:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	33f0      	adds	r3, #240	; 0xf0
 800235c:	443b      	add	r3, r7
 800235e:	3b80      	subs	r3, #128	; 0x80
 8002360:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	33f0      	adds	r3, #240	; 0xf0
 8002374:	443b      	add	r3, r7
 8002376:	3b7c      	subs	r3, #124	; 0x7c
 8002378:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800237c:	801a      	strh	r2, [r3, #0]
 800237e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	33f0      	adds	r3, #240	; 0xf0
 800238c:	443b      	add	r3, r7
 800238e:	3b7a      	subs	r3, #122	; 0x7a
 8002390:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	33f0      	adds	r3, #240	; 0xf0
 80023a4:	443b      	add	r3, r7
 80023a6:	3b78      	subs	r3, #120	; 0x78
 80023a8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	33f0      	adds	r3, #240	; 0xf0
 80023bc:	443b      	add	r3, r7
 80023be:	3b74      	subs	r3, #116	; 0x74
 80023c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	33f0      	adds	r3, #240	; 0xf0
 80023d4:	443b      	add	r3, r7
 80023d6:	3b70      	subs	r3, #112	; 0x70
 80023d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80023dc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80023de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80023e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f80d 	bl	800140a <lfs_tag_size>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80023f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fff7 	bl	80013ec <lfs_tag_id>
 80023fe:	4603      	mov	r3, r0
 8002400:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8002404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002408:	60bb      	str	r3, [r7, #8]
            off = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002412:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8002420:	4b51      	ldr	r3, [pc, #324]	; (8002568 <lfs_dir_traverse+0x618>)
 8002422:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8002426:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800242a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800242e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002432:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8002436:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800243a:	3301      	adds	r3, #1
 800243c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8002440:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8002444:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b29a      	uxth	r2, r3
 800244c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8002450:	4413      	add	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8002458:	e589      	b.n	8001f6e <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800245a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe ff9d 	bl	800139c <lfs_tag_type3>
 8002462:	4603      	mov	r3, r0
 8002464:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8002468:	d159      	bne.n	800251e <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002470:	e04b      	b.n	800250a <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 8002472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800247a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	461a      	mov	r2, r3
 8002488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800248c:	4413      	add	r3, r2
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002494:	051c      	lsls	r4, r3, #20
 8002496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe ffa7 	bl	80013ec <lfs_tag_id>
 800249e:	4603      	mov	r3, r0
 80024a0:	461a      	mov	r2, r3
 80024a2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80024a6:	4413      	add	r3, r2
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	ea44 0103 	orr.w	r1, r4, r3
 80024ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024c0:	4413      	add	r3, r2
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80024c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	461a      	mov	r2, r3
 80024d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024d8:	4413      	add	r3, r2
 80024da:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80024dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024e0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80024e4:	4798      	blx	r3
 80024e6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80024ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da02      	bge.n	80024f8 <lfs_dir_traverse+0x5a8>
                    return res;
 80024f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024f6:	e10b      	b.n	8002710 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 80024f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d12e      	bne.n	800255e <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8002500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002504:	3301      	adds	r3, #1
 8002506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800250a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe ff7c 	bl	800140a <lfs_tag_size>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002518:	4293      	cmp	r3, r2
 800251a:	d3aa      	bcc.n	8002472 <lfs_dir_traverse+0x522>
 800251c:	e527      	b.n	8001f6e <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800251e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8002522:	029a      	lsls	r2, r3, #10
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	18d1      	adds	r1, r2, r3
 8002528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800252c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002530:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002534:	4798      	blx	r3
 8002536:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 800253a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800253e:	2b00      	cmp	r3, #0
 8002540:	da02      	bge.n	8002548 <lfs_dir_traverse+0x5f8>
                return res;
 8002542:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002546:	e0e3      	b.n	8002710 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 8002548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <lfs_dir_traverse+0x61c>
 8002550:	e50d      	b.n	8001f6e <lfs_dir_traverse+0x1e>
                continue;
 8002552:	bf00      	nop
 8002554:	e50b      	b.n	8001f6e <lfs_dir_traverse+0x1e>
            continue;
 8002556:	bf00      	nop
 8002558:	e509      	b.n	8001f6e <lfs_dir_traverse+0x1e>
                continue;
 800255a:	bf00      	nop
 800255c:	e507      	b.n	8001f6e <lfs_dir_traverse+0x1e>
                    break;
 800255e:	bf00      	nop
        {
 8002560:	e505      	b.n	8001f6e <lfs_dir_traverse+0x1e>
 8002562:	bf00      	nop
 8002564:	08001e99 	.word	0x08001e99
 8002568:	600ffc00 	.word	0x600ffc00
                break;
 800256c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800256e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80ca 	beq.w	800270c <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8002578:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800257c:	1e5a      	subs	r2, r3, #1
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	33f0      	adds	r3, #240	; 0xf0
 8002588:	443b      	add	r3, r7
 800258a:	3b98      	subs	r3, #152	; 0x98
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8002590:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	33f0      	adds	r3, #240	; 0xf0
 80025a0:	443b      	add	r3, r7
 80025a2:	3b94      	subs	r3, #148	; 0x94
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80025a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	33f0      	adds	r3, #240	; 0xf0
 80025b8:	443b      	add	r3, r7
 80025ba:	3b90      	subs	r3, #144	; 0x90
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80025c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	33f0      	adds	r3, #240	; 0xf0
 80025d0:	443b      	add	r3, r7
 80025d2:	3b8c      	subs	r3, #140	; 0x8c
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80025da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025de:	1e5a      	subs	r2, r3, #1
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	33f0      	adds	r3, #240	; 0xf0
 80025ea:	443b      	add	r3, r7
 80025ec:	3b88      	subs	r3, #136	; 0x88
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80025f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	33f0      	adds	r3, #240	; 0xf0
 8002604:	443b      	add	r3, r7
 8002606:	3b84      	subs	r3, #132	; 0x84
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800260e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	33f0      	adds	r3, #240	; 0xf0
 800261e:	443b      	add	r3, r7
 8002620:	3b80      	subs	r3, #128	; 0x80
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8002628:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	33f0      	adds	r3, #240	; 0xf0
 8002638:	443b      	add	r3, r7
 800263a:	3b7c      	subs	r3, #124	; 0x7c
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8002642:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	33f0      	adds	r3, #240	; 0xf0
 8002652:	443b      	add	r3, r7
 8002654:	3b7a      	subs	r3, #122	; 0x7a
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 800265c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002660:	1e5a      	subs	r2, r3, #1
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	33f0      	adds	r3, #240	; 0xf0
 800266c:	443b      	add	r3, r7
 800266e:	3b78      	subs	r3, #120	; 0x78
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8002676:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	33f0      	adds	r3, #240	; 0xf0
 8002686:	443b      	add	r3, r7
 8002688:	3b74      	subs	r3, #116	; 0x74
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8002690:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	33f0      	adds	r3, #240	; 0xf0
 80026a0:	443b      	add	r3, r7
 80026a2:	3b70      	subs	r3, #112	; 0x70
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80026aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	33f0      	adds	r3, #240	; 0xf0
 80026ba:	443b      	add	r3, r7
 80026bc:	3b6c      	subs	r3, #108	; 0x6c
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80026c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026c6:	1e5a      	subs	r2, r3, #1
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	33f0      	adds	r3, #240	; 0xf0
 80026d2:	443b      	add	r3, r7
 80026d4:	3b68      	subs	r3, #104	; 0x68
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80026dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	33f0      	adds	r3, #240	; 0xf0
 80026ec:	443b      	add	r3, r7
 80026ee:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80026f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026f6:	3204      	adds	r2, #4
 80026f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026fc:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8002700:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002704:	3b01      	subs	r3, #1
 8002706:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 800270a:	e596      	b.n	800223a <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800270c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8002710:	4618      	mov	r0, r3
 8002712:	37f4      	adds	r7, #244	; 0xf4
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}

08002718 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b0a5      	sub	sp, #148	; 0x94
 800271c:	af04      	add	r7, sp, #16
 800271e:	6178      	str	r0, [r7, #20]
 8002720:	6139      	str	r1, [r7, #16]
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800272a:	67fb      	str	r3, [r7, #124]	; 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00f      	beq.n	8002754 <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273c:	429a      	cmp	r2, r3
 800273e:	d206      	bcs.n	800274e <lfs_dir_fetchmatch+0x36>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3304      	adds	r3, #4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800274e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8002752:	e3a4      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8002754:	2300      	movs	r3, #0
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
 8002758:	2300      	movs	r3, #0
 800275a:	64bb      	str	r3, [r7, #72]	; 0x48
    int r = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002760:	2300      	movs	r3, #0
 8002762:	677b      	str	r3, [r7, #116]	; 0x74
 8002764:	e05a      	b.n	800281c <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8002766:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8002770:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8002772:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002776:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800277c:	2104      	movs	r1, #4
 800277e:	9103      	str	r1, [sp, #12]
 8002780:	9202      	str	r2, [sp, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	9201      	str	r2, [sp, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2304      	movs	r3, #4
 800278a:	4602      	mov	r2, r0
 800278c:	2100      	movs	r1, #0
 800278e:	6978      	ldr	r0, [r7, #20]
 8002790:	f7fe f9a0 	bl	8000ad4 <lfs_bd_read>
 8002794:	64f8      	str	r0, [r7, #76]	; 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 8002796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	3378      	adds	r3, #120	; 0x78
 800279c:	f107 0208 	add.w	r2, r7, #8
 80027a0:	4413      	add	r3, r2
 80027a2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe f92b 	bl	8000a02 <lfs_fromle32>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	3378      	adds	r3, #120	; 0x78
 80027b4:	f107 0108 	add.w	r1, r7, #8
 80027b8:	440b      	add	r3, r1
 80027ba:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 80027be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <lfs_dir_fetchmatch+0xb8>
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80027ca:	d001      	beq.n	80027d0 <lfs_dir_fetchmatch+0xb8>
            return err;
 80027cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ce:	e366      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 80027d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80027d6:	d01e      	beq.n	8002816 <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80027d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3378      	adds	r3, #120	; 0x78
 80027de:	f107 0208 	add.w	r2, r7, #8
 80027e2:	4413      	add	r3, r2
 80027e4:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80027e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ea:	3301      	adds	r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	bfb8      	it	lt
 80027f4:	425b      	neglt	r3, r3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3378      	adds	r3, #120	; 0x78
 80027fa:	f107 0108 	add.w	r1, r7, #8
 80027fe:	440b      	add	r3, r1
 8002800:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f7fe f8ee 	bl	80009e8 <lfs_scmp>
 800280c:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	dd01      	ble.n	8002816 <lfs_dir_fetchmatch+0xfe>
            r = i;
 8002812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002814:	67bb      	str	r3, [r7, #120]	; 0x78
    for (int i = 0; i < 2; i++) {
 8002816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002818:	3301      	adds	r3, #1
 800281a:	677b      	str	r3, [r7, #116]	; 0x74
 800281c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281e:	2b01      	cmp	r3, #1
 8002820:	dda1      	ble.n	8002766 <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 8002822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002824:	2b00      	cmp	r3, #0
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	bfb8      	it	lt
 800282c:	425b      	neglt	r3, r3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800283a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800283c:	3301      	adds	r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	bfb8      	it	lt
 8002846:	425b      	neglt	r3, r3
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8002854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002856:	2b00      	cmp	r3, #0
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	bfb8      	it	lt
 800285e:	425b      	neglt	r3, r3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	3378      	adds	r3, #120	; 0x78
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	4413      	add	r3, r2
 800286a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8002878:	2300      	movs	r3, #0
 800287a:	673b      	str	r3, [r7, #112]	; 0x70
 800287c:	e2fb      	b.n	8002e76 <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	66fb      	str	r3, [r7, #108]	; 0x6c
        lfs_tag_t ptag = 0xffffffff;
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	66bb      	str	r3, [r7, #104]	; 0x68

        uint16_t tempcount = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800288e:	4aa9      	ldr	r2, [pc, #676]	; (8002b34 <lfs_dir_fetchmatch+0x41c>)
 8002890:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002898:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
        lfs_stag_t tempbesttag = besttag;
 80028a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a4:	663b      	str	r3, [r7, #96]	; 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        bool hasfcrc = false;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f8ad 	bl	8000a16 <lfs_tole32>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	3308      	adds	r3, #8
 80028c6:	2204      	movs	r2, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ce:	f005 f985 	bl	8007bdc <lfs_crc>
 80028d2:	4603      	mov	r3, r0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
        dir->rev = lfs_fromle32(dir->rev);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f891 	bl	8000a02 <lfs_fromle32>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80028e6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80028e8:	f7fe fd9b 	bl	8001422 <lfs_tag_dsize>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	4413      	add	r3, r2
 80028f2:	66fb      	str	r3, [r7, #108]	; 0x6c
            int err = lfs_bd_read(lfs,
 80028f4:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fa:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2204      	movs	r2, #4
 8002902:	9203      	str	r2, [sp, #12]
 8002904:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002908:	9202      	str	r2, [sp, #8]
 800290a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800290c:	9201      	str	r2, [sp, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	4603      	mov	r3, r0
 8002912:	460a      	mov	r2, r1
 8002914:	2100      	movs	r1, #0
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7fe f8dc 	bl	8000ad4 <lfs_bd_read>
 800291c:	65b8      	str	r0, [r7, #88]	; 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800291e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 8002924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002926:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800292a:	f000 81d6 	beq.w	8002cda <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	e2b5      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002938:	2204      	movs	r2, #4
 800293a:	4618      	mov	r0, r3
 800293c:	f005 f94e 	bl	8007bdc <lfs_crc>
 8002940:	4603      	mov	r3, r0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f871 	bl	8000a2e <lfs_frombe32>
 800294c:	4602      	mov	r2, r0
 800294e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002950:	4053      	eors	r3, r2
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fce3 	bl	8001322 <lfs_tag_isvalid>
 800295c:	4603      	mov	r3, r0
 800295e:	f083 0301 	eor.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 8002968:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800296a:	f7fe fd08 	bl	800137e <lfs_tag_type2>
 800296e:	4603      	mov	r3, r0
 8002970:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                break;
 800297e:	e1bb      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fd4d 	bl	8001422 <lfs_tag_dsize>
 8002988:	4602      	mov	r2, r0
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298c:	441a      	add	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	429a      	cmp	r2, r3
 8002996:	f200 81a2 	bhi.w	8002cde <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	66bb      	str	r3, [r7, #104]	; 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fcec 	bl	800137e <lfs_tag_type2>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80029ac:	d15e      	bne.n	8002a6c <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80029ae:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029bc:	3204      	adds	r2, #4
 80029be:	2104      	movs	r1, #4
 80029c0:	9103      	str	r1, [sp, #12]
 80029c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80029c6:	9102      	str	r1, [sp, #8]
 80029c8:	9201      	str	r2, [sp, #4]
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	4623      	mov	r3, r4
 80029ce:	4602      	mov	r2, r0
 80029d0:	2100      	movs	r1, #0
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7fe f87e 	bl	8000ad4 <lfs_bd_read>
 80029d8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80029da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 80029e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80029e6:	f000 817c 	beq.w	8002ce2 <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 80029ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                return err;
 80029ec:	e257      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe f806 	bl	8000a02 <lfs_fromle32>
 80029f6:	4603      	mov	r3, r0
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28

                if (crc != dcrc) {
 80029fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	429a      	cmp	r2, r3
 8002a00:	f040 8171 	bne.w	8002ce6 <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fcd7 	bl	80013ba <lfs_tag_chunk>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	07db      	lsls	r3, r3, #31
 8002a10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a12:	4053      	eors	r3, r2
 8002a14:	66bb      	str	r3, [r7, #104]	; 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002a1e:	2204      	movs	r2, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f005 f8db 	bl	8007bdc <lfs_crc>
 8002a26:	4602      	mov	r2, r0
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8002a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fcf5 	bl	8001422 <lfs_tag_dsize>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	441a      	add	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a46:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a4e:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8002a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8002a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002a62:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a68:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6a:	e73c      	b.n	80028e6 <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 8002a6c:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	681c      	ldr	r4, [r3, #0]
 8002a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7c:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fcce 	bl	8001422 <lfs_tag_dsize>
 8002a86:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 8002a88:	3b04      	subs	r3, #4
 8002a8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a8e:	9203      	str	r2, [sp, #12]
 8002a90:	9302      	str	r3, [sp, #8]
 8002a92:	9501      	str	r5, [sp, #4]
 8002a94:	9400      	str	r4, [sp, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4632      	mov	r2, r6
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f7fe f9b6 	bl	8000e0e <lfs_bd_crc>
 8002aa2:	65b8      	str	r0, [r7, #88]	; 0x58
            if (err) {
 8002aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 8002aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002ab0:	f000 811b 	beq.w	8002cea <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 8002ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab6:	e1f2      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fc50 	bl	8001360 <lfs_tag_type1>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fc8f 	bl	80013ec <lfs_tag_id>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	f200 80b6 	bhi.w	8002c48 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fc84 	bl	80013ec <lfs_tag_id>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002aec:	e0ac      	b.n	8002c48 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fc35 	bl	8001360 <lfs_tag_type1>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afc:	d13a      	bne.n	8002b74 <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe fc66 	bl	80013d2 <lfs_tag_splice>
 8002b06:	4603      	mov	r3, r0
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002b0e:	4413      	add	r3, r2
 8002b10:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8002b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <lfs_dir_fetchmatch+0x420>)
 8002b18:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8002b1a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8002b1e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8002b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d109      	bne.n	8002b3c <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 8002b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b30:	e08a      	b.n	8002c48 <lfs_dir_fetchmatch+0x530>
 8002b32:	bf00      	nop
 8002b34:	0800cff8 	.word	0x0800cff8
 8002b38:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 8002b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b42:	f000 8081 	beq.w	8002c48 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe fc4f 	bl	80013ec <lfs_tag_id>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461c      	mov	r4, r3
 8002b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fc49 	bl	80013ec <lfs_tag_id>
 8002b5a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8002b5c:	429c      	cmp	r4, r3
 8002b5e:	d873      	bhi.n	8002c48 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8002b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fc35 	bl	80013d2 <lfs_tag_splice>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	029a      	lsls	r2, r3, #10
 8002b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6e:	4413      	add	r3, r2
 8002b70:	663b      	str	r3, [r7, #96]	; 0x60
 8002b72:	e069      	b.n	8002c48 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fbf2 	bl	8001360 <lfs_tag_type1>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b82:	d132      	bne.n	8002bea <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fc17 	bl	80013ba <lfs_tag_chunk>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

                err = lfs_bd_read(lfs,
 8002b9e:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bac:	3204      	adds	r2, #4
 8002bae:	2108      	movs	r1, #8
 8002bb0:	9103      	str	r1, [sp, #12]
 8002bb2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002bb6:	9102      	str	r1, [sp, #8]
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7fd ff86 	bl	8000ad4 <lfs_bd_read>
 8002bc8:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8002bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d006      	beq.n	8002bde <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 8002bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002bd6:	f000 808a 	beq.w	8002cee <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	e15f      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 8002bde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fb69 	bl	80012ba <lfs_pair_fromle32>
 8002be8:	e02e      	b.n	8002c48 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fbd5 	bl	800139c <lfs_tag_type3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d124      	bne.n	8002c48 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 8002bfe:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c04:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c0c:	3204      	adds	r2, #4
 8002c0e:	2108      	movs	r1, #8
 8002c10:	9103      	str	r1, [sp, #12]
 8002c12:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c16:	9102      	str	r1, [sp, #8]
 8002c18:	9201      	str	r2, [sp, #4]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	4602      	mov	r2, r0
 8002c20:	2100      	movs	r1, #0
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7fd ff56 	bl	8000ad4 <lfs_bd_read>
 8002c28:	65b8      	str	r0, [r7, #88]	; 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 8002c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c32:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c36:	d05c      	beq.n	8002cf2 <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 8002c38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fced 	bl	800161c <lfs_fcrc_fromle32>
                hasfcrc = true;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8002c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c4e:	405a      	eors	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f47f ae46 	bne.w	80028e6 <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                        dir->pair[0], off+sizeof(tag)});
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c60:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
 8002c68:	f107 0220 	add.w	r2, r7, #32
 8002c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c70:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8002c74:	4798      	blx	r3
 8002c76:	6578      	str	r0, [r7, #84]	; 0x54
                if (res < 0) {
 8002c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da05      	bge.n	8002c8a <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 8002c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c80:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002c84:	d037      	beq.n	8002cf6 <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                return err;
 8002c88:	e109      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	663b      	str	r3, [r7, #96]	; 0x60
 8002c94:	e627      	b.n	80028e6 <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8002c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9a:	405a      	eors	r2, r3
 8002c9c:	4b82      	ldr	r3, [pc, #520]	; (8002ea8 <lfs_dir_fetchmatch+0x790>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8002caa:	e61c      	b.n	80028e6 <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 8002cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f47f ae19 	bne.w	80028e6 <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fb98 	bl	80013ec <lfs_tag_id>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb92 	bl	80013ec <lfs_tag_id>
 8002cc8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	f63f ae0b 	bhi.w	80028e6 <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cd8:	e605      	b.n	80028e6 <lfs_dir_fetchmatch+0x1ce>
                    break;
 8002cda:	bf00      	nop
 8002cdc:	e00c      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                break;
 8002cde:	bf00      	nop
 8002ce0:	e00a      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002ce2:	bf00      	nop
 8002ce4:	e008      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002ce6:	bf00      	nop
 8002ce8:	e006      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                    break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <lfs_dir_fetchmatch+0x5e0>
                        break;
 8002cf6:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d000      	beq.n	8002d02 <lfs_dir_fetchmatch+0x5ea>
 8002d00:	e017      	b.n	8002d32 <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fa55 	bl	80011b4 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 8002d0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	bfb8      	it	lt
 8002d16:	425b      	neglt	r3, r3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3378      	adds	r3, #120	; 0x78
 8002d1c:	f107 0208 	add.w	r2, r7, #8
 8002d20:	4413      	add	r3, r2
 8002d22:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d30:	e0a1      	b.n	8002e76 <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2200      	movs	r2, #0
 8002d36:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8002d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d03a      	beq.n	8002db6 <lfs_dir_fetchmatch+0x69e>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d48:	6992      	ldr	r2, [r2, #24]
 8002d4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d4e:	fb01 f202 	mul.w	r2, r1, r2
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d12e      	bne.n	8002db6 <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 8002d58:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02a      	beq.n	8002db6 <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d64:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 8002d66:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6c:	69dd      	ldr	r5, [r3, #28]
                int err = lfs_bd_crc(lfs,
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68d2      	ldr	r2, [r2, #12]
 8002d76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d78:	f107 001c 	add.w	r0, r7, #28
 8002d7c:	9003      	str	r0, [sp, #12]
 8002d7e:	9102      	str	r1, [sp, #8]
 8002d80:	9201      	str	r2, [sp, #4]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	462b      	mov	r3, r5
 8002d86:	4622      	mov	r2, r4
 8002d88:	2100      	movs	r1, #0
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7fe f83f 	bl	8000e0e <lfs_bd_crc>
 8002d90:	6538      	str	r0, [r7, #80]	; 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 8002d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <lfs_dir_fetchmatch+0x68c>
 8002d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8002d9e:	d001      	beq.n	8002da4 <lfs_dir_fetchmatch+0x68c>
                    return err;
 8002da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da2:	e07c      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 8002da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	333c      	adds	r3, #60	; 0x3c
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fbcc 	bl	800155c <lfs_gstate_hasmovehere>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fb0c 	bl	80013ec <lfs_tag_id>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461c      	mov	r4, r3
 8002dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fb06 	bl	80013ec <lfs_tag_id>
 8002de0:	4603      	mov	r3, r0
 8002de2:	429c      	cmp	r4, r3
 8002de4:	d104      	bne.n	8002df0 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 8002de6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dee:	e015      	b.n	8002e1c <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 8002df0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df6:	d011      	beq.n	8002e1c <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe faf5 	bl	80013ec <lfs_tag_id>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461c      	mov	r4, r3
 8002e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe faef 	bl	80013ec <lfs_tag_id>
 8002e0e:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 8002e10:	429c      	cmp	r4, r3
 8002e12:	d203      	bcs.n	8002e1c <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 8002e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e16:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8002e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fae0 	bl	80013ec <lfs_tag_id>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	8a9b      	ldrh	r3, [r3, #20]
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f7fd fd78 	bl	800092c <lfs_min>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e44:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 8002e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fa6a 	bl	8001322 <lfs_tag_isvalid>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <lfs_dir_fetchmatch+0x740>
            return besttag;
 8002e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e56:	e022      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 8002e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fac6 	bl	80013ec <lfs_tag_id>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	8a9b      	ldrh	r3, [r3, #20]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d202      	bcs.n	8002e72 <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 8002e6c:	f06f 0301 	mvn.w	r3, #1
 8002e70:	e015      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e013      	b.n	8002e9e <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 8002e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f77f ad00 	ble.w	800287e <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4909      	ldr	r1, [pc, #36]	; (8002eac <lfs_dir_fetchmatch+0x794>)
 8002e88:	9101      	str	r1, [sp, #4]
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	f240 5256 	movw	r2, #1366	; 0x556
 8002e92:	4907      	ldr	r1, [pc, #28]	; (8002eb0 <lfs_dir_fetchmatch+0x798>)
 8002e94:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <lfs_dir_fetchmatch+0x79c>)
 8002e96:	f009 f86b 	bl	800bf70 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8002e9a:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3784      	adds	r7, #132	; 0x84
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	7ffffc00 	.word	0x7ffffc00
 8002eac:	0800cfb4 	.word	0x0800cfb4
 8002eb0:	0800ce9c 	.word	0x0800ce9c
 8002eb4:	0800cfc0 	.word	0x0800cfc0

08002eb8 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af04      	add	r7, sp, #16
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9303      	str	r3, [sp, #12]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9302      	str	r3, [sp, #8]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fc1a 	bl	8002718 <lfs_dir_fetchmatch>
 8002ee4:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	; 0x28
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <lfs_dir_getgstate+0x5c>)
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <lfs_dir_getgstate+0x60>)
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7fe fecf 	bl	8001cac <lfs_dir_get>
 8002f0e:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da05      	bge.n	8002f22 <lfs_dir_getgstate+0x32>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f113 0f02 	cmn.w	r3, #2
 8002f1c:	d001      	beq.n	8002f22 <lfs_dir_getgstate+0x32>
        return res;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	e00f      	b.n	8002f42 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f113 0f02 	cmn.w	r3, #2
 8002f28:	d00a      	beq.n	8002f40 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fb34 	bl	800159c <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fe fa85 	bl	800144a <lfs_gstate_xor>
    }

    return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	7ff0000c 	.word	0x7ff0000c
 8002f50:	7ff00000 	.word	0x7ff00000

08002f54 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b08f      	sub	sp, #60	; 0x3c
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	689c      	ldr	r4, [r3, #8]
 8002f72:	68b8      	ldr	r0, [r7, #8]
 8002f74:	f7fe fa49 	bl	800140a <lfs_tag_size>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7fd fcd5 	bl	800092c <lfs_min>
 8002f82:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8002f84:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8002f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f90:	6849      	ldr	r1, [r1, #4]
 8002f92:	69b8      	ldr	r0, [r7, #24]
 8002f94:	9003      	str	r0, [sp, #12]
 8002f96:	9102      	str	r1, [sp, #8]
 8002f98:	9201      	str	r2, [sp, #4]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	6a38      	ldr	r0, [r7, #32]
 8002fa4:	f7fd fee2 	bl	8000d6c <lfs_bd_cmp>
 8002fa8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <lfs_dir_find_match+0x60>
        return res;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	e014      	b.n	8002fde <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	689c      	ldr	r4, [r3, #8]
 8002fb8:	68b8      	ldr	r0, [r7, #8]
 8002fba:	f7fe fa26 	bl	800140a <lfs_tag_size>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	429c      	cmp	r4, r3
 8002fc2:	d00b      	beq.n	8002fdc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	689c      	ldr	r4, [r3, #8]
 8002fc8:	68b8      	ldr	r0, [r7, #8]
 8002fca:	f7fe fa1e 	bl	800140a <lfs_tag_size>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	429c      	cmp	r4, r3
 8002fd2:	d201      	bcs.n	8002fd8 <lfs_dir_find_match+0x84>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e002      	b.n	8002fde <lfs_dir_find_match+0x8a>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e000      	b.n	8002fde <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	372c      	adds	r7, #44	; 0x2c
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b093      	sub	sp, #76	; 0x4c
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003008:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800300a:	4b6e      	ldr	r3, [pc, #440]	; (80031c4 <lfs_dir_find+0x1dc>)
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800301e:	496a      	ldr	r1, [pc, #424]	; (80031c8 <lfs_dir_find+0x1e0>)
 8003020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003022:	f009 f938 	bl	800c296 <strspn>
 8003026:	4602      	mov	r2, r0
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	4413      	add	r3, r2
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800302e:	4966      	ldr	r1, [pc, #408]	; (80031c8 <lfs_dir_find+0x1e0>)
 8003030:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003032:	f009 f91f 	bl	800c274 <strcspn>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <lfs_dir_find+0x62>
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	4b62      	ldr	r3, [pc, #392]	; (80031cc <lfs_dir_find+0x1e4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d00a      	beq.n	8003060 <lfs_dir_find+0x78>
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	2b02      	cmp	r3, #2
 800304e:	d10c      	bne.n	800306a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8003050:	2202      	movs	r2, #2
 8003052:	495f      	ldr	r1, [pc, #380]	; (80031d0 <lfs_dir_find+0x1e8>)
 8003054:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003056:	f009 f8d9 	bl	800c20c <memcmp>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d104      	bne.n	800306a <lfs_dir_find+0x82>
            name += namelen;
 8003060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	4413      	add	r3, r2
 8003066:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8003068:	e7d9      	b.n	800301e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	4413      	add	r3, r2
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8003072:	2301      	movs	r3, #1
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8003076:	4954      	ldr	r1, [pc, #336]	; (80031c8 <lfs_dir_find+0x1e0>)
 8003078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800307a:	f009 f90c 	bl	800c296 <strspn>
 800307e:	4602      	mov	r2, r0
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	4413      	add	r3, r2
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8003086:	4950      	ldr	r1, [pc, #320]	; (80031c8 <lfs_dir_find+0x1e0>)
 8003088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800308a:	f009 f8f3 	bl	800c274 <strcspn>
 800308e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01d      	beq.n	80030d2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d112      	bne.n	80030c2 <lfs_dir_find+0xda>
 800309c:	2202      	movs	r2, #2
 800309e:	494c      	ldr	r1, [pc, #304]	; (80031d0 <lfs_dir_find+0x1e8>)
 80030a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030a2:	f009 f8b3 	bl	800c20c <memcmp>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <lfs_dir_find+0xda>
                depth -= 1;
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	4413      	add	r3, r2
 80030be:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 80030c0:	e7ad      	b.n	800301e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	3301      	adds	r3, #1
 80030c6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 80030c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	4413      	add	r3, r2
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 80030d0:	e7d1      	b.n	8003076 <lfs_dir_find+0x8e>
                break;
 80030d2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 80030d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <lfs_dir_find+0xf8>
            return tag;
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	e06c      	b.n	80031ba <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe f957 	bl	800139c <lfs_tag_type3>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d002      	beq.n	80030fa <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 80030f4:	f06f 0313 	mvn.w	r3, #19
 80030f8:	e05f      	b.n	80031ba <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe f975 	bl	80013ec <lfs_tag_id>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800310a:	429a      	cmp	r2, r3
 800310c:	d01c      	beq.n	8003148 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe f96b 	bl	80013ec <lfs_tag_id>
 8003116:	4603      	mov	r3, r0
 8003118:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800311a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800311e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8003126:	9200      	str	r2, [sp, #0]
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <lfs_dir_find+0x1ec>)
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7fe fdbd 	bl	8001cac <lfs_dir_get>
 8003132:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	da01      	bge.n	800313e <lfs_dir_find+0x156>
                return res;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	e03d      	b.n	80031ba <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3318      	adds	r3, #24
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f8b9 	bl	80012ba <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800314e:	212f      	movs	r1, #47	; 0x2f
 8003150:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003152:	f009 f882 	bl	800c25a <strchr>
 8003156:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <lfs_dir_find+0x178>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	e000      	b.n	8003162 <lfs_dir_find+0x17a>
 8003160:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	613a      	str	r2, [r7, #16]
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	617a      	str	r2, [r7, #20]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800316e:	f107 0210 	add.w	r2, r7, #16
 8003172:	9203      	str	r2, [sp, #12]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <lfs_dir_find+0x1f0>)
 8003176:	9202      	str	r2, [sp, #8]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8003182:	4622      	mov	r2, r4
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff fac6 	bl	8002718 <lfs_dir_fetchmatch>
 800318c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2b00      	cmp	r3, #0
 8003192:	da01      	bge.n	8003198 <lfs_dir_find+0x1b0>
                return tag;
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	e010      	b.n	80031ba <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800319e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	4413      	add	r3, r2
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 80031a6:	e73a      	b.n	800301e <lfs_dir_find+0x36>
            if (!dir->split) {
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	7ddb      	ldrb	r3, [r3, #23]
 80031ac:	f083 0301 	eor.w	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0c8      	beq.n	8003148 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80031b6:	f06f 0301 	mvn.w	r3, #1
    }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	373c      	adds	r7, #60	; 0x3c
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	002ffc00 	.word	0x002ffc00
 80031c8:	0800d000 	.word	0x0800d000
 80031cc:	0800d004 	.word	0x0800d004
 80031d0:	0800d008 	.word	0x0800d008
 80031d4:	700ffc00 	.word	0x700ffc00
 80031d8:	08002f55 	.word	0x08002f55

080031dc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b08b      	sub	sp, #44	; 0x2c
 80031e0:	af04      	add	r7, sp, #16
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f103 0010 	add.w	r0, r3, #16
 80031f0:	68fc      	ldr	r4, [r7, #12]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	6852      	ldr	r2, [r2, #4]
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	9103      	str	r1, [sp, #12]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	9102      	str	r1, [sp, #8]
 8003202:	9201      	str	r2, [sp, #4]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	4622      	mov	r2, r4
 800320a:	4601      	mov	r1, r0
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7fd fef3 	bl	8000ff8 <lfs_bd_prog>
 8003212:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <lfs_dir_commitprog+0x42>
        return err;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	e010      	b.n	8003240 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fcd8 	bl	8007bdc <lfs_crc>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	441a      	add	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	605a      	str	r2, [r3, #4]
    return 0;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}

08003248 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b08f      	sub	sp, #60	; 0x3c
 800324c:	af04      	add	r7, sp, #16
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f8e3 	bl	8001422 <lfs_tag_dsize>
 800325c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	441a      	add	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	429a      	cmp	r2, r3
 800326c:	d902      	bls.n	8003274 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800326e:	f06f 031b 	mvn.w	r3, #27
 8003272:	e065      	b.n	8003340 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4053      	eors	r3, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd fbdf 	bl	8000a44 <lfs_tobe32>
 8003286:	4603      	mov	r3, r0
 8003288:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800328a:	f107 0214 	add.w	r2, r7, #20
 800328e:	2304      	movs	r3, #4
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ffa2 	bl	80031dc <lfs_dir_commitprog>
 8003298:	61f8      	str	r0, [r7, #28]
    if (err) {
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <lfs_dir_commitattr+0x5c>
        return err;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	e04d      	b.n	8003340 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db0c      	blt.n	80032c4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	3b04      	subs	r3, #4
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff ff92 	bl	80031dc <lfs_dir_commitprog>
 80032b8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d039      	beq.n	8003334 <lfs_dir_commitattr+0xec>
            return err;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	e03d      	b.n	8003340 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e02d      	b.n	800332a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80032ce:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80032d6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	440a      	add	r2, r1
 80032e4:	2101      	movs	r1, #1
 80032e6:	9103      	str	r1, [sp, #12]
 80032e8:	f107 0113 	add.w	r1, r7, #19
 80032ec:	9102      	str	r1, [sp, #8]
 80032ee:	9201      	str	r2, [sp, #4]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4623      	mov	r3, r4
 80032f4:	4602      	mov	r2, r0
 80032f6:	2100      	movs	r1, #0
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7fd fbeb 	bl	8000ad4 <lfs_bd_read>
 80032fe:	61f8      	str	r0, [r7, #28]
            if (err) {
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <lfs_dir_commitattr+0xc2>
                return err;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	e01a      	b.n	8003340 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800330a:	f107 0213 	add.w	r2, r7, #19
 800330e:	2301      	movs	r3, #1
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff ff62 	bl	80031dc <lfs_dir_commitprog>
 8003318:	61f8      	str	r0, [r7, #28]
            if (err) {
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <lfs_dir_commitattr+0xdc>
                return err;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	e00d      	b.n	8003340 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3301      	adds	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	3b04      	subs	r3, #4
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	429a      	cmp	r2, r3
 8003332:	d3cc      	bcc.n	80032ce <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
    return 0;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	372c      	adds	r7, #44	; 0x2c
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b097      	sub	sp, #92	; 0x5c
 800334c:	af04      	add	r7, sp, #16
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 8003356:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800335e:	69db      	ldr	r3, [r3, #28]
    const lfs_off_t end = lfs_alignup(
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7fd fae2 	bl	800092c <lfs_min>
 8003368:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f7fd fafd 	bl	8000972 <lfs_alignup>
 8003378:	63b8      	str	r0, [r7, #56]	; 0x38

    lfs_off_t off1 = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8003382:	e0fe      	b.n	8003582 <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	3b04      	subs	r3, #4
 800338e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd faca 	bl	800092c <lfs_min>
 8003398:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4413      	add	r3, r2
        lfs_off_t noff = (
 80033a0:	3304      	adds	r3, #4
 80033a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 80033a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d206      	bcs.n	80033ba <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	3b14      	subs	r3, #20
 80033b0:	4619      	mov	r1, r3
 80033b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80033b4:	f7fd faba 	bl	800092c <lfs_min>
 80033b8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 80033ba:	23ff      	movs	r3, #255	; 0xff
 80033bc:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 80033be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d35f      	bcc.n	8003486 <lfs_dir_commitcrc+0x13e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d855      	bhi.n	8003486 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 80033da:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033e0:	6998      	ldr	r0, [r3, #24]
            int err = lfs_bd_read(lfs,
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	9203      	str	r2, [sp, #12]
 80033ea:	f107 021b 	add.w	r2, r7, #27
 80033ee:	9202      	str	r2, [sp, #8]
 80033f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f2:	9201      	str	r2, [sp, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	4603      	mov	r3, r0
 80033f8:	460a      	mov	r2, r1
 80033fa:	2100      	movs	r1, #0
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fd fb69 	bl	8000ad4 <lfs_bd_read>
 8003402:	62f8      	str	r0, [r7, #44]	; 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <lfs_dir_commitcrc+0xce>
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003410:	d001      	beq.n	8003416 <lfs_dir_commitcrc+0xce>
                return err;
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	e101      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341a:	699b      	ldr	r3, [r3, #24]
                struct lfs_fcrc fcrc = {
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003422:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 8003424:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800342a:	699c      	ldr	r4, [r3, #24]
                err = lfs_bd_crc(lfs,
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	f107 0108 	add.w	r1, r7, #8
 8003436:	3104      	adds	r1, #4
 8003438:	9103      	str	r1, [sp, #12]
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800343e:	9201      	str	r2, [sp, #4]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4623      	mov	r3, r4
 8003444:	4602      	mov	r2, r0
 8003446:	2100      	movs	r1, #0
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fd fce0 	bl	8000e0e <lfs_bd_crc>
 800344e:	62f8      	str	r0, [r7, #44]	; 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <lfs_dir_commitcrc+0x11a>
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800345c:	d001      	beq.n	8003462 <lfs_dir_commitcrc+0x11a>
                    return err;
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	e0db      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe f8f0 	bl	800164c <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <lfs_dir_commitcrc+0x2dc>)
 8003472:	6839      	ldr	r1, [r7, #0]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fee7 	bl	8003248 <lfs_dir_commitattr>
 800347a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <lfs_dir_commitcrc+0x13e>
                    return err;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	e0c9      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 8003486:	7efb      	ldrb	r3, [r7, #27]
 8003488:	43db      	mvns	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	09db      	lsrs	r3, r3, #7
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	051a      	lsls	r2, r3, #20
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800349c:	1acb      	subs	r3, r1, r3
 800349e:	3b04      	subs	r3, #4
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 80034a6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	4053      	eors	r3, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fac5 	bl	8000a44 <lfs_tobe32>
 80034ba:	4603      	mov	r3, r0
 80034bc:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f107 0110 	add.w	r1, r7, #16
 80034c6:	2204      	movs	r2, #4
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 fb87 	bl	8007bdc <lfs_crc>
 80034ce:	4602      	mov	r2, r0
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fa9c 	bl	8000a16 <lfs_tole32>
 80034de:	4603      	mov	r3, r0
 80034e0:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f103 0010 	add.w	r0, r3, #16
 80034e8:	687c      	ldr	r4, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	6852      	ldr	r2, [r2, #4]
 80034f2:	2108      	movs	r1, #8
 80034f4:	9103      	str	r1, [sp, #12]
 80034f6:	f107 0110 	add.w	r1, r7, #16
 80034fa:	9102      	str	r1, [sp, #8]
 80034fc:	9201      	str	r2, [sp, #4]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2300      	movs	r3, #0
 8003502:	4622      	mov	r2, r4
 8003504:	4601      	mov	r1, r0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fd fd76 	bl	8000ff8 <lfs_bd_prog>
 800350c:	6278      	str	r0, [r7, #36]	; 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <lfs_dir_commitcrc+0x1d0>
            return err;
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	e080      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off = noff;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003530:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8003532:	7efb      	ldrb	r3, [r7, #27]
 8003534:	43db      	mvns	r3, r3
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	405a      	eors	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800354a:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800354c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	429a      	cmp	r2, r3
 8003552:	d208      	bcs.n	8003566 <lfs_dir_commitcrc+0x21e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	4413      	add	r3, r2
 8003560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003562:	429a      	cmp	r2, r3
 8003564:	d30d      	bcc.n	8003582 <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f103 0110 	add.w	r1, r3, #16
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	2300      	movs	r3, #0
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fd0d 	bl	8000f90 <lfs_bd_sync>
 8003576:	6238      	str	r0, [r7, #32]
            if (err) {
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <lfs_dir_commitcrc+0x23a>
                return err;
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	e04b      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003588:	429a      	cmp	r2, r3
 800358a:	f63f aefb 	bhi.w	8003384 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t crc = 0xffffffff;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003598:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359e:	1d1c      	adds	r4, r3, #4
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a8:	1a8a      	subs	r2, r1, r2
 80035aa:	f107 011c 	add.w	r1, r7, #28
 80035ae:	9103      	str	r1, [sp, #12]
 80035b0:	9202      	str	r2, [sp, #8]
 80035b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b4:	9201      	str	r2, [sp, #4]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4623      	mov	r3, r4
 80035ba:	4602      	mov	r2, r0
 80035bc:	2100      	movs	r1, #0
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fc25 	bl	8000e0e <lfs_bd_crc>
 80035c4:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <lfs_dir_commitcrc+0x288>
        return err;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	e024      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d002      	beq.n	80035de <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 80035d8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80035dc:	e01d      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f107 021c 	add.w	r2, r7, #28
 80035e8:	9203      	str	r2, [sp, #12]
 80035ea:	2204      	movs	r2, #4
 80035ec:	9202      	str	r2, [sp, #8]
 80035ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035f0:	9201      	str	r2, [sp, #4]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2304      	movs	r3, #4
 80035f6:	460a      	mov	r2, r1
 80035f8:	2100      	movs	r1, #0
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fc07 	bl	8000e0e <lfs_bd_crc>
 8003600:	6338      	str	r0, [r7, #48]	; 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <lfs_dir_commitcrc+0x2c4>
        return err;
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	e006      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 8003612:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8003616:	e000      	b.n	800361a <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	374c      	adds	r7, #76	; 0x4c
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	5ffffc08 	.word	0x5ffffc08

08003628 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af04      	add	r7, sp, #16
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e016      	b.n	8003666 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	bfb8      	it	lt
 8003644:	425b      	neglt	r3, r3
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4413      	add	r3, r2
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe f9be 	bl	80019d0 <lfs_alloc>
 8003654:	60f8      	str	r0, [r7, #12]
        if (err) {
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <lfs_dir_alloc+0x38>
            return err;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	e058      	b.n	8003712 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3301      	adds	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b01      	cmp	r3, #1
 800366a:	dde5      	ble.n	8003638 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800367c:	2004      	movs	r0, #4
 800367e:	9003      	str	r0, [sp, #12]
 8003680:	9202      	str	r2, [sp, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	9201      	str	r2, [sp, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2304      	movs	r3, #4
 800368a:	460a      	mov	r2, r1
 800368c:	2100      	movs	r1, #0
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7fd fa20 	bl	8000ad4 <lfs_bd_read>
 8003694:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd f9b1 	bl	8000a02 <lfs_fromle32>
 80036a0:	4602      	mov	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <lfs_dir_alloc+0x90>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80036b2:	d001      	beq.n	80036b8 <lfs_dir_alloc+0x90>
        return err;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	e02c      	b.n	8003712 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b00      	cmp	r3, #0
 80036c0:	dd0e      	ble.n	80036e0 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	3301      	adds	r3, #1
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7fd f94c 	bl	8000972 <lfs_alignup>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2204      	movs	r2, #4
 80036e4:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ec:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2200      	movs	r2, #0
 80036f2:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fa:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003702:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3348      	adds	r3, #72	; 0x48
 800372c:	461a      	mov	r2, r3
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fbdd 	bl	8002ef0 <lfs_dir_getgstate>
 8003736:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <lfs_dir_drop+0x26>
        return err;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	e022      	b.n	8003788 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3318      	adds	r3, #24
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fdd1 	bl	80012ee <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7ddb      	ldrb	r3, [r3, #23]
 8003750:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003754:	051a      	lsls	r2, r3, #20
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <lfs_dir_drop+0x74>)
 8003758:	4313      	orrs	r3, r2
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3318      	adds	r3, #24
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	f107 021c 	add.w	r2, r7, #28
 8003766:	2301      	movs	r3, #1
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f001 f978 	bl	8004a60 <lfs_dir_commit>
 8003770:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3318      	adds	r3, #24
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fd9f 	bl	80012ba <lfs_pair_fromle32>
    if (err) {
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <lfs_dir_drop+0x6a>
        return err;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	e000      	b.n	8003788 <lfs_dir_drop+0x6c>
    }

    return 0;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	000ffc08 	.word	0x000ffc08

08003794 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b092      	sub	sp, #72	; 0x48
 8003798:	af04      	add	r7, sp, #16
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	4619      	mov	r1, r3
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ff3d 	bl	8003628 <lfs_dir_alloc>
 80037ae:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <lfs_dir_split+0x26>
        return err;
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	e03c      	b.n	8003834 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	7ddb      	ldrb	r3, [r3, #23]
 80037be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80037ce:	f107 0110 	add.w	r1, r7, #16
 80037d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037d6:	9302      	str	r3, [sp, #8]
 80037d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f878 	bl	80038dc <lfs_dir_compact>
 80037ec:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da01      	bge.n	80037f8 <lfs_dir_split+0x64>
        return res;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	e01d      	b.n	8003834 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2201      	movs	r2, #1
 8003808:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3320      	adds	r3, #32
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f7fd fcfc 	bl	8001210 <lfs_pair_cmp>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <lfs_dir_split+0x9e>
 800381e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3738      	adds	r7, #56	; 0x38
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800384c:	68b8      	ldr	r0, [r7, #8]
 800384e:	f7fd fde8 	bl	8001422 <lfs_tag_dsize>
 8003852:	4602      	mov	r2, r0
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	441a      	add	r2, r3
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	601a      	str	r2, [r3, #0]
    return 0;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f7ff fce0 	bl	8003248 <lfs_dir_commitattr>
 8003888:	4603      	mov	r3, r0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	dd11      	ble.n	80038ca <lfs_dir_needsrelocation+0x38>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	3301      	adds	r3, #1
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b2:	3201      	adds	r2, #1
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80038bc:	fb01 f202 	mul.w	r2, r1, r2
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <lfs_dir_needsrelocation+0x38>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <lfs_dir_needsrelocation+0x3a>
 80038ca:	2300      	movs	r3, #0
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b0a4      	sub	sp, #144	; 0x90
 80038e0:	af0a      	add	r7, sp, #40	; 0x28
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ffcd 	bl	8003892 <lfs_dir_needsrelocation>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8003908:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <lfs_dir_compact+0x52>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2200      	movs	r2, #0
 8003914:	657a      	str	r2, [r7, #84]	; 0x54
 8003916:	2201      	movs	r2, #1
 8003918:	65ba      	str	r2, [r7, #88]	; 0x58
 800391a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fc75 	bl	8001210 <lfs_pair_cmp>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8155 	bne.w	8003bd8 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 8003932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003934:	2300      	movs	r3, #0
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
 8003938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393c:	647b      	str	r3, [r7, #68]	; 0x44
 800393e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
 8003944:	2300      	movs	r3, #0
 8003946:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <lfs_dir_compact+0x80>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	3b08      	subs	r3, #8
 800395a:	e003      	b.n	8003964 <lfs_dir_compact+0x88>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8003964:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4619      	mov	r1, r3
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7fd fbef 	bl	8001150 <lfs_bd_erase>
 8003972:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800397a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003980:	f000 812c 	beq.w	8003bdc <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8003984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003986:	e188      	b.n	8003c9a <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd f842 	bl	8000a16 <lfs_tole32>
 8003992:	4602      	mov	r2, r0
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800399e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80039a2:	2304      	movs	r3, #4
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fc19 	bl	80031dc <lfs_dir_commitprog>
 80039aa:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd f826 	bl	8000a02 <lfs_fromle32>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	609a      	str	r2, [r3, #8]
            if (err) {
 80039bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80039c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80039c8:	f000 810a 	beq.w	8003be0 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	e164      	b.n	8003c9a <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80039d0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80039d4:	425b      	negs	r3, r3
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	637a      	str	r2, [r7, #52]	; 0x34
 80039de:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80039e2:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80039e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80039e8:	9208      	str	r2, [sp, #32]
 80039ea:	4aae      	ldr	r2, [pc, #696]	; (8003ca4 <lfs_dir_compact+0x3c8>)
 80039ec:	9207      	str	r2, [sp, #28]
 80039ee:	9306      	str	r3, [sp, #24]
 80039f0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80039f4:	9305      	str	r3, [sp, #20]
 80039f6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9303      	str	r3, [sp, #12]
 8003a00:	4ba9      	ldr	r3, [pc, #676]	; (8003ca8 <lfs_dir_compact+0x3cc>)
 8003a02:	9302      	str	r3, [sp, #8]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a10:	2200      	movs	r2, #0
 8003a12:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7fe fa9b 	bl	8001f50 <lfs_dir_traverse>
 8003a1a:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8003a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8003a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a24:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a28:	f000 80dc 	beq.w	8003be4 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8003a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2e:	e134      	b.n	8003c9a <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3318      	adds	r3, #24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fbd1 	bl	80011dc <lfs_pair_isnull>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f083 0301 	eor.w	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d022      	beq.n	8003a8c <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3318      	adds	r3, #24
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fc4f 	bl	80012ee <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	7ddb      	ldrb	r3, [r3, #23]
 8003a54:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003a58:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8003a5a:	4a94      	ldr	r2, [pc, #592]	; (8003cac <lfs_dir_compact+0x3d0>)
 8003a5c:	431a      	orrs	r2, r3
                        dir->tail);
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8003a62:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff fbee 	bl	8003248 <lfs_dir_commitattr>
 8003a6c:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3318      	adds	r3, #24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fc21 	bl	80012ba <lfs_pair_fromle32>
                if (err) {
 8003a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d006      	beq.n	8003a8c <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8003a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a80:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003a84:	f000 80b0 	beq.w	8003be8 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8003a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a8a:	e106      	b.n	8003c9a <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8003a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003a98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d011      	beq.n	8003aca <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fcc9 	bl	800144a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fcc0 	bl	800144a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fcb7 	bl	800144a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8003ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aec:	461a      	mov	r2, r3
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff f9fd 	bl	8002ef0 <lfs_dir_getgstate>
 8003af6:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <lfs_dir_compact+0x226>
                return err;
 8003afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b00:	e0cb      	b.n	8003c9a <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8003b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fcc3 	bl	8001492 <lfs_gstate_iszero>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d016      	beq.n	8003b46 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8003b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd fd5d 	bl	80015dc <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8003b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b26:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003b2a:	4a61      	ldr	r2, [pc, #388]	; (8003cb0 <lfs_dir_compact+0x3d4>)
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fb8b 	bl	8003248 <lfs_dir_commitattr>
 8003b32:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8003b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b40:	d054      	beq.n	8003bec <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 8003b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b44:	e0a9      	b.n	8003c9a <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8003b46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff fbfb 	bl	8003348 <lfs_dir_commitcrc>
 8003b52:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8003b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8003b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8003b60:	d046      	beq.n	8003bf0 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8003b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b64:	e099      	b.n	8003c9a <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8003b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b6c:	6992      	ldr	r2, [r2, #24]
 8003b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b72:	fb01 f202 	mul.w	r2, r1, r2
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d006      	beq.n	8003b8a <lfs_dir_compact+0x2ae>
 8003b7c:	4b4d      	ldr	r3, [pc, #308]	; (8003cb4 <lfs_dir_compact+0x3d8>)
 8003b7e:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <lfs_dir_compact+0x3dc>)
 8003b80:	f640 0103 	movw	r1, #2051	; 0x803
 8003b84:	484d      	ldr	r0, [pc, #308]	; (8003cbc <lfs_dir_compact+0x3e0>)
 8003b86:	f007 ff5d 	bl	800ba44 <__assert_func>
            lfs_pair_swap(dir->pair);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd fb11 	bl	80011b4 <lfs_pair_swap>
            dir->count = end - begin;
 8003b92:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003b96:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8003ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8003ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3348      	adds	r3, #72	; 0x48
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8003bba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003bbe:	f083 0301 	eor.w	r3, r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d065      	beq.n	8003c94 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	333c      	adds	r3, #60	; 0x3c
 8003bce:	3230      	adds	r2, #48	; 0x30
 8003bd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8003bd6:	e05d      	b.n	8003c94 <lfs_dir_compact+0x3b8>
        goto relocate;
 8003bd8:	bf00      	nop
 8003bda:	e00a      	b.n	8003bf2 <lfs_dir_compact+0x316>
                    goto relocate;
 8003bdc:	bf00      	nop
 8003bde:	e008      	b.n	8003bf2 <lfs_dir_compact+0x316>
                    goto relocate;
 8003be0:	bf00      	nop
 8003be2:	e006      	b.n	8003bf2 <lfs_dir_compact+0x316>
                    goto relocate;
 8003be4:	bf00      	nop
 8003be6:	e004      	b.n	8003bf2 <lfs_dir_compact+0x316>
                        goto relocate;
 8003be8:	bf00      	nop
 8003bea:	e002      	b.n	8003bf2 <lfs_dir_compact+0x316>
                        goto relocate;
 8003bec:	bf00      	nop
 8003bee:	e000      	b.n	8003bf2 <lfs_dir_compact+0x316>
                    goto relocate;
 8003bf0:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3310      	adds	r3, #16
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7fc ff43 	bl	8000a8a <lfs_cache_drop>
        if (!tired) {
 8003c04:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003c08:	f083 0301 	eor.w	r3, r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <lfs_dir_compact+0x3e4>)
 8003c18:	9200      	str	r2, [sp, #0]
 8003c1a:	f640 0215 	movw	r2, #2069	; 0x815
 8003c1e:	4927      	ldr	r1, [pc, #156]	; (8003cbc <lfs_dir_compact+0x3e0>)
 8003c20:	4828      	ldr	r0, [pc, #160]	; (8003cc4 <lfs_dir_compact+0x3e8>)
 8003c22:	f008 f9a5 	bl	800bf70 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	617a      	str	r2, [r7, #20]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	61ba      	str	r2, [r7, #24]
 8003c30:	f107 0214 	add.w	r2, r7, #20
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd faea 	bl	8001210 <lfs_pair_cmp>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10c      	bne.n	8003c5c <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <lfs_dir_compact+0x3e4>)
 8003c48:	9200      	str	r2, [sp, #0]
 8003c4a:	f640 021a 	movw	r2, #2074	; 0x81a
 8003c4e:	491b      	ldr	r1, [pc, #108]	; (8003cbc <lfs_dir_compact+0x3e0>)
 8003c50:	481d      	ldr	r0, [pc, #116]	; (8003cc8 <lfs_dir_compact+0x3ec>)
 8003c52:	f008 f98d 	bl	800bf70 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8003c56:	f06f 031b 	mvn.w	r3, #27
 8003c5a:	e01e      	b.n	8003c9a <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7fd feb4 	bl	80019d0 <lfs_alloc>
 8003c68:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8003c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <lfs_dir_compact+0x3ae>
 8003c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c72:	f113 0f1c 	cmn.w	r3, #28
 8003c76:	d106      	bne.n	8003c86 <lfs_dir_compact+0x3aa>
 8003c78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003c7c:	f083 0301 	eor.w	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <lfs_dir_compact+0x3ae>
            return err;
 8003c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c88:	e007      	b.n	8003c9a <lfs_dir_compact+0x3be>
        }

        tired = false;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8003c90:	bf00      	nop
    while (true) {
 8003c92:	e64c      	b.n	800392e <lfs_dir_compact+0x52>
        break;
 8003c94:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8003c96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3768      	adds	r7, #104	; 0x68
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	08003869 	.word	0x08003869
 8003ca8:	400ffc00 	.word	0x400ffc00
 8003cac:	000ffc08 	.word	0x000ffc08
 8003cb0:	7ffffc0c 	.word	0x7ffffc0c
 8003cb4:	0800d00c 	.word	0x0800d00c
 8003cb8:	0800e294 	.word	0x0800e294
 8003cbc:	0800ce9c 	.word	0x0800ce9c
 8003cc0:	0800cfb4 	.word	0x0800cfb4
 8003cc4:	0800d034 	.word	0x0800d034
 8003cc8:	0800d058 	.word	0x0800d058

08003ccc <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b097      	sub	sp, #92	; 0x5c
 8003cd0:	af0a      	add	r7, sp, #40	; 0x28
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8003cda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003ce0:	e058      	b.n	8003d94 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cec:	b292      	uxth	r2, r2
 8003cee:	4252      	negs	r2, r2
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	b212      	sxth	r2, r2
 8003cf4:	f107 0118 	add.w	r1, r7, #24
 8003cf8:	9108      	str	r1, [sp, #32]
 8003cfa:	497a      	ldr	r1, [pc, #488]	; (8003ee4 <lfs_dir_splittingcompact+0x218>)
 8003cfc:	9107      	str	r1, [sp, #28]
 8003cfe:	9206      	str	r2, [sp, #24]
 8003d00:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d04:	9205      	str	r2, [sp, #20]
 8003d06:	9304      	str	r3, [sp, #16]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <lfs_dir_splittingcompact+0x21c>)
 8003d0e:	9302      	str	r3, [sp, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7fe f915 	bl	8001f50 <lfs_dir_traverse>
 8003d26:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <lfs_dir_splittingcompact+0x66>
                return err;
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	e0d3      	b.n	8003eda <lfs_dir_splittingcompact+0x20e>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 8003d32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d3c:	d822      	bhi.n	8003d84 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d42:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003d44:	f1a3 0428 	sub.w	r4, r3, #40	; 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                    && size <= lfs_min(
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	e003      	b.n	8003d64 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d60:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(
 8003d62:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d68:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fe00 	bl	8000972 <lfs_alignup>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4619      	mov	r1, r3
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fc fdd8 	bl	800092c <lfs_min>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d20e      	bcs.n	8003da2 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8003d84:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d90:	4413      	add	r3, r2
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8003d94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d8a0      	bhi.n	8003ce2 <lfs_dir_splittingcompact+0x16>
 8003da0:	e000      	b.n	8003da4 <lfs_dir_splittingcompact+0xd8>
                break;
 8003da2:	bf00      	nop
        }

        if (split == begin) {
 8003da4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d02d      	beq.n	8003e0a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003db6:	9202      	str	r2, [sp, #8]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fce5 	bl	8003794 <lfs_dir_split>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <lfs_dir_splittingcompact+0x112>
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f113 0f1c 	cmn.w	r3, #28
 8003dd8:	d001      	beq.n	8003dde <lfs_dir_splittingcompact+0x112>
            return err;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	e07d      	b.n	8003eda <lfs_dir_splittingcompact+0x20e>
        }

        if (err) {
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00e      	beq.n	8003e02 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	493f      	ldr	r1, [pc, #252]	; (8003eec <lfs_dir_splittingcompact+0x220>)
 8003dee:	9101      	str	r1, [sp, #4]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	f640 026d 	movw	r2, #2157	; 0x86d
 8003df8:	493d      	ldr	r1, [pc, #244]	; (8003ef0 <lfs_dir_splittingcompact+0x224>)
 8003dfa:	483e      	ldr	r0, [pc, #248]	; (8003ef4 <lfs_dir_splittingcompact+0x228>)
 8003dfc:	f008 f8b8 	bl	800bf70 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8003e00:	e004      	b.n	8003e0c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8003e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8003e08:	e767      	b.n	8003cda <lfs_dir_splittingcompact+0xe>
            break;
 8003e0a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff fd3f 	bl	8003892 <lfs_dir_needsrelocation>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d050      	beq.n	8003ebc <lfs_dir_splittingcompact+0x1f0>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	613a      	str	r2, [r7, #16]
 8003e20:	2201      	movs	r2, #1
 8003e22:	617a      	str	r2, [r7, #20]
 8003e24:	f107 0210 	add.w	r2, r7, #16
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd f9f0 	bl	8001210 <lfs_pair_cmp>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d142      	bne.n	8003ebc <lfs_dir_splittingcompact+0x1f0>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f003 fd6e 	bl	8007918 <lfs_fs_size_>
 8003e3c:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	da01      	bge.n	8003e48 <lfs_dir_splittingcompact+0x17c>
            return size;
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	e048      	b.n	8003eda <lfs_dir_splittingcompact+0x20e>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	1ad2      	subs	r2, r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d930      	bls.n	8003ebc <lfs_dir_splittingcompact+0x1f0>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4a23      	ldr	r2, [pc, #140]	; (8003eec <lfs_dir_splittingcompact+0x220>)
 8003e60:	9200      	str	r2, [sp, #0]
 8003e62:	f640 0283 	movw	r2, #2179	; 0x883
 8003e66:	4922      	ldr	r1, [pc, #136]	; (8003ef0 <lfs_dir_splittingcompact+0x224>)
 8003e68:	4823      	ldr	r0, [pc, #140]	; (8003ef8 <lfs_dir_splittingcompact+0x22c>)
 8003e6a:	f008 f881 	bl	800bf70 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8003e6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff fc85 	bl	8003794 <lfs_dir_split>
 8003e8a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <lfs_dir_splittingcompact+0x1d2>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f113 0f1c 	cmn.w	r3, #28
 8003e98:	d001      	beq.n	8003e9e <lfs_dir_splittingcompact+0x1d2>
                return err;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	e01d      	b.n	8003eda <lfs_dir_splittingcompact+0x20e>
            }

            if (err) {
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <lfs_dir_splittingcompact+0x220>)
 8003ea6:	f640 028d 	movw	r2, #2189	; 0x88d
 8003eaa:	4911      	ldr	r1, [pc, #68]	; (8003ef0 <lfs_dir_splittingcompact+0x224>)
 8003eac:	4813      	ldr	r0, [pc, #76]	; (8003efc <lfs_dir_splittingcompact+0x230>)
 8003eae:	f008 f85f 	bl	800bf70 <iprintf>
 8003eb2:	e003      	b.n	8003ebc <lfs_dir_splittingcompact+0x1f0>
            } else {
                end = begin;
 8003eb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003eb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8003ebc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fd02 	bl	80038dc <lfs_dir_compact>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3734      	adds	r7, #52	; 0x34
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	0800383d 	.word	0x0800383d
 8003ee8:	400ffc00 	.word	0x400ffc00
 8003eec:	0800cfb4 	.word	0x0800cfb4
 8003ef0:	0800ce9c 	.word	0x0800ce9c
 8003ef4:	0800d090 	.word	0x0800d090
 8003ef8:	0800d0c0 	.word	0x0800d0c0
 8003efc:	0800d0f0 	.word	0x0800d0f0

08003f00 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8003f00:	b5b0      	push	{r4, r5, r7, lr}
 8003f02:	b0a6      	sub	sp, #152	; 0x98
 8003f04:	af0a      	add	r7, sp, #40	; 0x28
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
    int state = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8003f18:	2300      	movs	r3, #0
 8003f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f1c:	e06d      	b.n	8003ffa <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8003f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fd fa37 	bl	800139c <lfs_tag_type3>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	f240 4301 	movw	r3, #1025	; 0x401
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d106      	bne.n	8003f48 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	8a9b      	ldrh	r3, [r3, #20]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	829a      	strh	r2, [r3, #20]
 8003f46:	e055      	b.n	8003ff4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8003f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd fa22 	bl	800139c <lfs_tag_type3>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d114      	bne.n	8003f8e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	8a9b      	ldrh	r3, [r3, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <lfs_dir_relocatingcommit+0x7a>
 8003f6c:	4ba4      	ldr	r3, [pc, #656]	; (8004200 <lfs_dir_relocatingcommit+0x300>)
 8003f6e:	4aa5      	ldr	r2, [pc, #660]	; (8004204 <lfs_dir_relocatingcommit+0x304>)
 8003f70:	f640 01a5 	movw	r1, #2213	; 0x8a5
 8003f74:	48a4      	ldr	r0, [pc, #656]	; (8004208 <lfs_dir_relocatingcommit+0x308>)
 8003f76:	f007 fd65 	bl	800ba44 <__assert_func>
            dir->count -= 1;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	8a9b      	ldrh	r3, [r3, #20]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003f8c:	e032      	b.n	8003ff4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8003f8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	4413      	add	r3, r2
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd f9e1 	bl	8001360 <lfs_tag_type1>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fa4:	d126      	bne.n	8003ff4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8003fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8003fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8003fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd f9f2 	bl	80013ba <lfs_tag_chunk>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3318      	adds	r3, #24
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd f963 	bl	80012ba <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8003ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8003ffa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004000:	429a      	cmp	r2, r3
 8004002:	db8c      	blt.n	8003f1e <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8004004:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02b      	beq.n	8004064 <lfs_dir_relocatingcommit+0x164>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	8a9b      	ldrh	r3, [r3, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d127      	bne.n	8004064 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8004014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <lfs_dir_relocatingcommit+0x12a>
 800401c:	4b7b      	ldr	r3, [pc, #492]	; (800420c <lfs_dir_relocatingcommit+0x30c>)
 800401e:	4a79      	ldr	r2, [pc, #484]	; (8004204 <lfs_dir_relocatingcommit+0x304>)
 8004020:	f640 01b2 	movw	r1, #2226	; 0x8b2
 8004024:	4878      	ldr	r0, [pc, #480]	; (8004208 <lfs_dir_relocatingcommit+0x308>)
 8004026:	f007 fd0d 	bl	800ba44 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004030:	4619      	mov	r1, r3
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f002 ffce 	bl	8006fd4 <lfs_fs_pred>
 8004038:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 800403a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <lfs_dir_relocatingcommit+0x14c>
 8004040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004042:	f113 0f02 	cmn.w	r3, #2
 8004046:	d001      	beq.n	800404c <lfs_dir_relocatingcommit+0x14c>
            return err;
 8004048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800404a:	e204      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800404c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800404e:	f113 0f02 	cmn.w	r3, #2
 8004052:	d007      	beq.n	8004064 <lfs_dir_relocatingcommit+0x164>
 8004054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004058:	7ddb      	ldrb	r3, [r3, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800405e:	2302      	movs	r3, #2
 8004060:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8004062:	e121      	b.n	80042a8 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	7d9b      	ldrb	r3, [r3, #22]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80fb 	beq.w	8004264 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800407e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800408a:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8004092:	2b00      	cmp	r3, #0
 8004094:	d004      	beq.n	80040a0 <lfs_dir_relocatingcommit+0x1a0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	3b08      	subs	r3, #8
 800409e:	e003      	b.n	80040a8 <lfs_dir_relocatingcommit+0x1a8>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3318      	adds	r3, #24
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd f91d 	bl	80012ee <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 80040c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ca:	9308      	str	r3, [sp, #32]
 80040cc:	4b50      	ldr	r3, [pc, #320]	; (8004210 <lfs_dir_relocatingcommit+0x310>)
 80040ce:	9307      	str	r3, [sp, #28]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9306      	str	r3, [sp, #24]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	2300      	movs	r3, #0
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	2300      	movs	r3, #0
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9302      	str	r3, [sp, #8]
 80040e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	460b      	mov	r3, r1
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7fd ff2c 	bl	8001f50 <lfs_dir_traverse>
 80040f8:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3318      	adds	r3, #24
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd f8db 	bl	80012ba <lfs_pair_fromle32>
        if (err) {
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800410a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410c:	f113 0f1c 	cmn.w	r3, #28
 8004110:	f000 80aa 	beq.w	8004268 <lfs_dir_relocatingcommit+0x368>
 8004114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004116:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800411a:	f000 80a5 	beq.w	8004268 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800411e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004120:	e199      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8004122:	f107 031c 	add.w	r3, r7, #28
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	605a      	str	r2, [r3, #4]
 800412c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004134:	f107 031c 	add.w	r3, r7, #28
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd f985 	bl	800144a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004146:	f107 031c 	add.w	r3, r7, #28
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd f97c 	bl	800144a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004158:	f107 031c 	add.w	r3, r7, #28
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd f973 	bl	800144a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	4618      	mov	r0, r3
 8004176:	f7fd f98c 	bl	8001492 <lfs_gstate_iszero>
 800417a:	4603      	mov	r3, r0
 800417c:	f083 0301 	eor.w	r3, r3, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d027      	beq.n	80041d6 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8004186:	f107 031c 	add.w	r3, r7, #28
 800418a:	461a      	mov	r2, r3
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7fe feae 	bl	8002ef0 <lfs_dir_getgstate>
 8004194:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8004196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	e15a      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 80041a0:	f107 031c 	add.w	r3, r7, #28
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fa19 	bl	80015dc <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80041aa:	f107 031c 	add.w	r3, r7, #28
 80041ae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80041b2:	4a18      	ldr	r2, [pc, #96]	; (8004214 <lfs_dir_relocatingcommit+0x314>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff f847 	bl	8003248 <lfs_dir_commitattr>
 80041ba:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80041bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	f113 0f1c 	cmn.w	r3, #28
 80041c8:	d050      	beq.n	800426c <lfs_dir_relocatingcommit+0x36c>
 80041ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80041d0:	d04c      	beq.n	800426c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 80041d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d4:	e13f      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80041d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041da:	4619      	mov	r1, r3
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f7ff f8b3 	bl	8003348 <lfs_dir_commitcrc>
 80041e2:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80041e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	f113 0f1c 	cmn.w	r3, #28
 80041f0:	d03e      	beq.n	8004270 <lfs_dir_relocatingcommit+0x370>
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80041f8:	d03a      	beq.n	8004270 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fc:	e12b      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
 80041fe:	bf00      	nop
 8004200:	0800d11c 	.word	0x0800d11c
 8004204:	0800e2a4 	.word	0x0800e2a4
 8004208:	0800ce9c 	.word	0x0800ce9c
 800420c:	0800d12c 	.word	0x0800d12c
 8004210:	08003869 	.word	0x08003869
 8004214:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800421e:	6992      	ldr	r2, [r2, #24]
 8004220:	fbb3 f1f2 	udiv	r1, r3, r2
 8004224:	fb01 f202 	mul.w	r2, r1, r2
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <lfs_dir_relocatingcommit+0x33c>
 800422e:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <lfs_dir_relocatingcommit+0x560>)
 8004230:	4a8c      	ldr	r2, [pc, #560]	; (8004464 <lfs_dir_relocatingcommit+0x564>)
 8004232:	f640 01fc 	movw	r1, #2300	; 0x8fc
 8004236:	488c      	ldr	r0, [pc, #560]	; (8004468 <lfs_dir_relocatingcommit+0x568>)
 8004238:	f007 fc04 	bl	800ba44 <__assert_func>
        dir->off = commit.off;
 800423c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8004242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	333c      	adds	r3, #60	; 0x3c
 800424e:	3230      	adds	r2, #48	; 0x30
 8004250:	ca07      	ldmia	r2, {r0, r1, r2}
 8004252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3348      	adds	r3, #72	; 0x48
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	609a      	str	r2, [r3, #8]
 8004262:	e021      	b.n	80042a8 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8004264:	bf00      	nop
 8004266:	e004      	b.n	8004272 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8004270:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3310      	adds	r3, #16
 8004276:	4619      	mov	r1, r3
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7fc fc06 	bl	8000a8a <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	8a9b      	ldrh	r3, [r3, #20]
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	2300      	movs	r3, #0
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fd19 	bl	8003ccc <lfs_dir_splittingcompact>
 800429a:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da01      	bge.n	80042a6 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	e0d7      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 80042a6:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	663b      	str	r3, [r7, #96]	; 0x60
 80042bc:	e0c6      	b.n	800444c <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c0:	3308      	adds	r3, #8
 80042c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fc ffa1 	bl	8001210 <lfs_pair_cmp>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 80b8 	bne.w	8004446 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 80042d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	f103 0408 	add.w	r4, r3, #8
 80042de:	4615      	mov	r5, r2
 80042e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80042ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ee:	3308      	adds	r3, #8
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	f000 809d 	beq.w	8004432 <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80042f8:	2300      	movs	r3, #0
 80042fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042fc:	e07b      	b.n	80043f6 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80042fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	4413      	add	r3, r2
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fd f847 	bl	800139c <lfs_tag_type3>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8004316:	429a      	cmp	r2, r3
 8004318:	d115      	bne.n	8004346 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	889c      	ldrh	r4, [r3, #4]
 800431e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	4413      	add	r3, r2
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd f85f 	bl	80013ec <lfs_tag_id>
 800432e:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004330:	429c      	cmp	r4, r3
 8004332:	d108      	bne.n	8004346 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8004334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800433a:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800433c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800433e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	e054      	b.n	80043f0 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	4413      	add	r3, r2
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd f823 	bl	800139c <lfs_tag_type3>
 8004356:	4603      	mov	r3, r0
 8004358:	461a      	mov	r2, r3
 800435a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800435e:	429a      	cmp	r2, r3
 8004360:	d11c      	bne.n	800439c <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8004362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004364:	889c      	ldrh	r4, [r3, #4]
 8004366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4413      	add	r3, r2
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7fd f83b 	bl	80013ec <lfs_tag_id>
 8004376:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8004378:	429c      	cmp	r4, r3
 800437a:	d90f      	bls.n	800439c <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 800437c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800437e:	889b      	ldrh	r3, [r3, #4]
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004386:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8004388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800438a:	799b      	ldrb	r3, [r3, #6]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d12f      	bne.n	80043f0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8004390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	1e5a      	subs	r2, r3, #1
 8004396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004398:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800439a:	e029      	b.n	80043f0 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4413      	add	r3, r2
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc fff8 	bl	800139c <lfs_tag_type3>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	f240 4301 	movw	r3, #1025	; 0x401
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d11b      	bne.n	80043f0 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 80043b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ba:	889c      	ldrh	r4, [r3, #4]
 80043bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	4413      	add	r3, r2
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fd f810 	bl	80013ec <lfs_tag_id>
 80043cc:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80043ce:	429c      	cmp	r4, r3
 80043d0:	d30e      	bcc.n	80043f0 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80043d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d4:	889b      	ldrh	r3, [r3, #4]
 80043d6:	3301      	adds	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043dc:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80043de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e0:	799b      	ldrb	r3, [r3, #6]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d104      	bne.n	80043f0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80043e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80043f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f2:	3301      	adds	r3, #1
 80043f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f6ff af7e 	blt.w	80042fe <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8004402:	e016      	b.n	8004432 <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8004404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004406:	889a      	ldrh	r2, [r3, #4]
 8004408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440a:	8b9b      	ldrh	r3, [r3, #28]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	b29a      	uxth	r2, r3
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8004414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004416:	f103 0108 	add.w	r1, r3, #8
 800441a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800441c:	3320      	adds	r3, #32
 800441e:	461a      	mov	r2, r3
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7fe fd49 	bl	8002eb8 <lfs_dir_fetch>
 8004426:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8004428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <lfs_dir_relocatingcommit+0x532>
                    return err;
 800442e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004430:	e011      	b.n	8004456 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8004432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004434:	889a      	ldrh	r2, [r3, #4]
 8004436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004438:	8b9b      	ldrh	r3, [r3, #28]
 800443a:	429a      	cmp	r2, r3
 800443c:	d303      	bcc.n	8004446 <lfs_dir_relocatingcommit+0x546>
 800443e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004440:	7fdb      	ldrb	r3, [r3, #31]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1de      	bne.n	8004404 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8004446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	663b      	str	r3, [r7, #96]	; 0x60
 800444c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800444e:	2b00      	cmp	r3, #0
 8004450:	f47f af35 	bne.w	80042be <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004456:	4618      	mov	r0, r3
 8004458:	3770      	adds	r7, #112	; 0x70
 800445a:	46bd      	mov	sp, r7
 800445c:	bdb0      	pop	{r4, r5, r7, pc}
 800445e:	bf00      	nop
 8004460:	0800d00c 	.word	0x0800d00c
 8004464:	0800e2a4 	.word	0x0800e2a4
 8004468:	0800ce9c 	.word	0x0800ce9c

0800446c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800446c:	b5b0      	push	{r4, r5, r7, lr}
 800446e:	b0bc      	sub	sp, #240	; 0xf0
 8004470:	af04      	add	r7, sp, #16
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004482:	e045      	b.n	8004510 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8004484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004488:	3308      	adds	r3, #8
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	429a      	cmp	r2, r3
 800448e:	d03a      	beq.n	8004506 <lfs_dir_orphaningcommit+0x9a>
 8004490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004494:	3308      	adds	r3, #8
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc feb8 	bl	8001210 <lfs_pair_cmp>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d12f      	bne.n	8004506 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044aa:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d12a      	bne.n	8004506 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d023      	beq.n	8004506 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80044be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d91b      	bls.n	8004506 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80044ce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 f932 	bl	800573c <lfs_file_outline>
 80044d8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80044dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <lfs_dir_orphaningcommit+0x7e>
                return err;
 80044e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e8:	e2ad      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80044ea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f001 f946 	bl	8005780 <lfs_file_flush>
 80044f4:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80044f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <lfs_dir_orphaningcommit+0x9a>
                return err;
 8004500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004504:	e29f      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8004506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1b5      	bne.n	8004484 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800452e:	461d      	mov	r5, r3
 8004530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004542:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff fcd6 	bl	8003f00 <lfs_dir_relocatingcommit>
 8004554:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8004558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800455c:	2b00      	cmp	r3, #0
 800455e:	da02      	bge.n	8004566 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8004560:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004564:	e26f      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f7fc fe4e 	bl	8001210 <lfs_pair_cmp>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	461d      	mov	r5, r3
 800457e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004586:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800458a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800458e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004592:	2b02      	cmp	r3, #2
 8004594:	d14a      	bne.n	800462c <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3348      	adds	r3, #72	; 0x48
 800459a:	461a      	mov	r2, r3
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7fe fca6 	bl	8002ef0 <lfs_dir_getgstate>
 80045a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 80045a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <lfs_dir_orphaningcommit+0x14a>
            return err;
 80045b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045b4:	e247      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 80045b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 80045bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3318      	adds	r3, #24
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc fe91 	bl	80012ee <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	7ddb      	ldrb	r3, [r3, #23]
 80045d0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80045d4:	051a      	lsls	r2, r3, #20
 80045d6:	4bc2      	ldr	r3, [pc, #776]	; (80048e0 <lfs_dir_orphaningcommit+0x474>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	667b      	str	r3, [r7, #100]	; 0x64
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	3318      	adds	r3, #24
 80045e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80045e6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80045ea:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80045ee:	2000      	movs	r0, #0
 80045f0:	9001      	str	r0, [sp, #4]
 80045f2:	2001      	movs	r0, #1
 80045f4:	9000      	str	r0, [sp, #0]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fc82 	bl	8003f00 <lfs_dir_relocatingcommit>
 80045fc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3318      	adds	r3, #24
 8004604:	4618      	mov	r0, r3
 8004606:	f7fc fe58 	bl	80012ba <lfs_pair_fromle32>
        if (state < 0) {
 800460a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800460e:	2b00      	cmp	r3, #0
 8004610:	da02      	bge.n	8004618 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8004612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004616:	e216      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8004618:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800461c:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004624:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 8004632:	e1fc      	b.n	8004a2e <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8004634:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800463c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004640:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004644:	4ca7      	ldr	r4, [pc, #668]	; (80048e4 <lfs_dir_orphaningcommit+0x478>)
 8004646:	9403      	str	r4, [sp, #12]
 8004648:	9102      	str	r1, [sp, #8]
 800464a:	9201      	str	r2, [sp, #4]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4603      	mov	r3, r0
 8004650:	f640 1286 	movw	r2, #2438	; 0x986
 8004654:	49a4      	ldr	r1, [pc, #656]	; (80048e8 <lfs_dir_orphaningcommit+0x47c>)
 8004656:	48a5      	ldr	r0, [pc, #660]	; (80048ec <lfs_dir_orphaningcommit+0x480>)
 8004658:	f007 fc8a 	bl	800bf70 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f103 0220 	add.w	r2, r3, #32
 8004668:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f7fc fdce 	bl	8001210 <lfs_pair_cmp>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 800467a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8004682:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004692:	e037      	b.n	8004704 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8004694:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004698:	f103 0208 	add.w	r2, r3, #8
 800469c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc fdb4 	bl	8001210 <lfs_pair_cmp>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 80046ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80046b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046b6:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80046b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046c0:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80046c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046c6:	799b      	ldrb	r3, [r3, #6]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d116      	bne.n	80046fa <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80046cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046d0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80046d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc fd98 	bl	8001210 <lfs_pair_cmp>
 80046e0:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80046e6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80046ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80046f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80046fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1c3      	bne.n	8004694 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800470c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004710:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004714:	4619      	mov	r1, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f002 fd0e 	bl	8007138 <lfs_fs_parent>
 800471c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8004720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004724:	2b00      	cmp	r3, #0
 8004726:	da07      	bge.n	8004738 <lfs_dir_orphaningcommit+0x2cc>
 8004728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800472c:	f113 0f02 	cmn.w	r3, #2
 8004730:	d002      	beq.n	8004738 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8004732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004736:	e186      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8004738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800473c:	f113 0f02 	cmn.w	r3, #2
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800474a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800474e:	f113 0f02 	cmn.w	r3, #2
 8004752:	f000 809e 	beq.w	8004892 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8004756:	2101      	movs	r1, #1
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f002 fd83 	bl	8007264 <lfs_fs_preporphans>
 800475e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 8004762:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <lfs_dir_orphaningcommit+0x304>
                return err;
 800476a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800476e:	e16a      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8004770:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004774:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3330      	adds	r3, #48	; 0x30
 800477c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f7fc feea 	bl	800155c <lfs_gstate_hasmovehere>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02d      	beq.n	80047ea <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc fe2a 	bl	80013ec <lfs_tag_id>
 8004798:	4603      	mov	r3, r0
 800479a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 800479e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a2:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 80047a6:	484f      	ldr	r0, [pc, #316]	; (80048e4 <lfs_dir_orphaningcommit+0x478>)
 80047a8:	9002      	str	r0, [sp, #8]
 80047aa:	9201      	str	r2, [sp, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	460b      	mov	r3, r1
 80047b0:	f640 12b3 	movw	r2, #2483	; 0x9b3
 80047b4:	494c      	ldr	r1, [pc, #304]	; (80048e8 <lfs_dir_orphaningcommit+0x47c>)
 80047b6:	484e      	ldr	r0, [pc, #312]	; (80048f0 <lfs_dir_orphaningcommit+0x484>)
 80047b8:	f007 fbda 	bl	800bf70 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80047bc:	2200      	movs	r2, #0
 80047be:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f002 fd9e 	bl	8007304 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80047c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fc fe0d 	bl	80013ec <lfs_tag_id>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80047da:	4293      	cmp	r3, r2
 80047dc:	d205      	bcs.n	80047ea <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80047de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80047e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	657b      	str	r3, [r7, #84]	; 0x54
 80047ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f0:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80047f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fc fd79 	bl	80012ee <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80047fc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8004800:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <lfs_dir_orphaningcommit+0x3ac>
 8004808:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800480c:	029b      	lsls	r3, r3, #10
 800480e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8004812:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004816:	e000      	b.n	800481a <lfs_dir_orphaningcommit+0x3ae>
 8004818:	2300      	movs	r3, #0
 800481a:	647b      	str	r3, [r7, #68]	; 0x44
 800481c:	2300      	movs	r3, #0
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004826:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
 800482c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004830:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004834:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004838:	2000      	movs	r0, #0
 800483a:	9001      	str	r0, [sp, #4]
 800483c:	2002      	movs	r0, #2
 800483e:	9000      	str	r0, [sp, #0]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff fb5d 	bl	8003f00 <lfs_dir_relocatingcommit>
 8004846:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800484a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fd33 	bl	80012ba <lfs_pair_fromle32>
            if (state < 0) {
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004858:	2b00      	cmp	r3, #0
 800485a:	da02      	bge.n	8004862 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 800485c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004860:	e0f1      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8004862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004866:	2b01      	cmp	r3, #1
 8004868:	d113      	bne.n	8004892 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 800486a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8004870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 8004876:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800487a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800487e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004882:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004890:	e0cd      	b.n	8004a2e <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8004892:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004896:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800489a:	4619      	mov	r1, r3
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f002 fb99 	bl	8006fd4 <lfs_fs_pred>
 80048a2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 80048a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <lfs_dir_orphaningcommit+0x452>
 80048ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048b2:	f113 0f02 	cmn.w	r3, #2
 80048b6:	d002      	beq.n	80048be <lfs_dir_orphaningcommit+0x452>
            return err;
 80048b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048bc:	e0c3      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80048be:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01a      	beq.n	80048fc <lfs_dir_orphaningcommit+0x490>
 80048c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ca:	f113 0f02 	cmn.w	r3, #2
 80048ce:	d115      	bne.n	80048fc <lfs_dir_orphaningcommit+0x490>
 80048d0:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <lfs_dir_orphaningcommit+0x488>)
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <lfs_dir_orphaningcommit+0x48c>)
 80048d4:	f640 11d6 	movw	r1, #2518	; 0x9d6
 80048d8:	4803      	ldr	r0, [pc, #12]	; (80048e8 <lfs_dir_orphaningcommit+0x47c>)
 80048da:	f007 f8b3 	bl	800ba44 <__assert_func>
 80048de:	bf00      	nop
 80048e0:	000ffc08 	.word	0x000ffc08
 80048e4:	0800cfb4 	.word	0x0800cfb4
 80048e8:	0800ce9c 	.word	0x0800ce9c
 80048ec:	0800d134 	.word	0x0800d134
 80048f0:	0800d170 	.word	0x0800d170
 80048f4:	0800d1b4 	.word	0x0800d1b4
 80048f8:	0800e2c0 	.word	0x0800e2c0

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80048fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004900:	f113 0f02 	cmn.w	r3, #2
 8004904:	f000 8093 	beq.w	8004a2e <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3330      	adds	r3, #48	; 0x30
 800490c:	4618      	mov	r0, r3
 800490e:	f7fc fddc 	bl	80014ca <lfs_gstate_hasorphans>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8004918:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800491c:	425b      	negs	r3, r3
 800491e:	b2db      	uxtb	r3, r3
 8004920:	b25b      	sxtb	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f002 fc9d 	bl	8007264 <lfs_fs_preporphans>
 800492a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800492e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 8004936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800493a:	e084      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800493c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004940:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3330      	adds	r3, #48	; 0x30
 8004948:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc fe04 	bl	800155c <lfs_gstate_hasmovehere>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01c      	beq.n	8004994 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4618      	mov	r0, r3
 8004960:	f7fc fd44 	bl	80013ec <lfs_tag_id>
 8004964:	4603      	mov	r3, r0
 8004966:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 800496a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800496c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800496e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8004972:	4837      	ldr	r0, [pc, #220]	; (8004a50 <lfs_dir_orphaningcommit+0x5e4>)
 8004974:	9002      	str	r0, [sp, #8]
 8004976:	9201      	str	r2, [sp, #4]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	460b      	mov	r3, r1
 800497c:	f640 12e7 	movw	r2, #2535	; 0x9e7
 8004980:	4934      	ldr	r1, [pc, #208]	; (8004a54 <lfs_dir_orphaningcommit+0x5e8>)
 8004982:	4835      	ldr	r0, [pc, #212]	; (8004a58 <lfs_dir_orphaningcommit+0x5ec>)
 8004984:	f007 faf4 	bl	800bf70 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8004988:	2200      	movs	r2, #0
 800498a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f002 fcb8 	bl	8007304 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800499a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800499c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 80049a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc fca2 	bl	80012ee <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80049aa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80049ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <lfs_dir_orphaningcommit+0x55a>
 80049b6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80049ba:	029b      	lsls	r3, r3, #10
 80049bc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80049c0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80049c4:	e000      	b.n	80049c8 <lfs_dir_orphaningcommit+0x55c>
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	2300      	movs	r3, #0
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80049d2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80049d6:	051a      	lsls	r2, r3, #20
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <lfs_dir_orphaningcommit+0x5f0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
 80049e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80049ec:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80049f0:	2000      	movs	r0, #0
 80049f2:	9001      	str	r0, [sp, #4]
 80049f4:	2002      	movs	r0, #2
 80049f6:	9000      	str	r0, [sp, #0]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fa81 	bl	8003f00 <lfs_dir_relocatingcommit>
 80049fe:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8004a02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc fc57 	bl	80012ba <lfs_pair_fromle32>
            if (state < 0) {
 8004a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da02      	bge.n	8004a1a <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8004a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a18:	e015      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8004a1a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8004a1e:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8004a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8004a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f43f adfe 	beq.w	8004634 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8004a38:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <lfs_dir_orphaningcommit+0x5d8>
 8004a40:	2303      	movs	r3, #3
 8004a42:	e000      	b.n	8004a46 <lfs_dir_orphaningcommit+0x5da>
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	37e0      	adds	r7, #224	; 0xe0
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	0800cfb4 	.word	0x0800cfb4
 8004a54:	0800ce9c 	.word	0x0800ce9c
 8004a58:	0800d170 	.word	0x0800d170
 8004a5c:	000ffc08 	.word	0x000ffc08

08004a60 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fcf9 	bl	800446c <lfs_dir_orphaningcommit>
 8004a7a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	da01      	bge.n	8004a86 <lfs_dir_commit+0x26>
        return orphans;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	e00d      	b.n	8004aa2 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d009      	beq.n	8004aa0 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f002 fd5a 	bl	8007548 <lfs_fs_deorphan>
 8004a94:	6138      	str	r0, [r7, #16]
        if (err) {
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <lfs_dir_commit+0x40>
            return err;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	e000      	b.n	8004aa2 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b0b8      	sub	sp, #224	; 0xe0
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f002 fef6 	bl	80078a8 <lfs_fs_forceconsistency>
 8004abc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8004ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <lfs_mkdir_+0x22>
        return err;
 8004ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004acc:	e128      	b.n	8004d20 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8004ad6:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8004ada:	463a      	mov	r2, r7
 8004adc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004ae0:	f103 0108 	add.w	r1, r3, #8
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fe fa7e 	bl	8002fe8 <lfs_dir_find>
 8004aec:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8004af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af4:	f113 0f02 	cmn.w	r3, #2
 8004af8:	d105      	bne.n	8004b06 <lfs_mkdir_+0x5a>
 8004afa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004afe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d109      	bne.n	8004b1a <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da02      	bge.n	8004b14 <lfs_mkdir_+0x68>
 8004b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b12:	e105      	b.n	8004d20 <lfs_mkdir_+0x274>
 8004b14:	f06f 0310 	mvn.w	r3, #16
 8004b18:	e102      	b.n	8004d20 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fb15 	bl	800014c <strlen>
 8004b22:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d902      	bls.n	8004b38 <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8004b32:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8004b36:	e0f3      	b.n	8004d20 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fc feb4 	bl	80018a6 <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8004b3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7fe fd6f 	bl	8003628 <lfs_dir_alloc>
 8004b4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8004b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <lfs_mkdir_+0xb0>
        return err;
 8004b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5a:	e0e1      	b.n	8004d20 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8004b5c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8004b60:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8004b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8004b70:	e012      	b.n	8004b98 <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8004b72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b76:	f103 0218 	add.w	r2, r3, #24
 8004b7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7fe f999 	bl	8002eb8 <lfs_dir_fetch>
 8004b86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8004b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <lfs_mkdir_+0xec>
            return err;
 8004b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b96:	e0c3      	b.n	8004d20 <lfs_mkdir_+0x274>
    while (pred.split) {
 8004b98:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e8      	bne.n	8004b72 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8004ba0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fc fba1 	bl	80012ee <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8004bac:	4b5e      	ldr	r3, [pc, #376]	; (8004d28 <lfs_mkdir_+0x27c>)
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
 8004bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004bb4:	3318      	adds	r3, #24
 8004bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004bbc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff ff4c 	bl	8004a60 <lfs_dir_commit>
 8004bc8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8004bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004bd0:	3318      	adds	r3, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc fb71 	bl	80012ba <lfs_pair_fromle32>
    if (err) {
 8004bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <lfs_mkdir_+0x13a>
        return err;
 8004be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be4:	e09c      	b.n	8004d20 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 8004be6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d04c      	beq.n	8004c88 <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8004bee:	2101      	movs	r1, #1
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f002 fb37 	bl	8007264 <lfs_fs_preporphans>
 8004bf6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8004bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <lfs_mkdir_+0x15c>
            return err;
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c06:	e08b      	b.n	8004d20 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8004c1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fc fb64 	bl	80012ee <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8004c26:	4b40      	ldr	r3, [pc, #256]	; (8004d28 <lfs_mkdir_+0x27c>)
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	f107 0214 	add.w	r2, r7, #20
 8004c34:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8004c38:	2301      	movs	r3, #1
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff ff10 	bl	8004a60 <lfs_dir_commit>
 8004c40:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8004c44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fc fb36 	bl	80012ba <lfs_pair_fromle32>
        if (err) {
 8004c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 8004c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8004c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c62:	e05d      	b.n	8004d20 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 8004c64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8004c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f002 faf7 	bl	8007264 <lfs_fs_preporphans>
 8004c76:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8004c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <lfs_mkdir_+0x1dc>
            return err;
 8004c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c86:	e04b      	b.n	8004d20 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8004c88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fc fb2e 	bl	80012ee <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8004c92:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004c96:	029b      	lsls	r3, r3, #10
 8004c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004caa:	029a      	lsls	r2, r3, #10
 8004cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cbc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8004cc0:	029b      	lsls	r3, r3, #10
 8004cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	f043 0308 	orr.w	r3, r3, #8
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ccc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8004cd6:	f083 0301 	eor.w	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <lfs_mkdir_+0x238>
 8004ce0:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <lfs_mkdir_+0x27c>)
 8004ce2:	e000      	b.n	8004ce6 <lfs_mkdir_+0x23a>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004cec:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004cf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004cf6:	f103 0108 	add.w	r1, r3, #8
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff feaf 	bl	8004a60 <lfs_dir_commit>
 8004d02:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8004d06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fc fad5 	bl	80012ba <lfs_pair_fromle32>
    if (err) {
 8004d10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <lfs_mkdir_+0x272>
        return err;
 8004d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d1c:	e000      	b.n	8004d20 <lfs_mkdir_+0x274>
    }

    return 0;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	37e0      	adds	r7, #224	; 0xe0
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bdb0      	pop	{r4, r5, r7, pc}
 8004d28:	600ffc08 	.word	0x600ffc08

08004d2c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	3b08      	subs	r3, #8
 8004d44:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <lfs_ctz_index+0x2e>
        return 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e01c      	b.n	8004d94 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fb fe36 	bl	80009d0 <lfs_popc>
 8004d64:	4603      	mov	r3, r0
 8004d66:	3302      	adds	r3, #2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	1ad2      	subs	r2, r2, r3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	1ad4      	subs	r4, r2, r3
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7fb fe24 	bl	80009d0 <lfs_popc>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	1ae2      	subs	r2, r4, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	601a      	str	r2, [r3, #0]
    return i;
 8004d92:	68fb      	ldr	r3, [r7, #12]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd90      	pop	{r4, r7, pc}

08004d9c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b08f      	sub	sp, #60	; 0x3c
 8004da0:	af04      	add	r7, sp, #16
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8004db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db6:	601a      	str	r2, [r3, #0]
        *off = 0;
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
        return 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e053      	b.n	8004e6a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	4619      	mov	r1, r3
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ffac 	bl	8004d2c <lfs_ctz_index>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8004dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ddc:	4619      	mov	r1, r3
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff ffa4 	bl	8004d2c <lfs_ctz_index>
 8004de4:	4603      	mov	r3, r0
 8004de6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8004de8:	e034      	b.n	8004e54 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fb fdcf 	bl	8000996 <lfs_npw2>
 8004df8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8004dfa:	1e5c      	subs	r4, r3, #1
 8004dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dfe:	f7fb fdd9 	bl	80009b4 <lfs_ctz>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4619      	mov	r1, r3
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7fb fd90 	bl	800092c <lfs_min>
 8004e0c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	0092      	lsls	r2, r2, #2
 8004e14:	2104      	movs	r1, #4
 8004e16:	9103      	str	r1, [sp, #12]
 8004e18:	4639      	mov	r1, r7
 8004e1a:	9102      	str	r1, [sp, #8]
 8004e1c:	9201      	str	r2, [sp, #4]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2304      	movs	r3, #4
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7fb fe54 	bl	8000ad4 <lfs_bd_read>
 8004e2c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fb fde6 	bl	8000a02 <lfs_fromle32>
 8004e36:	4603      	mov	r3, r0
 8004e38:	603b      	str	r3, [r7, #0]
        if (err) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <lfs_ctz_find+0xa8>
            return err;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	e012      	b.n	8004e6a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8004e44:	2201      	movs	r2, #1
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8004e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d8c6      	bhi.n	8004dea <lfs_ctz_find+0x4e>
    }

    *block = head;
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e60:	601a      	str	r2, [r3, #0]
    *off = pos;
 8004e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e66:	601a      	str	r2, [r3, #0]
    return 0;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	372c      	adds	r7, #44	; 0x2c
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
	...

08004e74 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b092      	sub	sp, #72	; 0x48
 8004e78:	af04      	add	r7, sp, #16
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8004e82:	f107 0320 	add.w	r3, r7, #32
 8004e86:	4619      	mov	r1, r3
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7fc fda1 	bl	80019d0 <lfs_alloc>
 8004e8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <lfs_ctz_extend+0x26>
            return err;
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	e0e9      	b.n	800506e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7fc f956 	bl	8001150 <lfs_bd_erase>
 8004ea4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d006      	beq.n	8004eba <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004eb2:	f000 80cb 	beq.w	800504c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	e0d9      	b.n	800506e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8004eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec4:	601a      	str	r2, [r3, #0]
                *off = 0;
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
                return 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e0ce      	b.n	800506e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8004ed6:	f107 031c 	add.w	r3, r7, #28
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff25 	bl	8004d2c <lfs_ctz_index>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d044      	beq.n	8004f82 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004ef8:	2300      	movs	r3, #0
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
 8004efc:	e035      	b.n	8004f6a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	2301      	movs	r3, #1
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	f107 0317 	add.w	r3, r7, #23
 8004f0c:	9302      	str	r3, [sp, #8]
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7fb fdd9 	bl	8000ad4 <lfs_bd_read>
 8004f22:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <lfs_ctz_extend+0xba>
                        return err;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	e09f      	b.n	800506e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	2201      	movs	r2, #1
 8004f32:	9203      	str	r2, [sp, #12]
 8004f34:	f107 0217 	add.w	r2, r7, #23
 8004f38:	9202      	str	r2, [sp, #8]
 8004f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f3c:	9201      	str	r2, [sp, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2301      	movs	r3, #1
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7fc f856 	bl	8000ff8 <lfs_bd_prog>
 8004f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004f5a:	d101      	bne.n	8004f60 <lfs_ctz_extend+0xec>
                            goto relocate;
 8004f5c:	bf00      	nop
                    goto relocate;
 8004f5e:	e075      	b.n	800504c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8004f62:	e084      	b.n	800506e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	3301      	adds	r3, #1
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d3c5      	bcc.n	8004efe <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8004f72:	6a3a      	ldr	r2, [r7, #32]
 8004f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f76:	601a      	str	r2, [r3, #0]
                *off = noff;
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7c:	601a      	str	r2, [r3, #0]
                return 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e075      	b.n	800506e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8004f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f84:	3301      	adds	r3, #1
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8004f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8a:	f7fb fd13 	bl	80009b4 <lfs_ctz>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	3301      	adds	r3, #1
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8004f98:	2300      	movs	r3, #0
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	e049      	b.n	8005032 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb fd38 	bl	8000a16 <lfs_tole32>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	2104      	movs	r1, #4
 8004fb2:	9103      	str	r1, [sp, #12]
 8004fb4:	f107 0118 	add.w	r1, r7, #24
 8004fb8:	9102      	str	r1, [sp, #8]
 8004fba:	9201      	str	r2, [sp, #4]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7fc f817 	bl	8000ff8 <lfs_bd_prog>
 8004fca:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fb fd17 	bl	8000a02 <lfs_fromle32>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	61bb      	str	r3, [r7, #24]
                if (err) {
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8004fe4:	d034      	beq.n	8005050 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	e041      	b.n	800506e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	3b01      	subs	r3, #1
 8004fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d01b      	beq.n	800502c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff8:	0092      	lsls	r2, r2, #2
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	9103      	str	r1, [sp, #12]
 8004ffe:	f107 0118 	add.w	r1, r7, #24
 8005002:	9102      	str	r1, [sp, #8]
 8005004:	9201      	str	r2, [sp, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	2304      	movs	r3, #4
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	2100      	movs	r1, #0
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7fb fd60 	bl	8000ad4 <lfs_bd_read>
 8005014:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb fcf2 	bl	8000a02 <lfs_fromle32>
 800501e:	4603      	mov	r3, r0
 8005020:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <lfs_ctz_extend+0x1b8>
                        return err;
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	e020      	b.n	800506e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	3301      	adds	r3, #1
 8005030:	633b      	str	r3, [r7, #48]	; 0x30
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	429a      	cmp	r2, r3
 8005038:	d3b1      	bcc.n	8004f9e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	009a      	lsls	r2, r3, #2
 8005044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005046:	601a      	str	r2, [r3, #0]
            return 0;
 8005048:	2300      	movs	r3, #0
 800504a:	e010      	b.n	800506e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800504c:	bf00      	nop
 800504e:	e000      	b.n	8005052 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8005050:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	4a08      	ldr	r2, [pc, #32]	; (8005078 <lfs_ctz_extend+0x204>)
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	f44f 623a 	mov.w	r2, #2976	; 0xba0
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <lfs_ctz_extend+0x208>)
 800505e:	4808      	ldr	r0, [pc, #32]	; (8005080 <lfs_ctz_extend+0x20c>)
 8005060:	f006 ff86 	bl	800bf70 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7fb fd0f 	bl	8000a8a <lfs_cache_drop>
    while (true) {
 800506c:	e709      	b.n	8004e82 <lfs_ctz_extend+0xe>
    }
}
 800506e:	4618      	mov	r0, r3
 8005070:	3738      	adds	r7, #56	; 0x38
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	0800cfb4 	.word	0x0800cfb4
 800507c:	0800ce9c 	.word	0x0800ce9c
 8005080:	0800d034 	.word	0x0800d034

08005084 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b090      	sub	sp, #64	; 0x40
 8005088:	af04      	add	r7, sp, #16
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <lfs_ctz_traverse+0x18>
        return 0;
 8005098:	2300      	movs	r3, #0
 800509a:	e06b      	b.n	8005174 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	3b01      	subs	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	f107 031c 	add.w	r3, r7, #28
 80050a6:	4619      	mov	r1, r3
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff fe3f 	bl	8004d2c <lfs_ctz_index>
 80050ae:	4603      	mov	r3, r0
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80050b8:	4798      	blx	r3
 80050ba:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <lfs_ctz_traverse+0x42>
            return err;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	e056      	b.n	8005174 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <lfs_ctz_traverse+0x4c>
            return 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e051      	b.n	8005174 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	f1c3 0302 	rsb	r3, r3, #2
 80050da:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80050dc:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80050de:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80050e0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80050e2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80050e4:	9303      	str	r3, [sp, #12]
 80050e6:	f107 0314 	add.w	r3, r7, #20
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	2300      	movs	r3, #0
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fb fcea 	bl	8000ad4 <lfs_bd_read>
 8005100:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	4618      	mov	r0, r3
 8005106:	f7fb fc7c 	bl	8000a02 <lfs_fromle32>
 800510a:	4603      	mov	r3, r0
 800510c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb fc76 	bl	8000a02 <lfs_fromle32>
 8005116:	4603      	mov	r3, r0
 8005118:	61bb      	str	r3, [r7, #24]
        if (err) {
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <lfs_ctz_traverse+0xa0>
            return err;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	e027      	b.n	8005174 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8005124:	2300      	movs	r3, #0
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
 8005128:	e012      	b.n	8005150 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	3330      	adds	r3, #48	; 0x30
 8005130:	443b      	add	r3, r7
 8005132:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8005136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005138:	4611      	mov	r1, r2
 800513a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800513c:	4798      	blx	r3
 800513e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <lfs_ctz_traverse+0xc6>
                return err;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	e014      	b.n	8005174 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	3301      	adds	r3, #1
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	3b01      	subs	r3, #1
 8005154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005156:	429a      	cmp	r2, r3
 8005158:	dbe7      	blt.n	800512a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	3b01      	subs	r3, #1
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	3330      	adds	r3, #48	; 0x30
 8005162:	443b      	add	r3, r7
 8005164:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005168:	603b      	str	r3, [r7, #0]
        index -= count;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8005172:	e79e      	b.n	80050b2 <lfs_ctz_traverse+0x2e>
    }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3730      	adds	r7, #48	; 0x30
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800517c:	b5b0      	push	{r4, r5, r7, lr}
 800517e:	b09a      	sub	sp, #104	; 0x68
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f002 fb87 	bl	80078a8 <lfs_fs_forceconsistency>
 800519a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 800519c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <lfs_file_opencfg_+0x2a>
            return err;
 80051a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a4:	e1b0      	b.n	8005508 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80051aa:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2200      	movs	r2, #0
 80051c2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f103 0108 	add.w	r1, r3, #8
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3304      	adds	r3, #4
 80051ce:	1d3a      	adds	r2, r7, #4
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7fd ff09 	bl	8002fe8 <lfs_dir_find>
 80051d6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80051d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da0c      	bge.n	80051f8 <lfs_file_opencfg_+0x7c>
 80051de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e0:	f113 0f02 	cmn.w	r3, #2
 80051e4:	d105      	bne.n	80051f2 <lfs_file_opencfg_+0x76>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	889b      	ldrh	r3, [r3, #4]
 80051ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d102      	bne.n	80051f8 <lfs_file_opencfg_+0x7c>
        err = tag;
 80051f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051f4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80051f6:	e17c      	b.n	80054f2 <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2201      	movs	r2, #1
 80051fc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7fc fb18 	bl	8001836 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8005206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005208:	f113 0f02 	cmn.w	r3, #2
 800520c:	d14e      	bne.n	80052ac <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8005218:	f06f 0301 	mvn.w	r3, #1
 800521c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800521e:	e168      	b.n	80054f2 <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fa ff92 	bl	800014c <strlen>
 8005228:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005230:	429a      	cmp	r2, r3
 8005232:	d903      	bls.n	800523c <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8005234:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8005238:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800523a:	e15a      	b.n	80054f2 <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f103 0108 	add.w	r1, r3, #8
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	889b      	ldrh	r3, [r3, #4]
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005252:	2300      	movs	r3, #0
 8005254:	633b      	str	r3, [r7, #48]	; 0x30
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	889b      	ldrh	r3, [r3, #4]
 800525a:	029a      	lsls	r2, r3, #10
 800525c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525e:	4313      	orrs	r3, r2
 8005260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	63bb      	str	r3, [r7, #56]	; 0x38
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	889b      	ldrh	r3, [r3, #4]
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800527a:	2300      	movs	r3, #0
 800527c:	643b      	str	r3, [r7, #64]	; 0x40
 800527e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005282:	2303      	movs	r3, #3
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fbeb 	bl	8004a60 <lfs_dir_commit>
 800528a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800528c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800528e:	f113 0f1c 	cmn.w	r3, #28
 8005292:	d001      	beq.n	8005298 <lfs_file_opencfg_+0x11c>
 8005294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005296:	e001      	b.n	800529c <lfs_file_opencfg_+0x120>
 8005298:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800529c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 800529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8125 	bne.w	80054f0 <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 80052a6:	4b9a      	ldr	r3, [pc, #616]	; (8005510 <lfs_file_opencfg_+0x394>)
 80052a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80052aa:	e044      	b.n	8005336 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 80052b6:	f06f 0310 	mvn.w	r3, #16
 80052ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80052bc:	e119      	b.n	80054f2 <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80052be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fc f86b 	bl	800139c <lfs_tag_type3>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d003      	beq.n	80052d4 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 80052cc:	f06f 0314 	mvn.w	r3, #20
 80052d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80052d2:	e10e      	b.n	80054f2 <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00e      	beq.n	80052fc <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	889b      	ldrh	r3, [r3, #4]
 80052e2:	029b      	lsls	r3, r3, #10
 80052e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ec:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
 80052fa:	e01c      	b.n	8005336 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	889b      	ldrh	r3, [r3, #4]
 8005306:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800530c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8005314:	9200      	str	r2, [sp, #0]
 8005316:	4a7f      	ldr	r2, [pc, #508]	; (8005514 <lfs_file_opencfg_+0x398>)
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7fc fcc7 	bl	8001cac <lfs_dir_get>
 800531e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8005320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005322:	2b00      	cmp	r3, #0
 8005324:	da02      	bge.n	800532c <lfs_file_opencfg_+0x1b0>
            err = tag;
 8005326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005328:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800532a:	e0e2      	b.n	80054f2 <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3328      	adds	r3, #40	; 0x28
 8005330:	4618      	mov	r0, r3
 8005332:	f7fc f9a3 	bl	800167c <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8005336:	2300      	movs	r3, #0
 8005338:	657b      	str	r3, [r7, #84]	; 0x54
 800533a:	e063      	b.n	8005404 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d03c      	beq.n	80053c2 <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005356:	4613      	mov	r3, r2
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005366:	051a      	lsls	r2, r3, #20
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	889b      	ldrh	r3, [r3, #4]
 800536c:	029b      	lsls	r3, r3, #10
 800536e:	ea42 0103 	orr.w	r1, r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005376:	6858      	ldr	r0, [r3, #4]
 8005378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4403      	add	r3, r0
 8005384:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8005386:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	4603      	mov	r3, r0
 80053a2:	4a5d      	ldr	r2, [pc, #372]	; (8005518 <lfs_file_opencfg_+0x39c>)
 80053a4:	4621      	mov	r1, r4
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7fc fc80 	bl	8001cac <lfs_dir_get>
 80053ac:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 80053ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da06      	bge.n	80053c2 <lfs_file_opencfg_+0x246>
 80053b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b6:	f113 0f02 	cmn.w	r3, #2
 80053ba:	d002      	beq.n	80053c2 <lfs_file_opencfg_+0x246>
                err = res;
 80053bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053be:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80053c0:	e097      	b.n	80054f2 <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d903      	bls.n	80053f2 <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 80053ea:	f06f 031b 	mvn.w	r3, #27
 80053ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80053f0:	e07f      	b.n	80054f2 <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80053fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005400:	3301      	adds	r3, #1
 8005402:	657b      	str	r3, [r7, #84]	; 0x54
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800540c:	429a      	cmp	r2, r3
 800540e:	d395      	bcc.n	800533c <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	64da      	str	r2, [r3, #76]	; 0x4c
 8005424:	e010      	b.n	8005448 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	4618      	mov	r0, r3
 800542e:	f7fb fb15 	bl	8000a5c <lfs_malloc>
 8005432:	4602      	mov	r2, r0
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d103      	bne.n	8005448 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8005440:	f06f 030b 	mvn.w	r3, #11
 8005444:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8005446:	e054      	b.n	80054f2 <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	3340      	adds	r3, #64	; 0x40
 800544c:	4619      	mov	r1, r3
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7fb fb29 	bl	8000aa6 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8005454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005456:	4618      	mov	r0, r3
 8005458:	f7fb ffa0 	bl	800139c <lfs_tag_type3>
 800545c:	4603      	mov	r3, r0
 800545e:	461a      	mov	r2, r3
 8005460:	f240 2301 	movw	r3, #513	; 0x201
 8005464:	429a      	cmp	r2, r3
 8005466:	d141      	bne.n	80054ec <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f06f 0201 	mvn.w	r2, #1
 800546e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8005470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005472:	4618      	mov	r0, r3
 8005474:	f7fb ffc9 	bl	800140a <lfs_tag_size>
 8005478:	4602      	mov	r2, r0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d020      	beq.n	80054ec <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	889b      	ldrh	r3, [r3, #4]
 80054b4:	029c      	lsls	r4, r3, #10
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ba:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fb fa34 	bl	800092c <lfs_min>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80054c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4613      	mov	r3, r2
 80054d4:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <lfs_file_opencfg_+0x398>)
 80054d6:	4629      	mov	r1, r5
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7fc fbe7 	bl	8001cac <lfs_dir_get>
 80054de:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80054e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da02      	bge.n	80054ec <lfs_file_opencfg_+0x370>
                err = res;
 80054e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80054ea:	e002      	b.n	80054f2 <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e00b      	b.n	8005508 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 80054f0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_close_(lfs, file);
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f823 	bl	800554c <lfs_file_close_>
    return err;
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8005508:	4618      	mov	r0, r3
 800550a:	3760      	adds	r7, #96	; 0x60
 800550c:	46bd      	mov	sp, r7
 800550e:	bdb0      	pop	{r4, r5, r7, pc}
 8005510:	20100000 	.word	0x20100000
 8005514:	700ffc00 	.word	0x700ffc00
 8005518:	7ffffc00 	.word	0x7ffffc00

0800551c <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <lfs_file_open_+0x2c>)
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff fe21 	bl	800517c <lfs_file_opencfg_>
 800553a:	6178      	str	r0, [r7, #20]
    return err;
 800553c:	697b      	ldr	r3, [r7, #20]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	0800e2d8 	.word	0x0800e2d8

0800554c <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f9e5 	bl	8005928 <lfs_file_sync_>
 800555e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc f946 	bl	80017f4 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005576:	4618      	mov	r0, r3
 8005578:	f7fb fa7c 	bl	8000a74 <lfs_free>
    }

    return err;
 800557c:	68fb      	ldr	r3, [r7, #12]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b08d      	sub	sp, #52	; 0x34
 800558c:	af06      	add	r7, sp, #24
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8005592:	f107 030c 	add.w	r3, r7, #12
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fc fa19 	bl	80019d0 <lfs_alloc>
 800559e:	6138      	str	r0, [r7, #16]
        if (err) {
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <lfs_file_relocate+0x22>
            return err;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	e0bb      	b.n	8005722 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4619      	mov	r1, r3
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fdce 	bl	8001150 <lfs_bd_erase>
 80055b4:	6138      	str	r0, [r7, #16]
        if (err) {
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80055c2:	f000 809b 	beq.w	80056fc <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	e0ab      	b.n	8005722 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e069      	b.n	80056a4 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d027      	beq.n	800562c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f103 0008 	add.w	r0, r3, #8
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	889b      	ldrh	r3, [r3, #4]
 80055f4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80055f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fe:	2101      	movs	r1, #1
 8005600:	9105      	str	r1, [sp, #20]
 8005602:	f107 010b 	add.w	r1, r7, #11
 8005606:	9104      	str	r1, [sp, #16]
 8005608:	6979      	ldr	r1, [r7, #20]
 800560a:	9103      	str	r1, [sp, #12]
 800560c:	9302      	str	r3, [sp, #8]
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <lfs_file_relocate+0x1a4>)
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	9200      	str	r2, [sp, #0]
 8005614:	4623      	mov	r3, r4
 8005616:	2200      	movs	r2, #0
 8005618:	4601      	mov	r1, r0
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc fb61 	bl	8001ce2 <lfs_dir_getread>
 8005620:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01e      	beq.n	8005666 <lfs_file_relocate+0xde>
                    return err;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e07a      	b.n	8005722 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8005632:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad4      	subs	r4, r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	2201      	movs	r2, #1
 8005642:	9203      	str	r2, [sp, #12]
 8005644:	f107 020b 	add.w	r2, r7, #11
 8005648:	9202      	str	r2, [sp, #8]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	9201      	str	r2, [sp, #4]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	4623      	mov	r3, r4
 8005652:	4602      	mov	r2, r0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7fb fa3d 	bl	8000ad4 <lfs_bd_read>
 800565a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <lfs_file_relocate+0xde>
                    return err;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	e05d      	b.n	8005722 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f103 0110 	add.w	r1, r3, #16
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	9203      	str	r2, [sp, #12]
 8005674:	f107 020b 	add.w	r2, r7, #11
 8005678:	9202      	str	r2, [sp, #8]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	9201      	str	r2, [sp, #4]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	2301      	movs	r3, #1
 8005682:	4602      	mov	r2, r0
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fb fcb7 	bl	8000ff8 <lfs_bd_prog>
 800568a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005698:	d032      	beq.n	8005700 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	e041      	b.n	8005722 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	3301      	adds	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d390      	bcc.n	80055d0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69d9      	ldr	r1, [r3, #28]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	461a      	mov	r2, r3
 80056be:	f006 fe86 	bl	800c3ce <memcpy>
        file->cache.block = lfs->pcache.block;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3310      	adds	r3, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fb f9e0 	bl	8000aa6 <lfs_cache_zero>

        file->block = nblock;
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e012      	b.n	8005722 <lfs_file_relocate+0x19a>
                goto relocate;
 80056fc:	bf00      	nop
 80056fe:	e000      	b.n	8005702 <lfs_file_relocate+0x17a>
                    goto relocate;
 8005700:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <lfs_file_relocate+0x1a8>)
 8005706:	9200      	str	r2, [sp, #0]
 8005708:	f640 42d6 	movw	r2, #3286	; 0xcd6
 800570c:	4909      	ldr	r1, [pc, #36]	; (8005734 <lfs_file_relocate+0x1ac>)
 800570e:	480a      	ldr	r0, [pc, #40]	; (8005738 <lfs_file_relocate+0x1b0>)
 8005710:	f006 fc2e 	bl	800bf70 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3310      	adds	r3, #16
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7fb f9b5 	bl	8000a8a <lfs_cache_drop>
    while (true) {
 8005720:	e737      	b.n	8005592 <lfs_file_relocate+0xa>
    }
}
 8005722:	4618      	mov	r0, r3
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	bf00      	nop
 800572c:	fff7fc00 	.word	0xfff7fc00
 8005730:	0800cfb4 	.word	0x0800cfb4
 8005734:	0800ce9c 	.word	0x0800ce9c
 8005738:	0800d034 	.word	0x0800d034

0800573c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ckpoint(lfs);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc f8a9 	bl	80018a6 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff ff16 	bl	8005588 <lfs_file_relocate>
 800575c:	60f8      	str	r0, [r7, #12]
    if (err) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <lfs_file_outline+0x2c>
        return err;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	e006      	b.n	8005776 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b09f      	sub	sp, #124	; 0x7c
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	3340      	adds	r3, #64	; 0x40
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fb f96e 	bl	8000a8a <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 80a4 	beq.w	8005910 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d176      	bne.n	80058c8 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	2254      	movs	r2, #84	; 0x54
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f006 fd22 	bl	800c22c <memset>
                .ctz.head = file->ctz.head,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f4:	2301      	movs	r3, #1
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80057fc:	643b      	str	r3, [r7, #64]	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8005804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fb f93b 	bl	8000a8a <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8005814:	e02b      	b.n	800586e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8005816:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800581a:	f107 010c 	add.w	r1, r7, #12
 800581e:	2301      	movs	r3, #1
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f90d 	bl	8005a40 <lfs_file_flushedread>
 8005826:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582a:	2b00      	cmp	r3, #0
 800582c:	da01      	bge.n	8005832 <lfs_file_flush+0xb2>
                    return res;
 800582e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005830:	e06f      	b.n	8005912 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8005832:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8005836:	2301      	movs	r3, #1
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa08 	bl	8005c50 <lfs_file_flushedwrite>
 8005840:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8005842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005844:	2b00      	cmp	r3, #0
 8005846:	da01      	bge.n	800584c <lfs_file_flush+0xcc>
                    return res;
 8005848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800584a:	e062      	b.n	8005912 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005854:	d00b      	beq.n	800586e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8005856:	f107 030c 	add.w	r3, r7, #12
 800585a:	3340      	adds	r3, #64	; 0x40
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb f913 	bl	8000a8a <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fb f90e 	bl	8000a8a <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d3cd      	bcc.n	8005816 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	2301      	movs	r3, #1
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fb fb09 	bl	8000e9c <lfs_bd_flush>
 800588a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800588c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800588e:	2b00      	cmp	r3, #0
 8005890:	d026      	beq.n	80058e0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8005892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005894:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005898:	d001      	beq.n	800589e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800589a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800589c:	e039      	b.n	8005912 <lfs_file_flush+0x192>
                        goto relocate;
 800589e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <lfs_file_flush+0x19c>)
 80058a6:	9200      	str	r2, [sp, #0]
 80058a8:	f640 5225 	movw	r2, #3365	; 0xd25
 80058ac:	491c      	ldr	r1, [pc, #112]	; (8005920 <lfs_file_flush+0x1a0>)
 80058ae:	481d      	ldr	r0, [pc, #116]	; (8005924 <lfs_file_flush+0x1a4>)
 80058b0:	f006 fb5e 	bl	800bf70 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff fe66 	bl	8005588 <lfs_file_relocate>
 80058bc:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80058be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0da      	beq.n	800587a <lfs_file_flush+0xfa>
                    return err;
 80058c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058c6:	e024      	b.n	8005912 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f7fb f81b 	bl	800090e <lfs_max>
 80058d8:	4602      	mov	r2, r0
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34
 80058de:	e000      	b.n	80058e2 <lfs_file_flush+0x162>
                break;
 80058e0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005902:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800590e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3774      	adds	r7, #116	; 0x74
 8005916:	46bd      	mov	sp, r7
 8005918:	bd90      	pop	{r4, r7, pc}
 800591a:	bf00      	nop
 800591c:	0800cfb4 	.word	0x0800cfb4
 8005920:	0800ce9c 	.word	0x0800ce9c
 8005924:	0800d034 	.word	0x0800d034

08005928 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b090      	sub	sp, #64	; 0x40
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800593e:	2300      	movs	r3, #0
 8005940:	e07a      	b.n	8005a38 <lfs_file_sync_+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff1b 	bl	8005780 <lfs_file_flush>
 800594a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	e06a      	b.n	8005a38 <lfs_file_sync_+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <lfs_file_sync_+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	3308      	adds	r3, #8
 8005972:	4618      	mov	r0, r3
 8005974:	f7fb fc32 	bl	80011dc <lfs_pair_isnull>
 8005978:	4603      	mov	r3, r0
 800597a:	f083 0301 	eor.w	r3, r3, #1
 800597e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8005980:	2b00      	cmp	r3, #0
 8005982:	d058      	beq.n	8005a36 <lfs_file_sync_+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <lfs_file_sync_+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8005990:	f240 2301 	movw	r3, #513	; 0x201
 8005994:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
 80059a2:	e014      	b.n	80059ce <lfs_file_sync_+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 80059a4:	f240 2302 	movw	r3, #514	; 0x202
 80059a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059b0:	3228      	adds	r2, #40	; 0x28
 80059b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059b6:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 80059ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fb fe74 	bl	80016ac <lfs_ctz_tole32>
            buffer = &ctz;
 80059c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c8:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 80059ca:	2308      	movs	r3, #8
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f103 0108 	add.w	r1, r3, #8
 80059d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80059d6:	051a      	lsls	r2, r3, #20
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	889b      	ldrh	r3, [r3, #4]
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	431a      	orrs	r2, r3
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	889b      	ldrh	r3, [r3, #4]
 80059ee:	029a      	lsls	r2, r3, #10
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	f107 0218 	add.w	r2, r7, #24
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff f827 	bl	8004a60 <lfs_dir_commit>
 8005a12:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <lfs_file_sync_+0x102>
            file->flags |= LFS_F_ERRED;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	e006      	b.n	8005a38 <lfs_file_sync_+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3740      	adds	r7, #64	; 0x40
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b090      	sub	sp, #64	; 0x40
 8005a44:	af06      	add	r7, sp, #24
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d301      	bcc.n	8005a66 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e0b7      	b.n	8005bd6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	4619      	mov	r1, r3
 8005a72:	6838      	ldr	r0, [r7, #0]
 8005a74:	f7fa ff5a 	bl	800092c <lfs_min>
 8005a78:	6038      	str	r0, [r7, #0]
    nsize = size;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8005a7e:	e0a5      	b.n	8005bcc <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d006      	beq.n	8005a9a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a94:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d130      	bne.n	8005afc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d11c      	bne.n	8005ae0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	3138      	adds	r1, #56	; 0x38
 8005abc:	68b8      	ldr	r0, [r7, #8]
 8005abe:	303c      	adds	r0, #60	; 0x3c
 8005ac0:	9003      	str	r0, [sp, #12]
 8005ac2:	9102      	str	r1, [sp, #8]
 8005ac4:	9201      	str	r2, [sp, #4]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	462b      	mov	r3, r5
 8005aca:	4622      	mov	r2, r4
 8005acc:	2100      	movs	r1, #0
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff f964 	bl	8004d9c <lfs_ctz_find>
 8005ad4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <lfs_file_flushedread+0xb0>
                    return err;
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	e07a      	b.n	8005bd6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f06f 0201 	mvn.w	r2, #1
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6a38      	ldr	r0, [r7, #32]
 8005b0c:	f7fa ff0e 	bl	800092c <lfs_min>
 8005b10:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d026      	beq.n	8005b6c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f103 0408 	add.w	r4, r3, #8
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2e:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	889b      	ldrh	r3, [r3, #4]
 8005b34:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8005b36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8005b42:	69b8      	ldr	r0, [r7, #24]
 8005b44:	9005      	str	r0, [sp, #20]
 8005b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b48:	9004      	str	r0, [sp, #16]
 8005b4a:	9103      	str	r1, [sp, #12]
 8005b4c:	9302      	str	r3, [sp, #8]
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <lfs_file_flushedread+0x1a0>)
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	9200      	str	r2, [sp, #0]
 8005b54:	462b      	mov	r3, r5
 8005b56:	2200      	movs	r2, #0
 8005b58:	4621      	mov	r1, r4
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7fc f8c1 	bl	8001ce2 <lfs_dir_getread>
 8005b60:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01d      	beq.n	8005ba4 <lfs_file_flushedread+0x164>
                return err;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	e034      	b.n	8005bd6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b76:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b80:	69b9      	ldr	r1, [r7, #24]
 8005b82:	9103      	str	r1, [sp, #12]
 8005b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b86:	9102      	str	r1, [sp, #8]
 8005b88:	9201      	str	r2, [sp, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	4602      	mov	r2, r0
 8005b90:	2100      	movs	r1, #0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7fa ff9e 	bl	8000ad4 <lfs_bd_read>
 8005b98:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <lfs_file_flushedread+0x164>
                return err;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	e018      	b.n	8005bd6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	441a      	add	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f47f af56 	bne.w	8005a80 <lfs_file_flushedread+0x40>
    }

    return size;
 8005bd4:	683b      	ldr	r3, [r7, #0]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3728      	adds	r7, #40	; 0x28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bde:	bf00      	nop
 8005be0:	fff7fc00 	.word	0xfff7fc00

08005be4 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <lfs_file_read_+0x28>
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <lfs_file_read_+0x60>)
 8005c00:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <lfs_file_read_+0x64>)
 8005c02:	f44f 615b 	mov.w	r1, #3504	; 0xdb0
 8005c06:	4811      	ldr	r0, [pc, #68]	; (8005c4c <lfs_file_read_+0x68>)
 8005c08:	f005 ff1c 	bl	800ba44 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff fdb0 	bl	8005780 <lfs_file_flush>
 8005c20:	6178      	str	r0, [r7, #20]
        if (err) {
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <lfs_file_read_+0x48>
            return err;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	e006      	b.n	8005c3a <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff ff04 	bl	8005a40 <lfs_file_flushedread>
 8005c38:	4603      	mov	r3, r0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	0800d1dc 	.word	0x0800d1dc
 8005c48:	0800e2e4 	.word	0x0800e2e4
 8005c4c:	0800ce9c 	.word	0x0800ce9c

08005c50 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005c50:	b5b0      	push	{r4, r5, r7, lr}
 8005c52:	b090      	sub	sp, #64	; 0x40
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80f4 	beq.w	8005e5c <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fa fe43 	bl	800090e <lfs_max>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	f240 80e4 	bls.w	8005e5c <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fd50 	bl	800573c <lfs_file_outline>
 8005c9c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80db 	beq.w	8005e5c <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	e0d7      	b.n	8005e66 <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cca:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d16d      	bne.n	8005dac <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d159      	bne.n	8005d90 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d12f      	bne.n	8005d48 <lfs_file_flushedwrite+0xf8>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02b      	beq.n	8005d48 <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005d02:	3a01      	subs	r2, #1
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	3138      	adds	r1, #56	; 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8005d08:	2000      	movs	r0, #0
 8005d0a:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8005d0c:	f107 0010 	add.w	r0, r7, #16
 8005d10:	9003      	str	r0, [sp, #12]
 8005d12:	9102      	str	r1, [sp, #8]
 8005d14:	9201      	str	r2, [sp, #4]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	462b      	mov	r3, r5
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff f83c 	bl	8004d9c <lfs_ctz_find>
 8005d24:	6238      	str	r0, [r7, #32]
                    if (err) {
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	e094      	b.n	8005e66 <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	3340      	adds	r3, #64	; 0x40
 8005d40:	4619      	mov	r1, r3
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7fa feaf 	bl	8000aa6 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7fb fdac 	bl	80018a6 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005d54:	68fc      	ldr	r4, [r7, #12]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	3238      	adds	r2, #56	; 0x38
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	313c      	adds	r1, #60	; 0x3c
 8005d66:	9102      	str	r1, [sp, #8]
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	4622      	mov	r2, r4
 8005d70:	4601      	mov	r1, r0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff f87e 	bl	8004e74 <lfs_ctz_extend>
 8005d78:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	e06a      	b.n	8005e66 <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f06f 0201 	mvn.w	r2, #1
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	4619      	mov	r1, r3
 8005dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbc:	f7fa fdb6 	bl	800092c <lfs_min>
 8005dc0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005dc8:	68fc      	ldr	r4, [r7, #12]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dd2:	69b9      	ldr	r1, [r7, #24]
 8005dd4:	9103      	str	r1, [sp, #12]
 8005dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dd8:	9102      	str	r1, [sp, #8]
 8005dda:	9201      	str	r2, [sp, #4]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	2301      	movs	r3, #1
 8005de0:	4622      	mov	r2, r4
 8005de2:	4601      	mov	r1, r0
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7fb f907 	bl	8000ff8 <lfs_bd_prog>
 8005dea:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01c      	beq.n	8005e2c <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8005df8:	d007      	beq.n	8005e0a <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	e02d      	b.n	8005e66 <lfs_file_flushedwrite+0x216>
                    goto relocate;
 8005e0a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff fbba 	bl	8005588 <lfs_file_relocate>
 8005e14:	6178      	str	r0, [r7, #20]
            if (err) {
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0d2      	beq.n	8005dc2 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	e01c      	b.n	8005e66 <lfs_file_flushedwrite+0x216>
            break;
 8005e2c:	bf00      	nop
            }
        }

        file->pos += diff;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	441a      	add	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	441a      	add	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8005e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8005e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ckpoint(lfs);
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7fb fd25 	bl	80018a6 <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f47f af29 	bne.w	8005cb6 <lfs_file_flushedwrite+0x66>
    }

    return size;
 8005e64:	683b      	ldr	r3, [r7, #0]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3730      	adds	r7, #48	; 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e70 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <lfs_file_write_+0x28>
 8005e8a:	4b38      	ldr	r3, [pc, #224]	; (8005f6c <lfs_file_write_+0xfc>)
 8005e8c:	4a38      	ldr	r2, [pc, #224]	; (8005f70 <lfs_file_write_+0x100>)
 8005e8e:	f640 6117 	movw	r1, #3607	; 0xe17
 8005e92:	4838      	ldr	r0, [pc, #224]	; (8005f74 <lfs_file_write_+0x104>)
 8005e94:	f005 fdd6 	bl	800ba44 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff fc6a 	bl	8005780 <lfs_file_flush>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <lfs_file_write_+0x48>
            return err;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	e055      	b.n	8005f64 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <lfs_file_write_+0x68>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d203      	bcs.n	8005ed8 <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	441a      	add	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d902      	bls.n	8005eee <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8005ee8:	f06f 031a 	mvn.w	r3, #26
 8005eec:	e03a      	b.n	8005f64 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d121      	bne.n	8005f3e <lfs_file_write_+0xce>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d91b      	bls.n	8005f3e <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8005f14:	e00e      	b.n	8005f34 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
 8005f1a:	f107 0217 	add.w	r2, r7, #23
 8005f1e:	2301      	movs	r3, #1
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fe94 	bl	8005c50 <lfs_file_flushedwrite>
 8005f28:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da01      	bge.n	8005f34 <lfs_file_write_+0xc4>
                return res;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	e017      	b.n	8005f64 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	6a3a      	ldr	r2, [r7, #32]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d8eb      	bhi.n	8005f16 <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7ff fe83 	bl	8005c50 <lfs_file_flushedwrite>
 8005f4a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da01      	bge.n	8005f56 <lfs_file_write_+0xe6>
        return nsize;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	e006      	b.n	8005f64 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8005f62:	69bb      	ldr	r3, [r7, #24]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3728      	adds	r7, #40	; 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	0800d20c 	.word	0x0800d20c
 8005f70:	0800e2f4 	.word	0x0800e2f4
 8005f74:	0800ce9c 	.word	0x0800ce9c

08005f78 <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d102      	bne.n	8005f98 <lfs_file_seek_+0x20>
        npos = off;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	e025      	b.n	8005fe4 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d10f      	bne.n	8005fbe <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	da02      	bge.n	8005fb2 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8005fac:	f06f 0315 	mvn.w	r3, #21
 8005fb0:	e067      	b.n	8006082 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbc:	e012      	b.n	8005fe4 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d10f      	bne.n	8005fe4 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f85f 	bl	800608a <lfs_file_size_>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da02      	bge.n	8005fe0 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 8005fda:	f06f 0315 	mvn.w	r3, #21
 8005fde:	e050      	b.n	8006082 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d902      	bls.n	8005ff4 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8005fee:	f06f 0315 	mvn.w	r3, #21
 8005ff2:	e046      	b.n	8006082 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d101      	bne.n	8006002 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	e03f      	b.n	8006082 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12b      	bne.n	8006066 <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	f107 0318 	add.w	r3, r7, #24
 8006018:	4619      	mov	r1, r3
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7fe fe86 	bl	8004d2c <lfs_ctz_index>
 8006020:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	4619      	mov	r1, r3
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7fe fe7d 	bl	8004d2c <lfs_ctz_index>
 8006032:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	429a      	cmp	r2, r3
 800603a:	d114      	bne.n	8006066 <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	429a      	cmp	r2, r3
 8006044:	d80f      	bhi.n	8006066 <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604e:	441a      	add	r2, r3
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	429a      	cmp	r2, r3
 8006054:	d907      	bls.n	8006066 <lfs_file_seek_+0xee>
            file->pos = npos;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	e00d      	b.n	8006082 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff fb89 	bl	8005780 <lfs_file_flush>
 800606e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <lfs_file_seek_+0x102>
        return err;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	e003      	b.n	8006082 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006082:	4618      	mov	r0, r3
 8006084:	3730      	adds	r7, #48	; 0x30
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d009      	beq.n	80060b4 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f7fa fc2f 	bl	800090e <lfs_max>
 80060b0:	4603      	mov	r3, r0
 80060b2:	e001      	b.n	80060b8 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <lfs_remove_>:

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
}

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b0a0      	sub	sp, #128	; 0x80
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f001 fbec 	bl	80078a8 <lfs_fs_forceconsistency>
 80060d0:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 80060d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <lfs_remove_+0x1c>
        return err;
 80060d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060da:	e0c4      	b.n	8006266 <lfs_remove_+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80060dc:	463a      	mov	r2, r7
 80060de:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80060e2:	2300      	movs	r3, #0
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7fc ff7f 	bl	8002fe8 <lfs_dir_find>
 80060ea:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 80060ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	db09      	blt.n	8006106 <lfs_remove_+0x46>
 80060f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fb f979 	bl	80013ec <lfs_tag_id>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461a      	mov	r2, r3
 80060fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006102:	429a      	cmp	r2, r3
 8006104:	d107      	bne.n	8006116 <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8006106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006108:	2b00      	cmp	r3, #0
 800610a:	da01      	bge.n	8006110 <lfs_remove_+0x50>
 800610c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800610e:	e0aa      	b.n	8006266 <lfs_remove_+0x1a6>
 8006110:	f06f 0315 	mvn.w	r3, #21
 8006114:	e0a7      	b.n	8006266 <lfs_remove_+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 800611c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800611e:	4618      	mov	r0, r3
 8006120:	f7fb f93c 	bl	800139c <lfs_tag_type3>
 8006124:	4603      	mov	r3, r0
 8006126:	2b02      	cmp	r3, #2
 8006128:	d14a      	bne.n	80061c0 <lfs_remove_+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 800612a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb f95d 	bl	80013ec <lfs_tag_id>
 8006132:	4603      	mov	r3, r0
 8006134:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8006136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800613a:	f043 0308 	orr.w	r3, r3, #8
 800613e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006142:	f107 020c 	add.w	r2, r7, #12
 8006146:	9200      	str	r2, [sp, #0]
 8006148:	4a49      	ldr	r2, [pc, #292]	; (8006270 <lfs_remove_+0x1b0>)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fb fdae 	bl	8001cac <lfs_dir_get>
 8006150:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 8006152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006154:	2b00      	cmp	r3, #0
 8006156:	da01      	bge.n	800615c <lfs_remove_+0x9c>
            return (int)res;
 8006158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615a:	e084      	b.n	8006266 <lfs_remove_+0x1a6>
        }
        lfs_pair_fromle32(pair);
 800615c:	f107 030c 	add.w	r3, r7, #12
 8006160:	4618      	mov	r0, r3
 8006162:	f7fb f8aa 	bl	80012ba <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8006166:	f107 020c 	add.w	r2, r7, #12
 800616a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800616e:	3308      	adds	r3, #8
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc fea0 	bl	8002eb8 <lfs_dir_fetch>
 8006178:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 800617a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <lfs_remove_+0xc4>
            return err;
 8006180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006182:	e070      	b.n	8006266 <lfs_remove_+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8006184:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d103      	bne.n	8006194 <lfs_remove_+0xd4>
 800618c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <lfs_remove_+0xda>
            return LFS_ERR_NOTEMPTY;
 8006194:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8006198:	e065      	b.n	8006266 <lfs_remove_+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 800619a:	2101      	movs	r1, #1
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f861 	bl	8007264 <lfs_fs_preporphans>
 80061a2:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80061a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <lfs_remove_+0xee>
            return err;
 80061aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ac:	e05b      	b.n	8006266 <lfs_remove_+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80061be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80061c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fb f912 	bl	80013ec <lfs_tag_id>
 80061c8:	4603      	mov	r3, r0
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80061d0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	2300      	movs	r3, #0
 80061d8:	623b      	str	r3, [r7, #32]
 80061da:	f107 021c 	add.w	r2, r7, #28
 80061de:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80061e2:	2301      	movs	r3, #1
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fe fc3b 	bl	8004a60 <lfs_dir_commit>
 80061ea:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 80061ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <lfs_remove_+0x13c>
        lfs->mlist = dir.next;
 80061f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80061f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fa:	e034      	b.n	8006266 <lfs_remove_+0x1a6>
    }

    lfs->mlist = dir.next;
 80061fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8006202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006204:	4618      	mov	r0, r3
 8006206:	f7fb f8c9 	bl	800139c <lfs_tag_type3>
 800620a:	4603      	mov	r3, r0
 800620c:	2b02      	cmp	r3, #2
 800620e:	d129      	bne.n	8006264 <lfs_remove_+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8006210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 f825 	bl	8007264 <lfs_fs_preporphans>
 800621a:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 800621c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <lfs_remove_+0x166>
            return err;
 8006222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006224:	e01f      	b.n	8006266 <lfs_remove_+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8006226:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800622a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800622e:	3308      	adds	r3, #8
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fece 	bl	8006fd4 <lfs_fs_pred>
 8006238:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 800623a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <lfs_remove_+0x184>
            return err;
 8006240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006242:	e010      	b.n	8006266 <lfs_remove_+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8006244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006248:	f103 0208 	add.w	r2, r3, #8
 800624c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fd fa62 	bl	800371c <lfs_dir_drop>
 8006258:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 800625a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <lfs_remove_+0x1a4>
            return err;
 8006260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006262:	e000      	b.n	8006266 <lfs_remove_+0x1a6>
        }
    }

    return 0;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3778      	adds	r7, #120	; 0x78
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	700ffc00 	.word	0x700ffc00

08006274 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b08d      	sub	sp, #52	; 0x34
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	669a      	str	r2, [r3, #104]	; 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	66da      	str	r2, [r3, #108]	; 0x6c
    int err = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <lfs_init+0x34>
 800629a:	4b96      	ldr	r3, [pc, #600]	; (80064f4 <lfs_init+0x280>)
 800629c:	4a96      	ldr	r2, [pc, #600]	; (80064f8 <lfs_init+0x284>)
 800629e:	f241 0143 	movw	r1, #4163	; 0x1043
 80062a2:	4896      	ldr	r0, [pc, #600]	; (80064fc <lfs_init+0x288>)
 80062a4:	f005 fbce 	bl	800ba44 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <lfs_init+0x4c>
 80062b2:	4b93      	ldr	r3, [pc, #588]	; (8006500 <lfs_init+0x28c>)
 80062b4:	4a90      	ldr	r2, [pc, #576]	; (80064f8 <lfs_init+0x284>)
 80062b6:	f241 0144 	movw	r1, #4164	; 0x1044
 80062ba:	4890      	ldr	r0, [pc, #576]	; (80064fc <lfs_init+0x288>)
 80062bc:	f005 fbc2 	bl	800ba44 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <lfs_init+0x64>
 80062ca:	4b8e      	ldr	r3, [pc, #568]	; (8006504 <lfs_init+0x290>)
 80062cc:	4a8a      	ldr	r2, [pc, #552]	; (80064f8 <lfs_init+0x284>)
 80062ce:	f241 0145 	movw	r1, #4165	; 0x1045
 80062d2:	488a      	ldr	r0, [pc, #552]	; (80064fc <lfs_init+0x288>)
 80062d4:	f005 fbb6 	bl	800ba44 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062e2:	6952      	ldr	r2, [r2, #20]
 80062e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062e8:	fb01 f202 	mul.w	r2, r1, r2
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <lfs_init+0x8c>
 80062f2:	4b85      	ldr	r3, [pc, #532]	; (8006508 <lfs_init+0x294>)
 80062f4:	4a80      	ldr	r2, [pc, #512]	; (80064f8 <lfs_init+0x284>)
 80062f6:	f241 0149 	movw	r1, #4169	; 0x1049
 80062fa:	4880      	ldr	r0, [pc, #512]	; (80064fc <lfs_init+0x288>)
 80062fc:	f005 fba2 	bl	800ba44 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800630a:	6992      	ldr	r2, [r2, #24]
 800630c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006310:	fb01 f202 	mul.w	r2, r1, r2
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <lfs_init+0xb4>
 800631a:	4b7c      	ldr	r3, [pc, #496]	; (800650c <lfs_init+0x298>)
 800631c:	4a76      	ldr	r2, [pc, #472]	; (80064f8 <lfs_init+0x284>)
 800631e:	f241 014a 	movw	r1, #4170	; 0x104a
 8006322:	4876      	ldr	r0, [pc, #472]	; (80064fc <lfs_init+0x288>)
 8006324:	f005 fb8e 	bl	800ba44 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006332:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006334:	fbb3 f1f2 	udiv	r1, r3, r2
 8006338:	fb01 f202 	mul.w	r2, r1, r2
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d006      	beq.n	8006350 <lfs_init+0xdc>
 8006342:	4b73      	ldr	r3, [pc, #460]	; (8006510 <lfs_init+0x29c>)
 8006344:	4a6c      	ldr	r2, [pc, #432]	; (80064f8 <lfs_init+0x284>)
 8006346:	f241 014b 	movw	r1, #4171	; 0x104b
 800634a:	486c      	ldr	r0, [pc, #432]	; (80064fc <lfs_init+0x288>)
 800634c:	f005 fb7a 	bl	800ba44 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	2b7f      	cmp	r3, #127	; 0x7f
 8006358:	d806      	bhi.n	8006368 <lfs_init+0xf4>
 800635a:	4b6e      	ldr	r3, [pc, #440]	; (8006514 <lfs_init+0x2a0>)
 800635c:	4a66      	ldr	r2, [pc, #408]	; (80064f8 <lfs_init+0x284>)
 800635e:	f241 014e 	movw	r1, #4174	; 0x104e
 8006362:	4866      	ldr	r0, [pc, #408]	; (80064fc <lfs_init+0x288>)
 8006364:	f005 fb6e 	bl	800ba44 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	3b08      	subs	r3, #8
 8006370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	4618      	mov	r0, r3
 800637a:	f7fa fb0c 	bl	8000996 <lfs_npw2>
 800637e:	4603      	mov	r3, r0
 8006380:	009a      	lsls	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	429a      	cmp	r2, r3
 800638a:	d906      	bls.n	800639a <lfs_init+0x126>
 800638c:	4b62      	ldr	r3, [pc, #392]	; (8006518 <lfs_init+0x2a4>)
 800638e:	4a5a      	ldr	r2, [pc, #360]	; (80064f8 <lfs_init+0x284>)
 8006390:	f241 0151 	movw	r1, #4177	; 0x1051
 8006394:	4859      	ldr	r0, [pc, #356]	; (80064fc <lfs_init+0x288>)
 8006396:	f005 fb55 	bl	800ba44 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <lfs_init+0x13e>
 80063a4:	4b5d      	ldr	r3, [pc, #372]	; (800651c <lfs_init+0x2a8>)
 80063a6:	4a54      	ldr	r2, [pc, #336]	; (80064f8 <lfs_init+0x284>)
 80063a8:	f241 015a 	movw	r1, #4186	; 0x105a
 80063ac:	4853      	ldr	r0, [pc, #332]	; (80064fc <lfs_init+0x288>)
 80063ae:	f005 fb49 	bl	800ba44 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00f      	beq.n	80063dc <lfs_init+0x168>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d206      	bcs.n	80063dc <lfs_init+0x168>
 80063ce:	4b54      	ldr	r3, [pc, #336]	; (8006520 <lfs_init+0x2ac>)
 80063d0:	4a49      	ldr	r2, [pc, #292]	; (80064f8 <lfs_init+0x284>)
 80063d2:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80063d6:	4849      	ldr	r0, [pc, #292]	; (80064fc <lfs_init+0x288>)
 80063d8:	f005 fb34 	bl	800ba44 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e6:	d00e      	beq.n	8006406 <lfs_init+0x192>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d906      	bls.n	8006406 <lfs_init+0x192>
 80063f8:	4b4a      	ldr	r3, [pc, #296]	; (8006524 <lfs_init+0x2b0>)
 80063fa:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <lfs_init+0x284>)
 80063fc:	f241 0162 	movw	r1, #4194	; 0x1062
 8006400:	483e      	ldr	r0, [pc, #248]	; (80064fc <lfs_init+0x288>)
 8006402:	f005 fb1f 	bl	800ba44 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800640a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e010      	b.n	800643e <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	4618      	mov	r0, r3
 8006424:	f7fa fb1a 	bl	8000a5c <lfs_malloc>
 8006428:	4602      	mov	r2, r0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 8006436:	f06f 030b 	mvn.w	r3, #11
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800643c:	e163      	b.n	8006706 <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	61da      	str	r2, [r3, #28]
 8006452:	e010      	b.n	8006476 <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	4618      	mov	r0, r3
 800645c:	f7fa fafe 	bl	8000a5c <lfs_malloc>
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 800646e:	f06f 030b 	mvn.w	r3, #11
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8006474:	e147      	b.n	8006706 <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fa fb13 	bl	8000aa6 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3310      	adds	r3, #16
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fa fb0d 	bl	8000aa6 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <lfs_init+0x230>
 8006496:	4b24      	ldr	r3, [pc, #144]	; (8006528 <lfs_init+0x2b4>)
 8006498:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <lfs_init+0x284>)
 800649a:	f241 0181 	movw	r1, #4225	; 0x1081
 800649e:	4817      	ldr	r0, [pc, #92]	; (80064fc <lfs_init+0x288>)
 80064a0:	f005 fad0 	bl	800ba44 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	665a      	str	r2, [r3, #100]	; 0x64
 80064b8:	e010      	b.n	80064dc <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fa facb 	bl	8000a5c <lfs_malloc>
 80064c6:	4602      	mov	r2, r0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->lookahead.buffer) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 80064d4:	f06f 030b 	mvn.w	r3, #11
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80064da:	e114      	b.n	8006706 <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	2bff      	cmp	r3, #255	; 0xff
 80064e4:	d924      	bls.n	8006530 <lfs_init+0x2bc>
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <lfs_init+0x2b8>)
 80064e8:	4a03      	ldr	r2, [pc, #12]	; (80064f8 <lfs_init+0x284>)
 80064ea:	f241 018d 	movw	r1, #4237	; 0x108d
 80064ee:	4803      	ldr	r0, [pc, #12]	; (80064fc <lfs_init+0x288>)
 80064f0:	f005 faa8 	bl	800ba44 <__assert_func>
 80064f4:	0800d23c 	.word	0x0800d23c
 80064f8:	0800e304 	.word	0x0800e304
 80064fc:	0800ce9c 	.word	0x0800ce9c
 8006500:	0800d258 	.word	0x0800d258
 8006504:	0800d274 	.word	0x0800d274
 8006508:	0800d290 	.word	0x0800d290
 800650c:	0800d2c0 	.word	0x0800d2c0
 8006510:	0800d2f0 	.word	0x0800d2f0
 8006514:	0800d324 	.word	0x0800d324
 8006518:	0800d340 	.word	0x0800d340
 800651c:	0800d38c 	.word	0x0800d38c
 8006520:	0800d3a8 	.word	0x0800d3a8
 8006524:	0800d3fc 	.word	0x0800d3fc
 8006528:	0800d45c 	.word	0x0800d45c
 800652c:	0800d47c 	.word	0x0800d47c
    lfs->name_max = lfs->cfg->name_max;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->name_max) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	2b00      	cmp	r3, #0
 8006540:	d102      	bne.n	8006548 <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654e:	2b00      	cmp	r3, #0
 8006550:	da06      	bge.n	8006560 <lfs_init+0x2ec>
 8006552:	4b71      	ldr	r3, [pc, #452]	; (8006718 <lfs_init+0x4a4>)
 8006554:	4a71      	ldr	r2, [pc, #452]	; (800671c <lfs_init+0x4a8>)
 8006556:	f241 0193 	movw	r1, #4243	; 0x1093
 800655a:	4871      	ldr	r0, [pc, #452]	; (8006720 <lfs_init+0x4ac>)
 800655c:	f005 fa72 	bl	800ba44 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->file_max) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006578:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006580:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006584:	4293      	cmp	r3, r2
 8006586:	d906      	bls.n	8006596 <lfs_init+0x322>
 8006588:	4b66      	ldr	r3, [pc, #408]	; (8006724 <lfs_init+0x4b0>)
 800658a:	4a64      	ldr	r2, [pc, #400]	; (800671c <lfs_init+0x4a8>)
 800658c:	f241 0199 	movw	r1, #4249	; 0x1099
 8006590:	4863      	ldr	r0, [pc, #396]	; (8006720 <lfs_init+0x4ac>)
 8006592:	f005 fa57 	bl	800ba44 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	679a      	str	r2, [r3, #120]	; 0x78
    if (!lfs->attr_max) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80065ae:	679a      	str	r2, [r3, #120]	; 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d906      	bls.n	80065ce <lfs_init+0x35a>
 80065c0:	4b59      	ldr	r3, [pc, #356]	; (8006728 <lfs_init+0x4b4>)
 80065c2:	4a56      	ldr	r2, [pc, #344]	; (800671c <lfs_init+0x4a8>)
 80065c4:	f241 019f 	movw	r1, #4255	; 0x109f
 80065c8:	4855      	ldr	r0, [pc, #340]	; (8006720 <lfs_init+0x4ac>)
 80065ca:	f005 fa3b 	bl	800ba44 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d8:	d00e      	beq.n	80065f8 <lfs_init+0x384>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d906      	bls.n	80065f8 <lfs_init+0x384>
 80065ea:	4b50      	ldr	r3, [pc, #320]	; (800672c <lfs_init+0x4b8>)
 80065ec:	4a4b      	ldr	r2, [pc, #300]	; (800671c <lfs_init+0x4a8>)
 80065ee:	f241 01a1 	movw	r1, #4257	; 0x10a1
 80065f2:	484b      	ldr	r0, [pc, #300]	; (8006720 <lfs_init+0x4ac>)
 80065f4:	f005 fa26 	bl	800ba44 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006602:	d00d      	beq.n	8006620 <lfs_init+0x3ac>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800660e:	429a      	cmp	r2, r3
 8006610:	d906      	bls.n	8006620 <lfs_init+0x3ac>
 8006612:	4b47      	ldr	r3, [pc, #284]	; (8006730 <lfs_init+0x4bc>)
 8006614:	4a41      	ldr	r2, [pc, #260]	; (800671c <lfs_init+0x4a8>)
 8006616:	f241 01a3 	movw	r1, #4259	; 0x10a3
 800661a:	4841      	ldr	r0, [pc, #260]	; (8006720 <lfs_init+0x4ac>)
 800661c:	f005 fa12 	bl	800ba44 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800662a:	d019      	beq.n	8006660 <lfs_init+0x3ec>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <lfs_init+0x3d2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	08db      	lsrs	r3, r3, #3
 8006644:	e003      	b.n	800664e <lfs_init+0x3da>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	08db      	lsrs	r3, r3, #3
 800664e:	4293      	cmp	r3, r2
 8006650:	d206      	bcs.n	8006660 <lfs_init+0x3ec>
 8006652:	4b38      	ldr	r3, [pc, #224]	; (8006734 <lfs_init+0x4c0>)
 8006654:	4a31      	ldr	r2, [pc, #196]	; (800671c <lfs_init+0x4a8>)
 8006656:	f241 01a5 	movw	r1, #4261	; 0x10a5
 800665a:	4831      	ldr	r0, [pc, #196]	; (8006720 <lfs_init+0x4ac>)
 800665c:	f005 f9f2 	bl	800ba44 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	67da      	str	r2, [r3, #124]	; 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006672:	d103      	bne.n	800667c <lfs_init+0x408>
        lfs->inline_max = 0;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	67da      	str	r2, [r3, #124]	; 0x7c
 800667a:	e022      	b.n	80066c2 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11e      	bne.n	80066c2 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006688:	6a9c      	ldr	r4, [r3, #40]	; 0x28
        lfs->inline_max = lfs_min(
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        lfs->inline_max = lfs_min(
 800669e:	08db      	lsrs	r3, r3, #3
 80066a0:	e003      	b.n	80066aa <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a6:	69db      	ldr	r3, [r3, #28]
        lfs->inline_max = lfs_min(
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7fa f93d 	bl	800092c <lfs_min>
 80066b2:	4603      	mov	r3, r0
 80066b4:	4619      	mov	r1, r3
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7fa f938 	bl	800092c <lfs_min>
 80066bc:	4602      	mov	r2, r0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	333c      	adds	r3, #60	; 0x3c
 80066e2:	2200      	movs	r2, #0
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3330      	adds	r3, #48	; 0x30
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3348      	adds	r3, #72	; 0x48
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8006702:	2300      	movs	r3, #0
 8006704:	e003      	b.n	800670e <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f816 	bl	8006738 <lfs_deinit>
    return err;
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800670e:	4618      	mov	r0, r3
 8006710:	3734      	adds	r7, #52	; 0x34
 8006712:	46bd      	mov	sp, r7
 8006714:	bd90      	pop	{r4, r7, pc}
 8006716:	bf00      	nop
 8006718:	0800d498 	.word	0x0800d498
 800671c:	0800e304 	.word	0x0800e304
 8006720:	0800ce9c 	.word	0x0800ce9c
 8006724:	0800d4bc 	.word	0x0800d4bc
 8006728:	0800d4d8 	.word	0x0800d4d8
 800672c:	0800d508 	.word	0x0800d508
 8006730:	0800d560 	.word	0x0800d560
 8006734:	0800d5b0 	.word	0x0800d5b0

08006738 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	4618      	mov	r0, r3
 8006750:	f7fa f990 	bl	8000a74 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fa f986 	bl	8000a74 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006776:	4618      	mov	r0, r3
 8006778:	f7fa f97c 	bl	8000a74 <lfs_free>
    }

    return 0;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b0a0      	sub	sp, #128	; 0x80
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
    int err = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fd6b 	bl	8006274 <lfs_init>
 800679e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80067a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <lfs_format_+0x22>
            return err;
 80067a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067a8:	e08d      	b.n	80068c6 <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <lfs_format_+0x38>
 80067b2:	4b47      	ldr	r3, [pc, #284]	; (80068d0 <lfs_format_+0x148>)
 80067b4:	4a47      	ldr	r2, [pc, #284]	; (80068d4 <lfs_format_+0x14c>)
 80067b6:	f241 01e5 	movw	r1, #4325	; 0x10e5
 80067ba:	4847      	ldr	r0, [pc, #284]	; (80068d8 <lfs_format_+0x150>)
 80067bc:	f005 f942 	bl	800ba44 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	461a      	mov	r2, r3
 80067cc:	2100      	movs	r1, #0
 80067ce:	f005 fd2d 	bl	800c22c <memset>
        lfs->lookahead.start = 0;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	00da      	lsls	r2, r3, #3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	4619      	mov	r1, r3
 80067e6:	4610      	mov	r0, r2
 80067e8:	f7fa f8a0 	bl	800092c <lfs_min>
 80067ec:	4602      	mov	r2, r0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	659a      	str	r2, [r3, #88]	; 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ckpoint(lfs);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fb f854 	bl	80018a6 <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7fc ff0f 	bl	8003628 <lfs_dir_alloc>
 800680a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800680c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d150      	bne.n	80068b4 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fb f820 	bl	8001858 <lfs_fs_disk_version>
 8006818:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 800681a:	667b      	str	r3, [r7, #100]	; 0x64
            .block_size  = lfs->cfg->block_size,
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006820:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8006822:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->block_count,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8006828:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800682e:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8006834:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        lfs_superblock_t superblock = {
 800683a:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800683c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006840:	4618      	mov	r0, r3
 8006842:	f7fa ff83 	bl	800174c <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8006846:	4b25      	ldr	r3, [pc, #148]	; (80068dc <lfs_format_+0x154>)
 8006848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684a:	2300      	movs	r3, #0
 800684c:	653b      	str	r3, [r7, #80]	; 0x50
 800684e:	4b24      	ldr	r3, [pc, #144]	; (80068e0 <lfs_format_+0x158>)
 8006850:	657b      	str	r3, [r7, #84]	; 0x54
 8006852:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <lfs_format_+0x15c>)
 8006854:	65bb      	str	r3, [r7, #88]	; 0x58
 8006856:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <lfs_format_+0x160>)
 8006858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800685a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800685e:	663b      	str	r3, [r7, #96]	; 0x60
 8006860:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8006864:	f107 010c 	add.w	r1, r7, #12
 8006868:	2303      	movs	r3, #3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fe f8f8 	bl	8004a60 <lfs_dir_commit>
 8006870:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8006872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d11f      	bne.n	80068b8 <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8006878:	2300      	movs	r3, #0
 800687a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800687e:	f107 010c 	add.w	r1, r7, #12
 8006882:	2300      	movs	r3, #0
 8006884:	2200      	movs	r2, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fe f8ea 	bl	8004a60 <lfs_dir_commit>
 800688c:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800688e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d113      	bne.n	80068bc <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8006894:	2300      	movs	r3, #0
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006898:	2301      	movs	r3, #1
 800689a:	633b      	str	r3, [r7, #48]	; 0x30
 800689c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fc fb06 	bl	8002eb8 <lfs_dir_fetch>
 80068ac:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80068ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	e004      	b.n	80068be <lfs_format_+0x136>
            goto cleanup;
 80068b4:	bf00      	nop
 80068b6:	e002      	b.n	80068be <lfs_format_+0x136>
            goto cleanup;
 80068b8:	bf00      	nop
 80068ba:	e000      	b.n	80068be <lfs_format_+0x136>
            goto cleanup;
 80068bc:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ff3a 	bl	8006738 <lfs_deinit>
    return err;
 80068c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3780      	adds	r7, #128	; 0x80
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0800d640 	.word	0x0800d640
 80068d4:	0800e310 	.word	0x0800e310
 80068d8:	0800ce9c 	.word	0x0800ce9c
 80068dc:	40100000 	.word	0x40100000
 80068e0:	0ff00008 	.word	0x0ff00008
 80068e4:	0800d658 	.word	0x0800d658
 80068e8:	20100018 	.word	0x20100018

080068ec <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 80068ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ee:	b09f      	sub	sp, #124	; 0x7c
 80068f0:	af04      	add	r7, sp, #16
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff fcbb 	bl	8006274 <lfs_init>
 80068fe:	6678      	str	r0, [r7, #100]	; 0x64
    if (err) {
 8006900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <lfs_mount_+0x1e>
        return err;
 8006906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006908:	e1fa      	b.n	8006d00 <lfs_mount_+0x414>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800690a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800690e:	2220      	movs	r2, #32
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f005 fc8a 	bl	800c22c <memset>
 8006918:	2301      	movs	r3, #1
 800691a:	653b      	str	r3, [r7, #80]	; 0x50
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800691c:	4a96      	ldr	r2, [pc, #600]	; (8006b78 <lfs_mount_+0x28c>)
 800691e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006922:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006926:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	663b      	str	r3, [r7, #96]	; 0x60
    lfs_size_t tortoise_period = 1;
 800692e:	2301      	movs	r3, #1
 8006930:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8006932:	e191      	b.n	8006c58 <lfs_mount_+0x36c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006934:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800693c:	3318      	adds	r3, #24
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f7fa fc8e 	bl	8001262 <lfs_pair_issync>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 800694c:	4b8b      	ldr	r3, [pc, #556]	; (8006b7c <lfs_mount_+0x290>)
 800694e:	f241 122e 	movw	r2, #4398	; 0x112e
 8006952:	498b      	ldr	r1, [pc, #556]	; (8006b80 <lfs_mount_+0x294>)
 8006954:	488b      	ldr	r0, [pc, #556]	; (8006b84 <lfs_mount_+0x298>)
 8006956:	f005 fb0b 	bl	800bf70 <iprintf>
            err = LFS_ERR_CORRUPT;
 800695a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800695e:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 8006960:	e1ca      	b.n	8006cf8 <lfs_mount_+0x40c>
        }
        if (tortoise_i == tortoise_period) {
 8006962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006966:	429a      	cmp	r2, r3
 8006968:	d108      	bne.n	800697c <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise[1] = dir.tail[1];
 800696e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006970:	633b      	str	r3, [r7, #48]	; 0x30
            tortoise_i = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	663b      	str	r3, [r7, #96]	; 0x60
            tortoise_period *= 2;
 8006976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        tortoise_i += 1;
 800697c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800697e:	3301      	adds	r3, #1
 8006980:	663b      	str	r3, [r7, #96]	; 0x60
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	4b80      	ldr	r3, [pc, #512]	; (8006b88 <lfs_mount_+0x29c>)
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	2308      	movs	r3, #8
 800698c:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800698e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006992:	f103 0218 	add.w	r2, r3, #24
 8006996:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800699a:	f107 0320 	add.w	r3, r7, #32
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	4b7a      	ldr	r3, [pc, #488]	; (8006b8c <lfs_mount_+0x2a0>)
 80069a2:	9302      	str	r3, [sp, #8]
 80069a4:	2300      	movs	r3, #0
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	4b79      	ldr	r3, [pc, #484]	; (8006b90 <lfs_mount_+0x2a4>)
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4b79      	ldr	r3, [pc, #484]	; (8006b94 <lfs_mount_+0x2a8>)
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fb feb2 	bl	8002718 <lfs_dir_fetchmatch>
 80069b4:	65b8      	str	r0, [r7, #88]	; 0x58
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80069b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	da02      	bge.n	80069c2 <lfs_mount_+0xd6>
            err = tag;
 80069bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069be:	667b      	str	r3, [r7, #100]	; 0x64
            goto cleanup;
 80069c0:	e19a      	b.n	8006cf8 <lfs_mount_+0x40c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80069c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 813a 	beq.w	8006c3e <lfs_mount_+0x352>
 80069ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fa fcb5 	bl	800133c <lfs_tag_isdelete>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f083 0301 	eor.w	r3, r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 812f 	beq.w	8006c3e <lfs_mount_+0x352>
            // update root
            lfs->root[0] = dir.pair[0];
 80069e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80069e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80069ec:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80069f0:	f107 0308 	add.w	r3, r7, #8
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	4b68      	ldr	r3, [pc, #416]	; (8006b98 <lfs_mount_+0x2ac>)
 80069f8:	4a66      	ldr	r2, [pc, #408]	; (8006b94 <lfs_mount_+0x2a8>)
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fb f956 	bl	8001cac <lfs_dir_get>
 8006a00:	65b8      	str	r0, [r7, #88]	; 0x58
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8006a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	da02      	bge.n	8006a0e <lfs_mount_+0x122>
                err = tag;
 8006a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0a:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006a0c:	e174      	b.n	8006cf8 <lfs_mount_+0x40c>
            }
            lfs_superblock_fromle32(&superblock);
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fa fe62 	bl	80016dc <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            if (major_version != lfs_fs_disk_version_major(lfs)
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fa ff22 	bl	8001870 <lfs_fs_disk_version_major>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d108      	bne.n	8006a4a <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fa ff27 	bl	800188c <lfs_fs_disk_version_minor>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d91d      	bls.n	8006a86 <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 8006a4a:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006a4e:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fa ff0c 	bl	8001870 <lfs_fs_disk_version_major>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461e      	mov	r6, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fa ff15 	bl	800188c <lfs_fs_disk_version_minor>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
 8006a66:	4b45      	ldr	r3, [pc, #276]	; (8006b7c <lfs_mount_+0x290>)
 8006a68:	9303      	str	r3, [sp, #12]
 8006a6a:	9202      	str	r2, [sp, #8]
 8006a6c:	9601      	str	r6, [sp, #4]
 8006a6e:	9400      	str	r4, [sp, #0]
 8006a70:	462b      	mov	r3, r5
 8006a72:	f241 125c 	movw	r2, #4444	; 0x115c
 8006a76:	4942      	ldr	r1, [pc, #264]	; (8006b80 <lfs_mount_+0x294>)
 8006a78:	4848      	ldr	r0, [pc, #288]	; (8006b9c <lfs_mount_+0x2b0>)
 8006a7a:	f005 fa79 	bl	800bf70 <iprintf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 8006a7e:	f06f 0315 	mvn.w	r3, #21
 8006a82:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006a84:	e0da      	b.n	8006c3c <lfs_mount_+0x350>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fa ff00 	bl	800188c <lfs_fs_disk_version_minor>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d21d      	bcs.n	8006ad4 <lfs_mount_+0x1e8>
                LFS_DEBUG("Found older minor version "
 8006a98:	f8b7 5056 	ldrh.w	r5, [r7, #86]	; 0x56
 8006a9c:	f8b7 4054 	ldrh.w	r4, [r7, #84]	; 0x54
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fa fee5 	bl	8001870 <lfs_fs_disk_version_major>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461e      	mov	r6, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa feee 	bl	800188c <lfs_fs_disk_version_minor>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4b31      	ldr	r3, [pc, #196]	; (8006b7c <lfs_mount_+0x290>)
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	9202      	str	r2, [sp, #8]
 8006aba:	9601      	str	r6, [sp, #4]
 8006abc:	9400      	str	r4, [sp, #0]
 8006abe:	462b      	mov	r3, r5
 8006ac0:	f241 126a 	movw	r2, #4458	; 0x116a
 8006ac4:	492e      	ldr	r1, [pc, #184]	; (8006b80 <lfs_mount_+0x294>)
 8006ac6:	4836      	ldr	r0, [pc, #216]	; (8006ba0 <lfs_mount_+0x2b4>)
 8006ac8:	f005 fa52 	bl	800bf70 <iprintf>
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                // note this bit is reserved on disk, so fetching more gstate
                // will not interfere here
                lfs_fs_prepsuperblock(lfs, true);
 8006acc:	2101      	movs	r1, #1
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fbb4 	bl	800723c <lfs_fs_prepsuperblock>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d018      	beq.n	8006b0c <lfs_mount_+0x220>
                if (superblock.name_max > lfs->name_max) {
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d910      	bls.n	8006b06 <lfs_mount_+0x21a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4924      	ldr	r1, [pc, #144]	; (8006b7c <lfs_mount_+0x290>)
 8006aec:	9101      	str	r1, [sp, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	f241 1278 	movw	r2, #4472	; 0x1178
 8006af6:	4922      	ldr	r1, [pc, #136]	; (8006b80 <lfs_mount_+0x294>)
 8006af8:	482a      	ldr	r0, [pc, #168]	; (8006ba4 <lfs_mount_+0x2b8>)
 8006afa:	f005 fa39 	bl	800bf70 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8006afe:	f06f 0315 	mvn.w	r3, #21
 8006b02:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006b04:	e09a      	b.n	8006c3c <lfs_mount_+0x350>
                }

                lfs->name_max = superblock.name_max;
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.file_max) {
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d018      	beq.n	8006b44 <lfs_mount_+0x258>
                if (superblock.file_max > lfs->file_max) {
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d910      	bls.n	8006b3e <lfs_mount_+0x252>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b22:	4916      	ldr	r1, [pc, #88]	; (8006b7c <lfs_mount_+0x290>)
 8006b24:	9101      	str	r1, [sp, #4]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	f241 1283 	movw	r2, #4483	; 0x1183
 8006b2e:	4914      	ldr	r1, [pc, #80]	; (8006b80 <lfs_mount_+0x294>)
 8006b30:	481d      	ldr	r0, [pc, #116]	; (8006ba8 <lfs_mount_+0x2bc>)
 8006b32:	f005 fa1d 	bl	800bf70 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8006b36:	f06f 0315 	mvn.w	r3, #21
 8006b3a:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006b3c:	e07e      	b.n	8006c3c <lfs_mount_+0x350>
                }

                lfs->file_max = superblock.file_max;
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.attr_max) {
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d040      	beq.n	8006bcc <lfs_mount_+0x2e0>
                if (superblock.attr_max > lfs->attr_max) {
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d92d      	bls.n	8006bb0 <lfs_mount_+0x2c4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5a:	4908      	ldr	r1, [pc, #32]	; (8006b7c <lfs_mount_+0x290>)
 8006b5c:	9101      	str	r1, [sp, #4]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	f241 128e 	movw	r2, #4494	; 0x118e
 8006b66:	4906      	ldr	r1, [pc, #24]	; (8006b80 <lfs_mount_+0x294>)
 8006b68:	4810      	ldr	r0, [pc, #64]	; (8006bac <lfs_mount_+0x2c0>)
 8006b6a:	f005 fa01 	bl	800bf70 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8006b6e:	f06f 0315 	mvn.w	r3, #21
 8006b72:	667b      	str	r3, [r7, #100]	; 0x64
                    goto cleanup;
 8006b74:	e062      	b.n	8006c3c <lfs_mount_+0x350>
 8006b76:	bf00      	nop
 8006b78:	0800cff8 	.word	0x0800cff8
 8006b7c:	0800cfb4 	.word	0x0800cfb4
 8006b80:	0800ce9c 	.word	0x0800ce9c
 8006b84:	0800d664 	.word	0x0800d664
 8006b88:	0800d658 	.word	0x0800d658
 8006b8c:	08002f55 	.word	0x08002f55
 8006b90:	0ff00008 	.word	0x0ff00008
 8006b94:	7ffffc00 	.word	0x7ffffc00
 8006b98:	20100018 	.word	0x20100018
 8006b9c:	0800d690 	.word	0x0800d690
 8006ba0:	0800d6c8 	.word	0x0800d6c8
 8006ba4:	0800d708 	.word	0x0800d708
 8006ba8:	0800d73c 	.word	0x0800d73c
 8006bac:	0800d770 	.word	0x0800d770
                }

                lfs->attr_max = superblock.attr_max;
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	679a      	str	r2, [r3, #120]	; 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7f9 feb3 	bl	800092c <lfs_min>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	67da      	str	r2, [r3, #124]	; 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d017      	beq.n	8006c06 <lfs_mount_+0x31a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d011      	beq.n	8006c06 <lfs_mount_+0x31a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	4947      	ldr	r1, [pc, #284]	; (8006d08 <lfs_mount_+0x41c>)
 8006bec:	9101      	str	r1, [sp, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	f241 129d 	movw	r2, #4509	; 0x119d
 8006bf6:	4945      	ldr	r1, [pc, #276]	; (8006d0c <lfs_mount_+0x420>)
 8006bf8:	4845      	ldr	r0, [pc, #276]	; (8006d10 <lfs_mount_+0x424>)
 8006bfa:	f005 f9b9 	bl	800bf70 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8006bfe:	f06f 0315 	mvn.w	r3, #21
 8006c02:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006c04:	e01a      	b.n	8006c3c <lfs_mount_+0x350>
            }

            lfs->block_count = superblock.block_count;
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	66da      	str	r2, [r3, #108]	; 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d012      	beq.n	8006c3e <lfs_mount_+0x352>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	4939      	ldr	r1, [pc, #228]	; (8006d08 <lfs_mount_+0x41c>)
 8006c22:	9101      	str	r1, [sp, #4]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	4613      	mov	r3, r2
 8006c28:	f241 12a6 	movw	r2, #4518	; 0x11a6
 8006c2c:	4937      	ldr	r1, [pc, #220]	; (8006d0c <lfs_mount_+0x420>)
 8006c2e:	4839      	ldr	r0, [pc, #228]	; (8006d14 <lfs_mount_+0x428>)
 8006c30:	f005 f99e 	bl	800bf70 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8006c34:	f06f 0315 	mvn.w	r3, #21
 8006c38:	667b      	str	r3, [r7, #100]	; 0x64
                goto cleanup;
 8006c3a:	bf00      	nop
            goto cleanup;
 8006c3c:	e05c      	b.n	8006cf8 <lfs_mount_+0x40c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fc f950 	bl	8002ef0 <lfs_dir_getgstate>
 8006c50:	6678      	str	r0, [r7, #100]	; 0x64
        if (err) {
 8006c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d14e      	bne.n	8006cf6 <lfs_mount_+0x40a>
    while (!lfs_pair_isnull(dir.tail)) {
 8006c58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006c5c:	3318      	adds	r3, #24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fa fabc 	bl	80011dc <lfs_pair_isnull>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f083 0301 	eor.w	r3, r3, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f47f ae61 	bne.w	8006934 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3330      	adds	r3, #48	; 0x30
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fa fc0b 	bl	8001492 <lfs_gstate_iszero>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f083 0301 	eor.w	r3, r3, #1
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <lfs_mount_+0x3be>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c94:	481c      	ldr	r0, [pc, #112]	; (8006d08 <lfs_mount_+0x41c>)
 8006c96:	9002      	str	r0, [sp, #8]
 8006c98:	9201      	str	r2, [sp, #4]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	f241 12b6 	movw	r2, #4534	; 0x11b6
 8006ca2:	491a      	ldr	r1, [pc, #104]	; (8006d0c <lfs_mount_+0x420>)
 8006ca4:	481c      	ldr	r0, [pc, #112]	; (8006d18 <lfs_mount_+0x42c>)
 8006ca6:	f005 f963 	bl	800bf70 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa fb37 	bl	8001322 <lfs_tag_isvalid>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f083 0301 	eor.w	r3, r3, #1
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	441a      	add	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	333c      	adds	r3, #60	; 0x3c
 8006cce:	3230      	adds	r2, #48	; 0x30
 8006cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006cde:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ce2:	fb01 f202 	mul.w	r2, r1, r2
 8006ce6:	1a9a      	subs	r2, r3, r2
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fa fde7 	bl	80018c0 <lfs_alloc_drop>

    return 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e004      	b.n	8006d00 <lfs_mount_+0x414>
            goto cleanup;
 8006cf6:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f80f 	bl	8006d1c <lfs_unmount_>
    return err;
 8006cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	376c      	adds	r7, #108	; 0x6c
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d08:	0800cfb4 	.word	0x0800cfb4
 8006d0c:	0800ce9c 	.word	0x0800ce9c
 8006d10:	0800d7a4 	.word	0x0800d7a4
 8006d14:	0800d7d8 	.word	0x0800d7d8
 8006d18:	0800d808 	.word	0x0800d808

08006d1c <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fd07 	bl	8006738 <lfs_deinit>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b0a1      	sub	sp, #132	; 0x84
 8006d38:	af04      	add	r7, sp, #16
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8006d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d46:	2220      	movs	r2, #32
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f005 fa6e 	bl	800c22c <memset>
 8006d50:	2301      	movs	r3, #1
 8006d52:	643b      	str	r3, [r7, #64]	; 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006d54:	4a9a      	ldr	r2, [pc, #616]	; (8006fc0 <lfs_fs_traverse_+0x28c>)
 8006d56:	f107 031c 	add.w	r3, r7, #28
 8006d5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d5e:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	66fb      	str	r3, [r7, #108]	; 0x6c
    lfs_size_t tortoise_period = 1;
 8006d66:	2301      	movs	r3, #1
 8006d68:	66bb      	str	r3, [r7, #104]	; 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8006d6a:	e0c0      	b.n	8006eee <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8006d6c:	f107 021c 	add.w	r2, r7, #28
 8006d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d74:	3318      	adds	r3, #24
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fa fa72 	bl	8001262 <lfs_pair_issync>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8006d84:	4b8f      	ldr	r3, [pc, #572]	; (8006fc4 <lfs_fs_traverse_+0x290>)
 8006d86:	f241 2211 	movw	r2, #4625	; 0x1211
 8006d8a:	498f      	ldr	r1, [pc, #572]	; (8006fc8 <lfs_fs_traverse_+0x294>)
 8006d8c:	488f      	ldr	r0, [pc, #572]	; (8006fcc <lfs_fs_traverse_+0x298>)
 8006d8e:	f005 f8ef 	bl	800bf70 <iprintf>
            return LFS_ERR_CORRUPT;
 8006d92:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8006d96:	e10f      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8006d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d108      	bne.n	8006db2 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8006da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da6:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	66fb      	str	r3, [r7, #108]	; 0x6c
            tortoise_period *= 2;
 8006dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        tortoise_i += 1;
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db4:	3301      	adds	r3, #1
 8006db6:	66fb      	str	r3, [r7, #108]	; 0x6c

        for (int i = 0; i < 2; i++) {
 8006db8:	2300      	movs	r3, #0
 8006dba:	667b      	str	r3, [r7, #100]	; 0x64
 8006dbc:	e013      	b.n	8006de6 <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8006dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc0:	3306      	adds	r3, #6
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	3370      	adds	r3, #112	; 0x70
 8006dc6:	443b      	add	r3, r7
 8006dc8:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
 8006dd4:	6478      	str	r0, [r7, #68]	; 0x44
            if (err) {
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <lfs_fs_traverse_+0xac>
                return err;
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dde:	e0eb      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8006de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de2:	3301      	adds	r3, #1
 8006de4:	667b      	str	r3, [r7, #100]	; 0x64
 8006de6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	dde8      	ble.n	8006dbe <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8006dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df0:	f103 0218 	add.w	r2, r3, #24
 8006df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df8:	4619      	mov	r1, r3
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7fc f85c 	bl	8002eb8 <lfs_dir_fetch>
 8006e00:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (err) {
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <lfs_fs_traverse_+0xd8>
            return err;
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	e0d5      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e12:	e067      	b.n	8006ee4 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8006e14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e18:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8006e1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e1e:	f043 0308 	orr.w	r3, r3, #8
 8006e22:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006e26:	f107 0214 	add.w	r2, r7, #20
 8006e2a:	9200      	str	r2, [sp, #0]
 8006e2c:	4a68      	ldr	r2, [pc, #416]	; (8006fd0 <lfs_fs_traverse_+0x29c>)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7fa ff3c 	bl	8001cac <lfs_dir_get>
 8006e34:	64b8      	str	r0, [r7, #72]	; 0x48
            if (tag < 0) {
 8006e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da05      	bge.n	8006e48 <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8006e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3e:	f113 0f02 	cmn.w	r3, #2
 8006e42:	d049      	beq.n	8006ed8 <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8006e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e46:	e0b7      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fa fc15 	bl	800167c <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8006e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fa faa1 	bl	800139c <lfs_tag_type3>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f240 2302 	movw	r3, #514	; 0x202
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d113      	bne.n	8006e8e <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	9202      	str	r2, [sp, #8]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	9201      	str	r2, [sp, #4]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	4603      	mov	r3, r0
 8006e78:	460a      	mov	r2, r1
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7fe f901 	bl	8005084 <lfs_ctz_traverse>
 8006e82:	64f8      	str	r0, [r7, #76]	; 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8006e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d027      	beq.n	8006eda <lfs_fs_traverse_+0x1a6>
                    return err;
 8006e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8c:	e094      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d022      	beq.n	8006eda <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8006e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fa fa80 	bl	800139c <lfs_tag_type3>
 8006e9c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8006e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea2:	d11a      	bne.n	8006eda <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea8:	e012      	b.n	8006ed0 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	f107 0214 	add.w	r2, r7, #20
 8006eb2:	4413      	add	r3, r2
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
 8006ebe:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if (err) {
 8006ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <lfs_fs_traverse_+0x196>
                        return err;
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	e076      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8006eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ecc:	3301      	adds	r3, #1
 8006ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	dde9      	ble.n	8006eaa <lfs_fs_traverse_+0x176>
 8006ed6:	e000      	b.n	8006eda <lfs_fs_traverse_+0x1a6>
                    continue;
 8006ed8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8006eda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ede:	3301      	adds	r3, #1
 8006ee0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006ee4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006ee6:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d392      	bcc.n	8006e14 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8006eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fa f971 	bl	80011dc <lfs_pair_isnull>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f083 0301 	eor.w	r3, r3, #1
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f af32 	bne.w	8006d6c <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f0e:	e04f      	b.n	8006fb0 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8006f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f12:	799b      	ldrb	r3, [r3, #6]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d147      	bne.n	8006fa8 <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8006f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01d      	beq.n	8006f60 <lfs_fs_traverse_+0x22c>
 8006f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d117      	bne.n	8006f60 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f32:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f3a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	9202      	str	r2, [sp, #8]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	9201      	str	r2, [sp, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4623      	mov	r3, r4
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7fe f898 	bl	8005084 <lfs_ctz_traverse>
 8006f54:	6578      	str	r0, [r7, #84]	; 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8006f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <lfs_fs_traverse_+0x22c>
                return err;
 8006f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5e:	e02b      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8006f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01e      	beq.n	8006faa <lfs_fs_traverse_+0x276>
 8006f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d118      	bne.n	8006faa <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8006f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f7a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f82:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	9202      	str	r2, [sp, #8]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	9201      	str	r2, [sp, #4]
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4623      	mov	r3, r4
 8006f94:	4602      	mov	r2, r0
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7fe f874 	bl	8005084 <lfs_ctz_traverse>
 8006f9c:	6538      	str	r0, [r7, #80]	; 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8006f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <lfs_fs_traverse_+0x276>
                return err;
 8006fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fa6:	e007      	b.n	8006fb8 <lfs_fs_traverse_+0x284>
            continue;
 8006fa8:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8006faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ac      	bne.n	8006f10 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3774      	adds	r7, #116	; 0x74
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd90      	pop	{r4, r7, pc}
 8006fc0:	0800cff8 	.word	0x0800cff8
 8006fc4:	0800cfb4 	.word	0x0800cfb4
 8006fc8:	0800ce9c 	.word	0x0800ce9c
 8006fcc:	0800d664 	.word	0x0800d664
 8006fd0:	700ffc00 	.word	0x700ffc00

08006fd4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	; 0x28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006fec:	4a2d      	ldr	r2, [pc, #180]	; (80070a4 <lfs_fs_pred+0xd0>)
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ff6:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t tortoise_period = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8007002:	e03e      	b.n	8007082 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3318      	adds	r3, #24
 8007008:	f107 0214 	add.w	r2, r7, #20
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fa f927 	bl	8001262 <lfs_pair_issync>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800701a:	4b23      	ldr	r3, [pc, #140]	; (80070a8 <lfs_fs_pred+0xd4>)
 800701c:	f241 226f 	movw	r2, #4719	; 0x126f
 8007020:	4922      	ldr	r1, [pc, #136]	; (80070ac <lfs_fs_pred+0xd8>)
 8007022:	4823      	ldr	r0, [pc, #140]	; (80070b0 <lfs_fs_pred+0xdc>)
 8007024:	f004 ffa4 	bl	800bf70 <iprintf>
            return LFS_ERR_CORRUPT;
 8007028:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800702c:	e036      	b.n	800709c <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 800702e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	429a      	cmp	r2, r3
 8007034:	d10a      	bne.n	800704c <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
            tortoise_period *= 2;
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	3301      	adds	r3, #1
 8007050:	627b      	str	r3, [r7, #36]	; 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3318      	adds	r3, #24
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	4618      	mov	r0, r3
 800705a:	f7fa f8d9 	bl	8001210 <lfs_pair_cmp>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <lfs_fs_pred+0x94>
            return 0;
 8007064:	2300      	movs	r3, #0
 8007066:	e019      	b.n	800709c <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3318      	adds	r3, #24
 800706c:	461a      	mov	r2, r3
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7fb ff21 	bl	8002eb8 <lfs_dir_fetch>
 8007076:	61f8      	str	r0, [r7, #28]
        if (err) {
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <lfs_fs_pred+0xae>
            return err;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	e00c      	b.n	800709c <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3318      	adds	r3, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fa f8a8 	bl	80011dc <lfs_pair_isnull>
 800708c:	4603      	mov	r3, r0
 800708e:	f083 0301 	eor.w	r3, r3, #1
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1b5      	bne.n	8007004 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007098:	f06f 0301 	mvn.w	r3, #1
}
 800709c:	4618      	mov	r0, r3
 800709e:	3728      	adds	r7, #40	; 0x28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	0800cff8 	.word	0x0800cff8
 80070a8:	0800cfb4 	.word	0x0800cfb4
 80070ac:	0800ce9c 	.word	0x0800ce9c
 80070b0:	0800d664 	.word	0x0800d664

080070b4 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80070b4:	b5b0      	push	{r4, r5, r7, lr}
 80070b6:	b08e      	sub	sp, #56	; 0x38
 80070b8:	af04      	add	r7, sp, #16
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80070d4:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070da:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80070e4:	2108      	movs	r1, #8
 80070e6:	9103      	str	r1, [sp, #12]
 80070e8:	f107 0110 	add.w	r1, r7, #16
 80070ec:	9102      	str	r1, [sp, #8]
 80070ee:	9201      	str	r2, [sp, #4]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	462b      	mov	r3, r5
 80070f4:	4622      	mov	r2, r4
 80070f6:	4601      	mov	r1, r0
 80070f8:	6a38      	ldr	r0, [r7, #32]
 80070fa:	f7f9 fceb 	bl	8000ad4 <lfs_bd_read>
 80070fe:	61b8      	str	r0, [r7, #24]
    if (err) {
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <lfs_fs_parent_match+0x56>
        return err;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	e012      	b.n	8007130 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	4618      	mov	r0, r3
 8007110:	f7fa f8d3 	bl	80012ba <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	1d1a      	adds	r2, r3, #4
 8007118:	f107 0310 	add.w	r3, r7, #16
 800711c:	4611      	mov	r1, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f7fa f876 	bl	8001210 <lfs_pair_cmp>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	bf14      	ite	ne
 800712a:	2301      	movne	r3, #1
 800712c:	2300      	moveq	r3, #0
 800712e:	b2db      	uxtb	r3, r3
}
 8007130:	4618      	mov	r0, r3
 8007132:	3728      	adds	r7, #40	; 0x28
 8007134:	46bd      	mov	sp, r7
 8007136:	bdb0      	pop	{r4, r5, r7, pc}

08007138 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b090      	sub	sp, #64	; 0x40
 800713c:	af04      	add	r7, sp, #16
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8007150:	4a33      	ldr	r2, [pc, #204]	; (8007220 <lfs_fs_parent+0xe8>)
 8007152:	f107 031c 	add.w	r3, r7, #28
 8007156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800715a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 800715e:	2301      	movs	r3, #1
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t tortoise_period = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8007166:	e04a      	b.n	80071fe <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3318      	adds	r3, #24
 800716c:	f107 021c 	add.w	r2, r7, #28
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f7fa f875 	bl	8001262 <lfs_pair_issync>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 800717e:	4b29      	ldr	r3, [pc, #164]	; (8007224 <lfs_fs_parent+0xec>)
 8007180:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8007184:	4928      	ldr	r1, [pc, #160]	; (8007228 <lfs_fs_parent+0xf0>)
 8007186:	4829      	ldr	r0, [pc, #164]	; (800722c <lfs_fs_parent+0xf4>)
 8007188:	f004 fef2 	bl	800bf70 <iprintf>
            return LFS_ERR_CORRUPT;
 800718c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8007190:	e042      	b.n	8007218 <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8007192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	429a      	cmp	r2, r3
 8007198:	d10a      	bne.n	80071b0 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            tortoise_period *= 2;
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        tortoise_i += 1;
 80071b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b2:	3301      	adds	r3, #1
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80071c4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	3304      	adds	r3, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 80071cc:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 80071ce:	f107 0310 	add.w	r3, r7, #16
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	4b16      	ldr	r3, [pc, #88]	; (8007230 <lfs_fs_parent+0xf8>)
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	2300      	movs	r3, #0
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <lfs_fs_parent+0xfc>)
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	4b15      	ldr	r3, [pc, #84]	; (8007238 <lfs_fs_parent+0x100>)
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7fb fa97 	bl	8002718 <lfs_dir_fetchmatch>
 80071ea:	6278      	str	r0, [r7, #36]	; 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <lfs_fs_parent+0xc6>
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	f113 0f02 	cmn.w	r3, #2
 80071f8:	d001      	beq.n	80071fe <lfs_fs_parent+0xc6>
            return tag;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	e00c      	b.n	8007218 <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3318      	adds	r3, #24
 8007202:	4618      	mov	r0, r3
 8007204:	f7f9 ffea 	bl	80011dc <lfs_pair_isnull>
 8007208:	4603      	mov	r3, r0
 800720a:	f083 0301 	eor.w	r3, r3, #1
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1a9      	bne.n	8007168 <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8007214:	f06f 0301 	mvn.w	r3, #1
}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	0800cff8 	.word	0x0800cff8
 8007224:	0800cfb4 	.word	0x0800cfb4
 8007228:	0800ce9c 	.word	0x0800ce9c
 800722c:	0800d664 	.word	0x0800d664
 8007230:	080070b5 	.word	0x080070b5
 8007234:	20000008 	.word	0x20000008
 8007238:	7ff003ff 	.word	0x7ff003ff

0800723c <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
            | (uint32_t)needssuperblock << 9;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	025b      	lsls	r3, r3, #9
 8007254:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	4618      	mov	r0, r3
 8007276:	f7fa f8c8 	bl	800140a <lfs_tag_size>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <lfs_fs_preporphans+0x32>
 8007280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007284:	2b00      	cmp	r3, #0
 8007286:	da06      	bge.n	8007296 <lfs_fs_preporphans+0x32>
 8007288:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <lfs_fs_preporphans+0x90>)
 800728a:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <lfs_fs_preporphans+0x94>)
 800728c:	f241 21d1 	movw	r1, #4817	; 0x12d1
 8007290:	481a      	ldr	r0, [pc, #104]	; (80072fc <lfs_fs_preporphans+0x98>)
 8007292:	f004 fbd7 	bl	800ba44 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	4618      	mov	r0, r3
 800729c:	f7fa f8b5 	bl	800140a <lfs_tag_size>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80072a6:	d90a      	bls.n	80072be <lfs_fs_preporphans+0x5a>
 80072a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dd06      	ble.n	80072be <lfs_fs_preporphans+0x5a>
 80072b0:	4b13      	ldr	r3, [pc, #76]	; (8007300 <lfs_fs_preporphans+0x9c>)
 80072b2:	4a11      	ldr	r2, [pc, #68]	; (80072f8 <lfs_fs_preporphans+0x94>)
 80072b4:	f241 21d2 	movw	r1, #4818	; 0x12d2
 80072b8:	4810      	ldr	r0, [pc, #64]	; (80072fc <lfs_fs_preporphans+0x98>)
 80072ba:	f004 fbc3 	bl	800ba44 <__assert_func>
    lfs->gstate.tag += orphans;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c6:	441a      	add	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3330      	adds	r3, #48	; 0x30
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fa f8f6 	bl	80014ca <lfs_gstate_hasorphans>
 80072de:	4603      	mov	r3, r0
 80072e0:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80072e2:	ea44 0203 	orr.w	r2, r4, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd90      	pop	{r4, r7, pc}
 80072f4:	0800d840 	.word	0x0800d840
 80072f8:	0800e31c 	.word	0x0800e31c
 80072fc:	0800ce9c 	.word	0x0800ce9c
 8007300:	0800d878 	.word	0x0800d878

08007304 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	460b      	mov	r3, r1
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007316:	4a17      	ldr	r2, [pc, #92]	; (8007374 <lfs_fs_prepmove+0x70>)
 8007318:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800731a:	897b      	ldrh	r3, [r7, #10]
 800731c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007320:	428b      	cmp	r3, r1
 8007322:	d006      	beq.n	8007332 <lfs_fs_prepmove+0x2e>
 8007324:	897b      	ldrh	r3, [r7, #10]
 8007326:	029b      	lsls	r3, r3, #10
 8007328:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800732c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007330:	e000      	b.n	8007334 <lfs_fs_prepmove+0x30>
 8007332:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8007334:	431a      	orrs	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800733a:	897b      	ldrh	r3, [r7, #10]
 800733c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007340:	4293      	cmp	r3, r2
 8007342:	d002      	beq.n	800734a <lfs_fs_prepmove+0x46>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	e000      	b.n	800734c <lfs_fs_prepmove+0x48>
 800734a:	2300      	movs	r3, #0
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8007350:	897b      	ldrh	r3, [r7, #10]
 8007352:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <lfs_fs_prepmove+0x5e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	e000      	b.n	8007364 <lfs_fs_prepmove+0x60>
 8007362:	2300      	movs	r3, #0
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	bc80      	pop	{r7}
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	800003ff 	.word	0x800003ff

08007378 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b098      	sub	sp, #96	; 0x60
 800737c:	af02      	add	r7, sp, #8
 800737e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3330      	adds	r3, #48	; 0x30
 8007384:	4618      	mov	r0, r3
 8007386:	f7fa f8d5 	bl	8001534 <lfs_gstate_needssuperblock>
 800738a:	4603      	mov	r3, r0
 800738c:	f083 0301 	eor.w	r3, r3, #1
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <lfs_fs_desuperblock+0x22>
        return 0;
 8007396:	2300      	movs	r3, #0
 8007398:	e04e      	b.n	8007438 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1a      	ldr	r2, [r3, #32]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	4927      	ldr	r1, [pc, #156]	; (8007440 <lfs_fs_desuperblock+0xc8>)
 80073a4:	9101      	str	r1, [sp, #4]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	4613      	mov	r3, r2
 80073aa:	f241 22eb 	movw	r2, #4843	; 0x12eb
 80073ae:	4925      	ldr	r1, [pc, #148]	; (8007444 <lfs_fs_desuperblock+0xcc>)
 80073b0:	4825      	ldr	r0, [pc, #148]	; (8007448 <lfs_fs_desuperblock+0xd0>)
 80073b2:	f004 fddd 	bl	800bf70 <iprintf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f103 0220 	add.w	r2, r3, #32
 80073bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fb fd78 	bl	8002eb8 <lfs_dir_fetch>
 80073c8:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 80073ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <lfs_fs_desuperblock+0x5c>
        return err;
 80073d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d2:	e031      	b.n	8007438 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fa fa3f 	bl	8001858 <lfs_fs_disk_version>
 80073da:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 80073dc:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e2:	69db      	ldr	r3, [r3, #28]
    lfs_superblock_t superblock = {
 80073e4:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    lfs_superblock_t superblock = {
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
        .name_max    = lfs->name_max,
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    lfs_superblock_t superblock = {
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
        .file_max    = lfs->file_max,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    lfs_superblock_t superblock = {
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        .attr_max    = lfs->attr_max,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    lfs_superblock_t superblock = {
 80073fc:	633b      	str	r3, [r7, #48]	; 0x30
    };

    lfs_superblock_tole32(&superblock);
 80073fe:	f107 031c 	add.w	r3, r7, #28
 8007402:	4618      	mov	r0, r3
 8007404:	f7fa f9a2 	bl	800174c <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <lfs_fs_desuperblock+0xd4>)
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	f107 031c 	add.w	r3, r7, #28
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	f107 0214 	add.w	r2, r7, #20
 8007416:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800741a:	2301      	movs	r3, #1
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fd fb1f 	bl	8004a60 <lfs_dir_commit>
 8007422:	6578      	str	r0, [r7, #84]	; 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 8007424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <lfs_fs_desuperblock+0xb6>
        return err;
 800742a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742c:	e004      	b.n	8007438 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 800742e:	2100      	movs	r1, #0
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff ff03 	bl	800723c <lfs_fs_prepsuperblock>
    return 0;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3758      	adds	r7, #88	; 0x58
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	0800cfb4 	.word	0x0800cfb4
 8007444:	0800ce9c 	.word	0x0800ce9c
 8007448:	0800d8b0 	.word	0x0800d8b0
 800744c:	20100018 	.word	0x20100018

08007450 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8007450:	b5b0      	push	{r4, r5, r7, lr}
 8007452:	b094      	sub	sp, #80	; 0x50
 8007454:	af04      	add	r7, sp, #16
 8007456:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	333c      	adds	r3, #60	; 0x3c
 800745c:	4618      	mov	r0, r3
 800745e:	f7fa f856 	bl	800150e <lfs_gstate_hasmove>
 8007462:	4603      	mov	r3, r0
 8007464:	f083 0301 	eor.w	r3, r3, #1
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <lfs_fs_demove+0x22>
        return 0;
 800746e:	2300      	movs	r3, #0
 8007470:	e05b      	b.n	800752a <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747e:	4618      	mov	r0, r3
 8007480:	f7f9 ffb4 	bl	80013ec <lfs_tag_id>
 8007484:	4603      	mov	r3, r0
 8007486:	461a      	mov	r2, r3
 8007488:	4b2a      	ldr	r3, [pc, #168]	; (8007534 <lfs_fs_demove+0xe4>)
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	9201      	str	r2, [sp, #4]
 800748e:	9400      	str	r4, [sp, #0]
 8007490:	462b      	mov	r3, r5
 8007492:	f241 3213 	movw	r2, #4883	; 0x1313
 8007496:	4928      	ldr	r1, [pc, #160]	; (8007538 <lfs_fs_demove+0xe8>)
 8007498:	4828      	ldr	r0, [pc, #160]	; (800753c <lfs_fs_demove+0xec>)
 800749a:	f004 fd69 	bl	800bf70 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 ff7a 	bl	800139c <lfs_tag_type3>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d006      	beq.n	80074c2 <lfs_fs_demove+0x72>
 80074b4:	4b22      	ldr	r3, [pc, #136]	; (8007540 <lfs_fs_demove+0xf0>)
 80074b6:	4a23      	ldr	r2, [pc, #140]	; (8007544 <lfs_fs_demove+0xf4>)
 80074b8:	f241 311a 	movw	r1, #4890	; 0x131a
 80074bc:	481e      	ldr	r0, [pc, #120]	; (8007538 <lfs_fs_demove+0xe8>)
 80074be:	f004 fac1 	bl	800ba44 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80074c8:	f107 0318 	add.w	r3, r7, #24
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb fcf2 	bl	8002eb8 <lfs_dir_fetch>
 80074d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <lfs_fs_demove+0x90>
        return err;
 80074dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074de:	e024      	b.n	800752a <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7f9 ff81 	bl	80013ec <lfs_tag_id>
 80074ea:	4603      	mov	r3, r0
 80074ec:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80074ee:	2200      	movs	r2, #0
 80074f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ff05 	bl	8007304 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80074fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80074fc:	029b      	lsls	r3, r3, #10
 80074fe:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8007502:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	f107 0210 	add.w	r2, r7, #16
 8007510:	f107 0118 	add.w	r1, r7, #24
 8007514:	2301      	movs	r3, #1
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fd faa2 	bl	8004a60 <lfs_dir_commit>
 800751c:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <lfs_fs_demove+0xd8>
        return err;
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	e000      	b.n	800752a <lfs_fs_demove+0xda>
    }

    return 0;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3740      	adds	r7, #64	; 0x40
 800752e:	46bd      	mov	sp, r7
 8007530:	bdb0      	pop	{r4, r5, r7, pc}
 8007532:	bf00      	nop
 8007534:	0800cfb4 	.word	0x0800cfb4
 8007538:	0800ce9c 	.word	0x0800ce9c
 800753c:	0800d8e4 	.word	0x0800d8e4
 8007540:	0800d918 	.word	0x0800d918
 8007544:	0800e330 	.word	0x0800e330

08007548 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8007548:	b5b0      	push	{r4, r5, r7, lr}
 800754a:	b0b2      	sub	sp, #200	; 0xc8
 800754c:	af04      	add	r7, sp, #16
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3330      	adds	r3, #48	; 0x30
 8007558:	4618      	mov	r0, r3
 800755a:	f7f9 ffb6 	bl	80014ca <lfs_gstate_hasorphans>
 800755e:	4603      	mov	r3, r0
 8007560:	f083 0301 	eor.w	r3, r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <lfs_fs_deorphan+0x26>
        return 0;
 800756a:	2300      	movs	r3, #0
 800756c:	e187      	b.n	800787e <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007574:	e170      	b.n	8007858 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8007576:	f107 0308 	add.w	r3, r7, #8
 800757a:	2220      	movs	r2, #32
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f004 fe54 	bl	800c22c <memset>
 8007584:	2301      	movs	r3, #1
 8007586:	77fb      	strb	r3, [r7, #31]
 8007588:	2301      	movs	r3, #1
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 800758c:	2300      	movs	r3, #0
 800758e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 8007592:	e149      	b.n	8007828 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8007594:	f107 0308 	add.w	r3, r7, #8
 8007598:	f103 0218 	add.w	r2, r3, #24
 800759c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fb fc88 	bl	8002eb8 <lfs_dir_fetch>
 80075a8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
            if (err) {
 80075ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <lfs_fs_deorphan+0x72>
                return err;
 80075b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075b8:	e161      	b.n	800787e <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 80075ba:	7ffb      	ldrb	r3, [r7, #31]
 80075bc:	f083 0301 	eor.w	r3, r3, #1
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8126 	beq.w	8007814 <lfs_fs_deorphan+0x2cc>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80075c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	3318      	adds	r3, #24
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fdaf 	bl	8007138 <lfs_fs_parent>
 80075da:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80075de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	da07      	bge.n	80075f6 <lfs_fs_deorphan+0xae>
 80075e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075ea:	f113 0f02 	cmn.w	r3, #2
 80075ee:	d002      	beq.n	80075f6 <lfs_fs_deorphan+0xae>
                    return tag;
 80075f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075f4:	e143      	b.n	800787e <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80075f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f040 80ac 	bne.w	8007758 <lfs_fs_deorphan+0x210>
 8007600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007604:	f113 0f02 	cmn.w	r3, #2
 8007608:	f000 80a6 	beq.w	8007758 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800760c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007610:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007614:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4613      	mov	r3, r2
 800761c:	4a9a      	ldr	r2, [pc, #616]	; (8007888 <lfs_fs_deorphan+0x340>)
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fa fb44 	bl	8001cac <lfs_dir_get>
 8007624:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8007628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800762c:	2b00      	cmp	r3, #0
 800762e:	da02      	bge.n	8007636 <lfs_fs_deorphan+0xee>
                        return state;
 8007630:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007634:	e0eb      	b.n	800780e <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 8007636:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800763a:	4618      	mov	r0, r3
 800763c:	f7f9 fe3d 	bl	80012ba <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	f103 0218 	add.w	r2, r3, #24
 8007648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800764c:	4611      	mov	r1, r2
 800764e:	4618      	mov	r0, r3
 8007650:	f7f9 fe07 	bl	8001262 <lfs_pair_issync>
 8007654:	4603      	mov	r3, r0
 8007656:	f083 0301 	eor.w	r3, r3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d07b      	beq.n	8007758 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 8007660:	6a38      	ldr	r0, [r7, #32]
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007668:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800766c:	4c87      	ldr	r4, [pc, #540]	; (800788c <lfs_fs_deorphan+0x344>)
 800766e:	9403      	str	r4, [sp, #12]
 8007670:	9102      	str	r1, [sp, #8]
 8007672:	9201      	str	r2, [sp, #4]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	4603      	mov	r3, r0
 8007678:	f44f 529b 	mov.w	r2, #4960	; 0x1360
 800767c:	4984      	ldr	r1, [pc, #528]	; (8007890 <lfs_fs_deorphan+0x348>)
 800767e:	4885      	ldr	r0, [pc, #532]	; (8007894 <lfs_fs_deorphan+0x34c>)
 8007680:	f004 fc76 	bl	800bf70 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 8007684:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8007688:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3330      	adds	r3, #48	; 0x30
 8007690:	f107 0208 	add.w	r2, r7, #8
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7f9 ff60 	bl	800155c <lfs_gstate_hasmovehere>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01c      	beq.n	80076dc <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7f9 fea0 	bl	80013ec <lfs_tag_id>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80076ba:	4874      	ldr	r0, [pc, #464]	; (800788c <lfs_fs_deorphan+0x344>)
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	460b      	mov	r3, r1
 80076c4:	f241 326b 	movw	r2, #4971	; 0x136b
 80076c8:	4971      	ldr	r1, [pc, #452]	; (8007890 <lfs_fs_deorphan+0x348>)
 80076ca:	4873      	ldr	r0, [pc, #460]	; (8007898 <lfs_fs_deorphan+0x350>)
 80076cc:	f004 fc50 	bl	800bf70 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80076d0:	2200      	movs	r2, #0
 80076d2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff fe14 	bl	8007304 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 80076dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7f9 fe04 	bl	80012ee <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80076e6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80076ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <lfs_fs_deorphan+0x1ba>
 80076f2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80076f6:	029b      	lsls	r3, r3, #10
 80076f8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80076fc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8007700:	e000      	b.n	8007704 <lfs_fs_deorphan+0x1bc>
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800770e:	4b63      	ldr	r3, [pc, #396]	; (800789c <lfs_fs_deorphan+0x354>)
 8007710:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007714:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800771c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	2302      	movs	r3, #2
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fc fea0 	bl	800446c <lfs_dir_orphaningcommit>
 800772c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8007730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007734:	4618      	mov	r0, r3
 8007736:	f7f9 fdc0 	bl	80012ba <lfs_pair_fromle32>
                        if (state < 0) {
 800773a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800773e:	2b00      	cmp	r3, #0
 8007740:	da02      	bge.n	8007748 <lfs_fs_deorphan+0x200>
                            return state;
 8007742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 8007746:	e062      	b.n	800780e <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 8007748:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800774c:	2b03      	cmp	r3, #3
 800774e:	d16b      	bne.n	8007828 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8007756:	e067      	b.n	8007828 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8007758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800775c:	2b01      	cmp	r3, #1
 800775e:	d159      	bne.n	8007814 <lfs_fs_deorphan+0x2cc>
 8007760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007764:	f113 0f02 	cmn.w	r3, #2
 8007768:	d154      	bne.n	8007814 <lfs_fs_deorphan+0x2cc>
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d051      	beq.n	8007814 <lfs_fs_deorphan+0x2cc>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	4945      	ldr	r1, [pc, #276]	; (800788c <lfs_fs_deorphan+0x344>)
 8007776:	9101      	str	r1, [sp, #4]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	f241 328b 	movw	r2, #5003	; 0x138b
 8007780:	4943      	ldr	r1, [pc, #268]	; (8007890 <lfs_fs_deorphan+0x348>)
 8007782:	4847      	ldr	r0, [pc, #284]	; (80078a0 <lfs_fs_deorphan+0x358>)
 8007784:	f004 fbf4 	bl	800bf70 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800778e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fb fbab 	bl	8002ef0 <lfs_dir_getgstate>
 800779a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                    if (err) {
 800779e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <lfs_fs_deorphan+0x264>
                        return err;
 80077a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077aa:	e030      	b.n	800780e <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 80077ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077b0:	3318      	adds	r3, #24
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f9 fd9b 	bl	80012ee <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 80077b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077bc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80077c0:	051a      	lsls	r2, r3, #20
 80077c2:	4b38      	ldr	r3, [pc, #224]	; (80078a4 <lfs_fs_deorphan+0x35c>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	673b      	str	r3, [r7, #112]	; 0x70
 80077c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077cc:	3318      	adds	r3, #24
 80077ce:	677b      	str	r3, [r7, #116]	; 0x74
 80077d0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80077d4:	f107 0108 	add.w	r1, r7, #8
 80077d8:	2301      	movs	r3, #1
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fc fe46 	bl	800446c <lfs_dir_orphaningcommit>
 80077e0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 80077e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077e8:	3318      	adds	r3, #24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7f9 fd65 	bl	80012ba <lfs_pair_fromle32>
                    if (state < 0) {
 80077f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da02      	bge.n	80077fe <lfs_fs_deorphan+0x2b6>
                        return state;
 80077f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
                    return tag;
 80077fc:	e03f      	b.n	800787e <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 80077fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007802:	2b03      	cmp	r3, #3
 8007804:	d104      	bne.n	8007810 <lfs_fs_deorphan+0x2c8>
                        moreorphans = true;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800780c:	e00c      	b.n	8007828 <lfs_fs_deorphan+0x2e0>
                return err;
 800780e:	e036      	b.n	800787e <lfs_fs_deorphan+0x336>
                    }

                    // refetch tail
                    continue;
 8007810:	bf00      	nop
 8007812:	e009      	b.n	8007828 <lfs_fs_deorphan+0x2e0>
                }
            }

            pdir = dir;
 8007814:	f107 0408 	add.w	r4, r7, #8
 8007818:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800781c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007820:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	3318      	adds	r3, #24
 800782e:	4618      	mov	r0, r3
 8007830:	f7f9 fcd4 	bl	80011dc <lfs_pair_isnull>
 8007834:	4603      	mov	r3, r0
 8007836:	f083 0301 	eor.w	r3, r3, #1
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f aea9 	bne.w	8007594 <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 8007842:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <lfs_fs_deorphan+0x306>
 800784a:	2300      	movs	r3, #0
 800784c:	e002      	b.n	8007854 <lfs_fs_deorphan+0x30c>
 800784e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007852:	3301      	adds	r3, #1
 8007854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    while (pass < 2) {
 8007858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800785c:	2b01      	cmp	r3, #1
 800785e:	f77f ae8a 	ble.w	8007576 <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3330      	adds	r3, #48	; 0x30
 8007866:	4618      	mov	r0, r3
 8007868:	f7f9 fe42 	bl	80014f0 <lfs_gstate_getorphans>
 800786c:	4603      	mov	r3, r0
 800786e:	425b      	negs	r3, r3
 8007870:	b2db      	uxtb	r3, r3
 8007872:	b25b      	sxtb	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff fcf4 	bl	8007264 <lfs_fs_preporphans>
 800787c:	4603      	mov	r3, r0
}
 800787e:	4618      	mov	r0, r3
 8007880:	37b8      	adds	r7, #184	; 0xb8
 8007882:	46bd      	mov	sp, r7
 8007884:	bdb0      	pop	{r4, r5, r7, pc}
 8007886:	bf00      	nop
 8007888:	7ffffc00 	.word	0x7ffffc00
 800788c:	0800cfb4 	.word	0x0800cfb4
 8007890:	0800ce9c 	.word	0x0800ce9c
 8007894:	0800d94c 	.word	0x0800d94c
 8007898:	0800d990 	.word	0x0800d990
 800789c:	600ffc08 	.word	0x600ffc08
 80078a0:	0800d9d8 	.word	0x0800d9d8
 80078a4:	000ffc08 	.word	0x000ffc08

080078a8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fd61 	bl	8007378 <lfs_fs_desuperblock>
 80078b6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <lfs_fs_forceconsistency+0x1a>
        return err;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e013      	b.n	80078ea <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fdc4 	bl	8007450 <lfs_fs_demove>
 80078c8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <lfs_fs_forceconsistency+0x2c>
        return err;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e00a      	b.n	80078ea <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 80078d4:	2101      	movs	r1, #1
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fe36 	bl	8007548 <lfs_fs_deorphan>
 80078dc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <lfs_fs_forceconsistency+0x40>
        return err;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e000      	b.n	80078ea <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]
    return 0;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
	...

08007918 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8007924:	f107 0208 	add.w	r2, r7, #8
 8007928:	2300      	movs	r3, #0
 800792a:	4907      	ldr	r1, [pc, #28]	; (8007948 <lfs_fs_size_+0x30>)
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff fa01 	bl	8006d34 <lfs_fs_traverse_>
 8007932:	60f8      	str	r0, [r7, #12]
    if (err) {
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <lfs_fs_size_+0x26>
        return err;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	e000      	b.n	8007940 <lfs_fs_size_+0x28>
    }

    return size;
 800793e:	68bb      	ldr	r3, [r7, #8]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	080078f3 	.word	0x080078f3

0800794c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007956:	2300      	movs	r3, #0
 8007958:	60fb      	str	r3, [r7, #12]
    if (err) {
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <lfs_format+0x18>
        return err;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e005      	b.n	8007970 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fe ff0e 	bl	8006788 <lfs_format_>
 800796c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800796e:	68fb      	ldr	r3, [r7, #12]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <lfs_mount+0x18>
        return err;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	e005      	b.n	800799c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fe ffaa 	bl	80068ec <lfs_mount_>
 8007998:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800799a:	68fb      	ldr	r3, [r7, #12]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <lfs_remove+0x18>
        return err;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	e005      	b.n	80079c8 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fe fb7e 	bl	80060c0 <lfs_remove_>
 80079c4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80079c6:	68fb      	ldr	r3, [r7, #12]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
    if (err) {
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <lfs_file_open+0x1c>
        return err;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	e01a      	b.n	8007a22 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7f9 fee2 	bl	80017bc <lfs_mlist_isopen>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f083 0301 	eor.w	r3, r3, #1
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d106      	bne.n	8007a12 <lfs_file_open+0x42>
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <lfs_file_open+0x5c>)
 8007a06:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <lfs_file_open+0x60>)
 8007a08:	f241 719c 	movw	r1, #6044	; 0x179c
 8007a0c:	4809      	ldr	r0, [pc, #36]	; (8007a34 <lfs_file_open+0x64>)
 8007a0e:	f004 f819 	bl	800ba44 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7fd fd7f 	bl	800551c <lfs_file_open_>
 8007a1e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007a20:	697b      	ldr	r3, [r7, #20]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	0800da28 	.word	0x0800da28
 8007a30:	0800e340 	.word	0x0800e340
 8007a34:	0800ce9c 	.word	0x0800ce9c

08007a38 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <lfs_file_close+0x18>
        return err;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	e015      	b.n	8007a7c <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7f9 feb0 	bl	80017bc <lfs_mlist_isopen>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <lfs_file_close+0x38>
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <lfs_file_close+0x4c>)
 8007a64:	4a08      	ldr	r2, [pc, #32]	; (8007a88 <lfs_file_close+0x50>)
 8007a66:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
 8007a6a:	4808      	ldr	r0, [pc, #32]	; (8007a8c <lfs_file_close+0x54>)
 8007a6c:	f003 ffea 	bl	800ba44 <__assert_func>

    err = lfs_file_close_(lfs, file);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fd fd6a 	bl	800554c <lfs_file_close_>
 8007a78:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	0800da60 	.word	0x0800da60
 8007a88:	0800e350 	.word	0x0800e350
 8007a8c:	0800ce9c 	.word	0x0800ce9c

08007a90 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
    if (err) {
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <lfs_file_read+0x1c>
        return err;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	e017      	b.n	8007adc <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7f9 fe82 	bl	80017bc <lfs_mlist_isopen>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <lfs_file_read+0x3c>
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <lfs_file_read+0x54>)
 8007ac0:	4a09      	ldr	r2, [pc, #36]	; (8007ae8 <lfs_file_read+0x58>)
 8007ac2:	f241 71e2 	movw	r1, #6114	; 0x17e2
 8007ac6:	4809      	ldr	r0, [pc, #36]	; (8007aec <lfs_file_read+0x5c>)
 8007ac8:	f003 ffbc 	bl	800ba44 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7fe f886 	bl	8005be4 <lfs_file_read_>
 8007ad8:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007ada:	693b      	ldr	r3, [r7, #16]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	0800da60 	.word	0x0800da60
 8007ae8:	0800e360 	.word	0x0800e360
 8007aec:	0800ce9c 	.word	0x0800ce9c

08007af0 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
    if (err) {
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <lfs_file_write+0x1c>
        return err;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	e017      	b.n	8007b3c <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7f9 fe52 	bl	80017bc <lfs_mlist_isopen>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <lfs_file_write+0x3c>
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <lfs_file_write+0x54>)
 8007b20:	4a09      	ldr	r2, [pc, #36]	; (8007b48 <lfs_file_write+0x58>)
 8007b22:	f241 71f4 	movw	r1, #6132	; 0x17f4
 8007b26:	4809      	ldr	r0, [pc, #36]	; (8007b4c <lfs_file_write+0x5c>)
 8007b28:	f003 ff8c 	bl	800ba44 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f7fe f99c 	bl	8005e70 <lfs_file_write_>
 8007b38:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007b3a:	693b      	ldr	r3, [r7, #16]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	0800da60 	.word	0x0800da60
 8007b48:	0800e370 	.word	0x0800e370
 8007b4c:	0800ce9c 	.word	0x0800ce9c

08007b50 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
    if (err) {
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <lfs_file_seek+0x1c>
        return err;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	e017      	b.n	8007b9c <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7f9 fe22 	bl	80017bc <lfs_mlist_isopen>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d106      	bne.n	8007b8c <lfs_file_seek+0x3c>
 8007b7e:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <lfs_file_seek+0x54>)
 8007b80:	4a09      	ldr	r2, [pc, #36]	; (8007ba8 <lfs_file_seek+0x58>)
 8007b82:	f641 0106 	movw	r1, #6150	; 0x1806
 8007b86:	4809      	ldr	r0, [pc, #36]	; (8007bac <lfs_file_seek+0x5c>)
 8007b88:	f003 ff5c 	bl	800ba44 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7fe f9f0 	bl	8005f78 <lfs_file_seek_>
 8007b98:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8007b9a:	693b      	ldr	r3, [r7, #16]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3718      	adds	r7, #24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	0800da60 	.word	0x0800da60
 8007ba8:	0800e380 	.word	0x0800e380
 8007bac:	0800ce9c 	.word	0x0800ce9c

08007bb0 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
    if (err) {
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <lfs_mkdir+0x18>
        return err;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	e005      	b.n	8007bd4 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fc ff6e 	bl	8004aac <lfs_mkdir_>
 8007bd0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	e024      	b.n	8007c3c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	091a      	lsrs	r2, r3, #4
 8007bf6:	6939      	ldr	r1, [r7, #16]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	440b      	add	r3, r1
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	404b      	eors	r3, r1
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	4911      	ldr	r1, [pc, #68]	; (8007c50 <lfs_crc+0x74>)
 8007c0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c0e:	4053      	eors	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	091a      	lsrs	r2, r3, #4
 8007c16:	6939      	ldr	r1, [r7, #16]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	440b      	add	r3, r1
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	091b      	lsrs	r3, r3, #4
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	4619      	mov	r1, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	404b      	eors	r3, r1
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	4908      	ldr	r1, [pc, #32]	; (8007c50 <lfs_crc+0x74>)
 8007c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c32:	4053      	eors	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d3d6      	bcc.n	8007bf2 <lfs_crc+0x16>
    }

    return crc;
 8007c44:	68fb      	ldr	r3, [r7, #12]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bc80      	pop	{r7}
 8007c4e:	4770      	bx	lr
 8007c50:	0800e390 	.word	0x0800e390

08007c54 <lfs_read>:




int lfs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
	if(SPIF_ReadAddress(&spif_handle, 4096*block+off, buffer, size) !=  true) return -1;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	031a      	lsls	r2, r3, #12
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	18d1      	adds	r1, r2, r3
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	4808      	ldr	r0, [pc, #32]	; (8007c90 <lfs_read+0x3c>)
 8007c70:	f002 f85e 	bl	8009d30 <SPIF_ReadAddress>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f083 0301 	eor.w	r3, r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <lfs_read+0x32>
 8007c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c84:	e000      	b.n	8007c88 <lfs_read+0x34>
	return 0;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000004 	.word	0x20000004

08007c94 <lfs_write>:

int lfs_write(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
	SPIF_WriteAddress(&spif_handle, 4096*block+off, (void *)buffer, size);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	031a      	lsls	r2, r3, #12
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	18d1      	adds	r1, r2, r3
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	4804      	ldr	r0, [pc, #16]	; (8007cc0 <lfs_write+0x2c>)
 8007cb0:	f001 ffe7 	bl	8009c82 <SPIF_WriteAddress>
	return 0;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000004 	.word	0x20000004

08007cc4 <lfs_erase>:

int lfs_erase(const struct lfs_config *c, lfs_block_t block)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
	SPIF_EraseSector(&spif_handle, block);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	4803      	ldr	r0, [pc, #12]	; (8007ce0 <lfs_erase+0x1c>)
 8007cd2:	f001 ff53 	bl	8009b7c <SPIF_EraseSector>
	return 0;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000004 	.word	0x20000004

08007ce4 <lfs_sync>:

int lfs_sync(const struct lfs_config *c)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	return 0;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <init_storage>:




Storage_error_t init_storage(SPI_HandleTypeDef *spi_handle ,GPIO_TypeDef *gpio_handle, uint16_t pin)
{
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b0bd      	sub	sp, #244	; 0xf4
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	80fb      	strh	r3, [r7, #6]
	Storage_error_t err = STORAGE_OK ; 				  Info_firmware_t firmware ;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	is_initialized = 0 ;
 8007d0c:	4b91      	ldr	r3, [pc, #580]	; (8007f54 <init_storage+0x25c>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
	if(SPIF_Init(&spif_handle, spi_handle, gpio_handle, pin) == true )
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	488f      	ldr	r0, [pc, #572]	; (8007f58 <init_storage+0x260>)
 8007d1a:	f001 fedd 	bl	8009ad8 <SPIF_Init>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 810d 	beq.w	8007f40 <init_storage+0x248>
	{
		  if(mount() < 0)
 8007d26:	f000 f94b 	bl	8007fc0 <mount>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da03      	bge.n	8007d38 <init_storage+0x40>
		  {
#ifdef DEBUG
			  printf("::init_storage : lfs mount fail \n"); while(1);
 8007d30:	488a      	ldr	r0, [pc, #552]	; (8007f5c <init_storage+0x264>)
 8007d32:	f004 f98b 	bl	800c04c <puts>
 8007d36:	e7fe      	b.n	8007d36 <init_storage+0x3e>
			  err = STORAGE_MOUNT_FAIL ;
		  }
		  else
		  {
#ifdef DEBUG
			  printf("::init_storage : lfs mount ok \n");   printf("::init_storage : lfs mount ok \n");
 8007d38:	4889      	ldr	r0, [pc, #548]	; (8007f60 <init_storage+0x268>)
 8007d3a:	f004 f987 	bl	800c04c <puts>
 8007d3e:	4888      	ldr	r0, [pc, #544]	; (8007f60 <init_storage+0x268>)
 8007d40:	f004 f984 	bl	800c04c <puts>
#endif
			  if(get_store_info() != 1 )
 8007d44:	f000 f964 	bl	8008010 <get_store_info>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d04d      	beq.n	8007dea <init_storage+0xf2>
			  {
  				  _info_storage.folder_max_count = FOLDER_MAX_COUNT ;
 8007d4e:	4b85      	ldr	r3, [pc, #532]	; (8007f64 <init_storage+0x26c>)
 8007d50:	220c      	movs	r2, #12
 8007d52:	801a      	strh	r2, [r3, #0]
  				  _info_storage.file_max_count = FILE_MAX_COUNT ;
 8007d54:	4b83      	ldr	r3, [pc, #524]	; (8007f64 <init_storage+0x26c>)
 8007d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d5a:	805a      	strh	r2, [r3, #2]
  				  _info_storage.w_file_seek = FILE_SEEK_START;
 8007d5c:	4b81      	ldr	r3, [pc, #516]	; (8007f64 <init_storage+0x26c>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	815a      	strh	r2, [r3, #10]
  				  _info_storage.w_folder_seek = FOLDER_SEEK_START;
 8007d62:	4b80      	ldr	r3, [pc, #512]	; (8007f64 <init_storage+0x26c>)
 8007d64:	2201      	movs	r2, #1
 8007d66:	80da      	strh	r2, [r3, #6]
  				  _info_storage.r_file_seek = FILE_SEEK_START;
 8007d68:	4b7e      	ldr	r3, [pc, #504]	; (8007f64 <init_storage+0x26c>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	811a      	strh	r2, [r3, #8]
  				  _info_storage.r_folder_seek = FOLDER_SEEK_START ;
 8007d6e:	4b7d      	ldr	r3, [pc, #500]	; (8007f64 <init_storage+0x26c>)
 8007d70:	2201      	movs	r2, #1
 8007d72:	809a      	strh	r2, [r3, #4]
  				  if(set_store_info() == 1)
 8007d74:	f000 fad6 	bl	8008324 <set_store_info>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d132      	bne.n	8007de4 <init_storage+0xec>
  				  {
  					  for(int bcnt=1; bcnt<=12; bcnt++)
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d84:	e029      	b.n	8007dda <init_storage+0xe2>
  					  {
  						  char b[3] ; memset(b, 0, 3);
 8007d86:	f107 0310 	add.w	r3, r7, #16
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f004 fa4c 	bl	800c22c <memset>
  						  itoa(bcnt, b, 10);
 8007d94:	f107 0310 	add.w	r3, r7, #16
 8007d98:	220a      	movs	r2, #10
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8007da0:	f003 fe8a 	bl	800bab8 <itoa>
  						  if(lfs_mkdir(&littlefs, b) < 0 )
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	4619      	mov	r1, r3
 8007daa:	486f      	ldr	r0, [pc, #444]	; (8007f68 <init_storage+0x270>)
 8007dac:	f7ff ff00 	bl	8007bb0 <lfs_mkdir>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da06      	bge.n	8007dc4 <init_storage+0xcc>
  						  {
#ifdef DEBUG
  							  printf("fail to create storage dir %s\n", b);  while(1);
 8007db6:	f107 0310 	add.w	r3, r7, #16
 8007dba:	4619      	mov	r1, r3
 8007dbc:	486b      	ldr	r0, [pc, #428]	; (8007f6c <init_storage+0x274>)
 8007dbe:	f004 f8d7 	bl	800bf70 <iprintf>
 8007dc2:	e7fe      	b.n	8007dc2 <init_storage+0xca>
#endif
  							  err =  STORAGE_DIR_FAIL ;
  							  break;
  						  }
#ifdef DEBUG
  						  printf("create storage dir %s\n", b);
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4869      	ldr	r0, [pc, #420]	; (8007f70 <init_storage+0x278>)
 8007dcc:	f004 f8d0 	bl	800bf70 <iprintf>
  					  for(int bcnt=1; bcnt<=12; bcnt++)
 8007dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007dde:	2b0c      	cmp	r3, #12
 8007de0:	ddd1      	ble.n	8007d86 <init_storage+0x8e>
 8007de2:	e002      	b.n	8007dea <init_storage+0xf2>
#endif
  					  }
  				  }
  				  else
  				  {
  					  err = STORAGE_ERROR;;
 8007de4:	23ff      	movs	r3, #255	; 0xff
 8007de6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  				  }
			  }
			  if(err == STORAGE_OK)
 8007dea:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d155      	bne.n	8007e9e <init_storage+0x1a6>
			  {
				  if(get_firmware_info(&firmware) != 1 )
 8007df2:	f107 0314 	add.w	r3, r7, #20
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fde8 	bl	80089cc <get_firmware_info>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d04d      	beq.n	8007e9e <init_storage+0x1a6>
				  {
					  if(lfs_mkdir(&littlefs,FIRMWARE_DIR_NAME) < 0 )
 8007e02:	495c      	ldr	r1, [pc, #368]	; (8007f74 <init_storage+0x27c>)
 8007e04:	4858      	ldr	r0, [pc, #352]	; (8007f68 <init_storage+0x270>)
 8007e06:	f7ff fed3 	bl	8007bb0 <lfs_mkdir>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da03      	bge.n	8007e18 <init_storage+0x120>
					  {
#ifdef DEBUG
							  printf("fail to create firmware dir \n");  while(1);
 8007e10:	4859      	ldr	r0, [pc, #356]	; (8007f78 <init_storage+0x280>)
 8007e12:	f004 f91b 	bl	800c04c <puts>
 8007e16:	e7fe      	b.n	8007e16 <init_storage+0x11e>
#endif
							  err = STORAGE_DIR_FAIL;
					  }
					  else
					  {
						  firmware.checksum = 210;
 8007e18:	23d2      	movs	r3, #210	; 0xd2
 8007e1a:	61bb      	str	r3, [r7, #24]
						  firmware.size = 0 ;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	617b      	str	r3, [r7, #20]
						  memset(firmware.remote_firmware_url, 0,  sizeof(firmware.remote_firmware_url));
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	3318      	adds	r3, #24
 8007e26:	2280      	movs	r2, #128	; 0x80
 8007e28:	2100      	movs	r1, #0
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f004 f9fe 	bl	800c22c <memset>
						  memset(firmware.local_firmwre_dir, 0, sizeof(firmware.local_firmwre_dir));
 8007e30:	f107 0314 	add.w	r3, r7, #20
 8007e34:	3398      	adds	r3, #152	; 0x98
 8007e36:	2230      	movs	r2, #48	; 0x30
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f004 f9f6 	bl	800c22c <memset>
						  memset(firmware.version, 0 ,sizeof(firmware.version));
 8007e40:	f107 0314 	add.w	r3, r7, #20
 8007e44:	3308      	adds	r3, #8
 8007e46:	2210      	movs	r2, #16
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f004 f9ee 	bl	800c22c <memset>
						  strcpy((char *)firmware.remote_firmware_url, (char*)FIRMWARE_REMOTE_URL);
 8007e50:	f107 0314 	add.w	r3, r7, #20
 8007e54:	3318      	adds	r3, #24
 8007e56:	4a49      	ldr	r2, [pc, #292]	; (8007f7c <init_storage+0x284>)
 8007e58:	461c      	mov	r4, r3
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e5e:	c407      	stmia	r4!, {r0, r1, r2}
 8007e60:	8023      	strh	r3, [r4, #0]
 8007e62:	3402      	adds	r4, #2
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	7023      	strb	r3, [r4, #0]
						  strcpy((char*)firmware.local_firmwre_dir, (char*)FIRMWARE_DIR_NAME);
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	3398      	adds	r3, #152	; 0x98
 8007e6e:	4a41      	ldr	r2, [pc, #260]	; (8007f74 <init_storage+0x27c>)
 8007e70:	461c      	mov	r4, r3
 8007e72:	4613      	mov	r3, r2
 8007e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e76:	c407      	stmia	r4!, {r0, r1, r2}
 8007e78:	7023      	strb	r3, [r4, #0]
						  strcpy((char*)firmware.version, (char*)FIRMWARE_VERSION) ;
 8007e7a:	f107 0314 	add.w	r3, r7, #20
 8007e7e:	3308      	adds	r3, #8
 8007e80:	4a3f      	ldr	r2, [pc, #252]	; (8007f80 <init_storage+0x288>)
 8007e82:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e84:	c303      	stmia	r3!, {r0, r1}
 8007e86:	701a      	strb	r2, [r3, #0]

		  				  if(set_firmware_info(&firmware) != 1)
 8007e88:	f107 0314 	add.w	r3, r7, #20
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 ff81 	bl	8008d94 <set_firmware_info>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d002      	beq.n	8007e9e <init_storage+0x1a6>
		  				  {
		  					  err = STORAGE_ERROR;
 8007e98:	23ff      	movs	r3, #255	; 0xff
 8007e9a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		  				  }
					  }
				  }
			  }
		  }
		  if(err == STORAGE_OK)
 8007e9e:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d150      	bne.n	8007f48 <init_storage+0x250>
		  {

#ifdef DEBUG
			  printf("storage folder_max_count : %d\n ", _info_storage.folder_max_count);
 8007ea6:	4b2f      	ldr	r3, [pc, #188]	; (8007f64 <init_storage+0x26c>)
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4835      	ldr	r0, [pc, #212]	; (8007f84 <init_storage+0x28c>)
 8007eae:	f004 f85f 	bl	800bf70 <iprintf>
			  printf("storage file_max_count : %d\n ", _info_storage.file_max_count);
 8007eb2:	4b2c      	ldr	r3, [pc, #176]	; (8007f64 <init_storage+0x26c>)
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4833      	ldr	r0, [pc, #204]	; (8007f88 <init_storage+0x290>)
 8007eba:	f004 f859 	bl	800bf70 <iprintf>
			  printf("storage r_folder_seek : %d\n ", _info_storage.r_folder_seek);
 8007ebe:	4b29      	ldr	r3, [pc, #164]	; (8007f64 <init_storage+0x26c>)
 8007ec0:	889b      	ldrh	r3, [r3, #4]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4831      	ldr	r0, [pc, #196]	; (8007f8c <init_storage+0x294>)
 8007ec6:	f004 f853 	bl	800bf70 <iprintf>
			  printf("storage w_folder_seek : %d\n ", _info_storage.w_folder_seek);
 8007eca:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <init_storage+0x26c>)
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	482f      	ldr	r0, [pc, #188]	; (8007f90 <init_storage+0x298>)
 8007ed2:	f004 f84d 	bl	800bf70 <iprintf>
			  printf("storage r_file_seek : %d\n ", _info_storage.r_file_seek);
 8007ed6:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <init_storage+0x26c>)
 8007ed8:	891b      	ldrh	r3, [r3, #8]
 8007eda:	4619      	mov	r1, r3
 8007edc:	482d      	ldr	r0, [pc, #180]	; (8007f94 <init_storage+0x29c>)
 8007ede:	f004 f847 	bl	800bf70 <iprintf>
			  printf("storage w_file_seek : %d\n ", _info_storage.w_file_seek);
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <init_storage+0x26c>)
 8007ee4:	895b      	ldrh	r3, [r3, #10]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	482b      	ldr	r0, [pc, #172]	; (8007f98 <init_storage+0x2a0>)
 8007eea:	f004 f841 	bl	800bf70 <iprintf>

			  printf("firmware version : %s\n ", firmware.version);
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4829      	ldr	r0, [pc, #164]	; (8007f9c <init_storage+0x2a4>)
 8007ef8:	f004 f83a 	bl	800bf70 <iprintf>
			  printf("firmware size : %lu \n ", firmware.size);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4619      	mov	r1, r3
 8007f00:	4827      	ldr	r0, [pc, #156]	; (8007fa0 <init_storage+0x2a8>)
 8007f02:	f004 f835 	bl	800bf70 <iprintf>
			  printf("firmware checksum : %lu \n ", firmware.checksum);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4826      	ldr	r0, [pc, #152]	; (8007fa4 <init_storage+0x2ac>)
 8007f0c:	f004 f830 	bl	800bf70 <iprintf>
			  printf("firmware remote_firmware_url : %s\n ", firmware.remote_firmware_url);
 8007f10:	f107 0314 	add.w	r3, r7, #20
 8007f14:	3318      	adds	r3, #24
 8007f16:	4619      	mov	r1, r3
 8007f18:	4823      	ldr	r0, [pc, #140]	; (8007fa8 <init_storage+0x2b0>)
 8007f1a:	f004 f829 	bl	800bf70 <iprintf>
			  printf("firmware local_firmwre_dir : %s\n ", firmware.local_firmwre_dir);
 8007f1e:	f107 0314 	add.w	r3, r7, #20
 8007f22:	3398      	adds	r3, #152	; 0x98
 8007f24:	4619      	mov	r1, r3
 8007f26:	4821      	ldr	r0, [pc, #132]	; (8007fac <init_storage+0x2b4>)
 8007f28:	f004 f822 	bl	800bf70 <iprintf>
#endif
			 _storage.push = save_data ;
 8007f2c:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <init_storage+0x2b8>)
 8007f2e:	4a21      	ldr	r2, [pc, #132]	; (8007fb4 <init_storage+0x2bc>)
 8007f30:	601a      	str	r2, [r3, #0]
			 _storage.pop = read_data ;
 8007f32:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <init_storage+0x2b8>)
 8007f34:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <init_storage+0x2c0>)
 8007f36:	605a      	str	r2, [r3, #4]

			 is_initialized = 1 ;
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <init_storage+0x25c>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <init_storage+0x250>
		  }
	}
	else
	{
#ifdef DEBUG
		  printf("Flash chip  error ... \n");	while(1);
 8007f40:	481e      	ldr	r0, [pc, #120]	; (8007fbc <init_storage+0x2c4>)
 8007f42:	f004 f883 	bl	800c04c <puts>
 8007f46:	e7fe      	b.n	8007f46 <init_storage+0x24e>
#endif
		  err = STORAGE_FLASH_ERROR ;
	}
	return err ;
 8007f48:	f997 30ef 	ldrsb.w	r3, [r7, #239]	; 0xef
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	37f4      	adds	r7, #244	; 0xf4
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}
 8007f54:	20000230 	.word	0x20000230
 8007f58:	20000004 	.word	0x20000004
 8007f5c:	0800dad0 	.word	0x0800dad0
 8007f60:	0800daf4 	.word	0x0800daf4
 8007f64:	20000224 	.word	0x20000224
 8007f68:	2000019c 	.word	0x2000019c
 8007f6c:	0800db14 	.word	0x0800db14
 8007f70:	0800db34 	.word	0x0800db34
 8007f74:	0800db4c 	.word	0x0800db4c
 8007f78:	0800db5c 	.word	0x0800db5c
 8007f7c:	0800db7c 	.word	0x0800db7c
 8007f80:	0800db8c 	.word	0x0800db8c
 8007f84:	0800db98 	.word	0x0800db98
 8007f88:	0800dbb8 	.word	0x0800dbb8
 8007f8c:	0800dbd8 	.word	0x0800dbd8
 8007f90:	0800dbf8 	.word	0x0800dbf8
 8007f94:	0800dc18 	.word	0x0800dc18
 8007f98:	0800dc34 	.word	0x0800dc34
 8007f9c:	0800dc50 	.word	0x0800dc50
 8007fa0:	0800dc68 	.word	0x0800dc68
 8007fa4:	0800dc80 	.word	0x0800dc80
 8007fa8:	0800dc9c 	.word	0x0800dc9c
 8007fac:	0800dcc0 	.word	0x0800dcc0
 8007fb0:	2000021c 	.word	0x2000021c
 8007fb4:	080085c9 	.word	0x080085c9
 8007fb8:	080087d9 	.word	0x080087d9
 8007fbc:	0800dce4 	.word	0x0800dce4

08007fc0 <mount>:
Storage_t* get_storage_instance()
{
	return ((is_initialized == 1) ? &_storage : NULL) ;
}

static int mount() {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
	int err = 0 ;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	607b      	str	r3, [r7, #4]
    lfs_format(&littlefs, &littlefs_config);
 8007fca:	490e      	ldr	r1, [pc, #56]	; (8008004 <mount+0x44>)
 8007fcc:	480e      	ldr	r0, [pc, #56]	; (8008008 <mount+0x48>)
 8007fce:	f7ff fcbd 	bl	800794c <lfs_format>
	err = lfs_mount(&littlefs, &littlefs_config);
 8007fd2:	490c      	ldr	r1, [pc, #48]	; (8008004 <mount+0x44>)
 8007fd4:	480c      	ldr	r0, [pc, #48]	; (8008008 <mount+0x48>)
 8007fd6:	f7ff fccf 	bl	8007978 <lfs_mount>
 8007fda:	6078      	str	r0, [r7, #4]
	if(err < 0)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	da0b      	bge.n	8007ffa <mount+0x3a>
	{
#ifdef DEBUG
		printf("mount:lfs mount fail ... formating ..\n");
 8007fe2:	480a      	ldr	r0, [pc, #40]	; (800800c <mount+0x4c>)
 8007fe4:	f004 f832 	bl	800c04c <puts>
#endif
        lfs_format(&littlefs, &littlefs_config);
 8007fe8:	4906      	ldr	r1, [pc, #24]	; (8008004 <mount+0x44>)
 8007fea:	4807      	ldr	r0, [pc, #28]	; (8008008 <mount+0x48>)
 8007fec:	f7ff fcae 	bl	800794c <lfs_format>
        err = lfs_mount(&littlefs, &littlefs_config);
 8007ff0:	4904      	ldr	r1, [pc, #16]	; (8008004 <mount+0x44>)
 8007ff2:	4805      	ldr	r0, [pc, #20]	; (8008008 <mount+0x48>)
 8007ff4:	f7ff fcc0 	bl	8007978 <lfs_mount>
 8007ff8:	6078      	str	r0, [r7, #4]
	}
    return err;
 8007ffa:	687b      	ldr	r3, [r7, #4]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000024 	.word	0x20000024
 8008008:	2000019c 	.word	0x2000019c
 800800c:	0800dcfc 	.word	0x0800dcfc

08008010 <get_store_info>:
}



static int get_store_info()
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b0f4      	sub	sp, #464	; 0x1d0
 8008014:	af00      	add	r7, sp, #0
	int success = 0 ;
 8008016:	2300      	movs	r3, #0
 8008018:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	int index = 0 , got_key = 0, got_value=0 , key_index =0 , value_index = 0 ;
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008022:	2300      	movs	r3, #0
 8008024:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800802e:	2300      	movs	r3, #0
 8008030:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008034:	2300      	movs	r3, #0
 8008036:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	uint8_t lfs_read_buffer[STORAGE_INFO_FILE_SIZE];
	lfs_file_t info_file;

	char key_buff[48], value_buff[48];

	memset(lfs_read_buffer, 0, STORAGE_INFO_FILE_SIZE);
 800803a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800803e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f004 f8f1 	bl	800c22c <memset>

	if( lfs_file_open(&littlefs, &info_file, STORAGE_INFO_FILE_NAME, LFS_O_RDWR ) < 0 )
 800804a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800804e:	2303      	movs	r3, #3
 8008050:	4aac      	ldr	r2, [pc, #688]	; (8008304 <get_store_info+0x2f4>)
 8008052:	48ad      	ldr	r0, [pc, #692]	; (8008308 <get_store_info+0x2f8>)
 8008054:	f7ff fcbc 	bl	80079d0 <lfs_file_open>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	da04      	bge.n	8008068 <get_store_info+0x58>
	{
#ifdef DEBUG
			printf("get_store_info -> fail to open %s from save_info \n", STORAGE_INFO_FILE_NAME);
 800805e:	49a9      	ldr	r1, [pc, #676]	; (8008304 <get_store_info+0x2f4>)
 8008060:	48aa      	ldr	r0, [pc, #680]	; (800830c <get_store_info+0x2fc>)
 8008062:	f003 ff85 	bl	800bf70 <iprintf>
 8008066:	e145      	b.n	80082f4 <get_store_info+0x2e4>
#endif
	}
	else
	{
		  if( lfs_file_read(&littlefs, &info_file, lfs_read_buffer, STORAGE_INFO_FILE_SIZE) < 0 )
 8008068:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800806c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008074:	48a4      	ldr	r0, [pc, #656]	; (8008308 <get_store_info+0x2f8>)
 8008076:	f7ff fd0b 	bl	8007a90 <lfs_file_read>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	da04      	bge.n	800808a <get_store_info+0x7a>
		  {
#ifdef DEBUG
			  printf("get_store_info -> fail to read %s from save_info \n", STORAGE_INFO_FILE_NAME); while(1);
 8008080:	49a0      	ldr	r1, [pc, #640]	; (8008304 <get_store_info+0x2f4>)
 8008082:	48a3      	ldr	r0, [pc, #652]	; (8008310 <get_store_info+0x300>)
 8008084:	f003 ff74 	bl	800bf70 <iprintf>
 8008088:	e7fe      	b.n	8008088 <get_store_info+0x78>
#endif
		  }
		  else
		  {
#ifdef DEBUG
			  printf("get_store_info ->  %s  :::  %s \n", STORAGE_INFO_FILE_NAME, lfs_read_buffer);
 800808a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800808e:	461a      	mov	r2, r3
 8008090:	499c      	ldr	r1, [pc, #624]	; (8008304 <get_store_info+0x2f4>)
 8008092:	48a0      	ldr	r0, [pc, #640]	; (8008314 <get_store_info+0x304>)
 8008094:	f003 ff6c 	bl	800bf70 <iprintf>
#endif
		      while(lfs_read_buffer[index])
 8008098:	e119      	b.n	80082ce <get_store_info+0x2be>
		      {
	        	  if(lfs_read_buffer[index] == '\"')
 800809a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800809e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80080a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80080a6:	4413      	add	r3, r2
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b22      	cmp	r3, #34	; 0x22
 80080ac:	f000 810a 	beq.w	80082c4 <get_store_info+0x2b4>
	        	  {

	        	  }
	        	  else  if(lfs_read_buffer[index] == '{' || lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 80080b0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80080b4:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80080b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80080bc:	4413      	add	r3, r2
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b7b      	cmp	r3, #123	; 0x7b
 80080c2:	d014      	beq.n	80080ee <get_store_info+0xde>
 80080c4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80080c8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80080cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80080d0:	4413      	add	r3, r2
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b2c      	cmp	r3, #44	; 0x2c
 80080d6:	d00a      	beq.n	80080ee <get_store_info+0xde>
 80080d8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80080dc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80080e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80080e4:	4413      	add	r3, r2
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b7d      	cmp	r3, #125	; 0x7d
 80080ea:	f040 80ad 	bne.w	8008248 <get_store_info+0x238>
		          {
			          if(lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 80080ee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80080f2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80080f6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80080fa:	4413      	add	r3, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b2c      	cmp	r3, #44	; 0x2c
 8008100:	d009      	beq.n	8008116 <get_store_info+0x106>
 8008102:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008106:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800810a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800810e:	4413      	add	r3, r2
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b7d      	cmp	r3, #125	; 0x7d
 8008114:	d174      	bne.n	8008200 <get_store_info+0x1f0>
			          {
#ifdef DEBUG
			        	  printf("get_store_info ->  key:%s   value:%s\n", key_buff, value_buff);
 8008116:	463a      	mov	r2, r7
 8008118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800811c:	4619      	mov	r1, r3
 800811e:	487e      	ldr	r0, [pc, #504]	; (8008318 <get_store_info+0x308>)
 8008120:	f003 ff26 	bl	800bf70 <iprintf>
#endif
			        	  for(int i=0; i<INFO_STORAGE_KEY_SIZE; i++)
 8008124:	2300      	movs	r3, #0
 8008126:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800812a:	e065      	b.n	80081f8 <get_store_info+0x1e8>
			        	  {
				              if(memcmp(key_buff, info_storage_keys[i], key_index) == 0)
 800812c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4413      	add	r3, r2
 8008136:	005b      	lsls	r3, r3, #1
 8008138:	4a78      	ldr	r2, [pc, #480]	; (800831c <get_store_info+0x30c>)
 800813a:	1899      	adds	r1, r3, r2
 800813c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008144:	4618      	mov	r0, r3
 8008146:	f004 f861 	bl	800c20c <memcmp>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d14e      	bne.n	80081ee <get_store_info+0x1de>
				              {
				            	  switch(i)
 8008150:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008154:	2b05      	cmp	r3, #5
 8008156:	d848      	bhi.n	80081ea <get_store_info+0x1da>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <get_store_info+0x150>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008179 	.word	0x08008179
 8008164:	0800818b 	.word	0x0800818b
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081af 	.word	0x080081af
 8008170:	080081c1 	.word	0x080081c1
 8008174:	080081d3 	.word	0x080081d3
				            	  {
				            	  	  case 0:
				            			  _info_storage.folder_max_count = atoi(value_buff);
 8008178:	463b      	mov	r3, r7
 800817a:	4618      	mov	r0, r3
 800817c:	f003 fc80 	bl	800ba80 <atoi>
 8008180:	4603      	mov	r3, r0
 8008182:	b29a      	uxth	r2, r3
 8008184:	4b66      	ldr	r3, [pc, #408]	; (8008320 <get_store_info+0x310>)
 8008186:	801a      	strh	r2, [r3, #0]
				            			  break;
 8008188:	e030      	b.n	80081ec <get_store_info+0x1dc>
				            		  case 1:
				            			  _info_storage.file_max_count = atoi(value_buff);
 800818a:	463b      	mov	r3, r7
 800818c:	4618      	mov	r0, r3
 800818e:	f003 fc77 	bl	800ba80 <atoi>
 8008192:	4603      	mov	r3, r0
 8008194:	b29a      	uxth	r2, r3
 8008196:	4b62      	ldr	r3, [pc, #392]	; (8008320 <get_store_info+0x310>)
 8008198:	805a      	strh	r2, [r3, #2]
				            			  break;
 800819a:	e027      	b.n	80081ec <get_store_info+0x1dc>
				            		  case 2:
				            			  _info_storage.w_folder_seek = atoi(value_buff);
 800819c:	463b      	mov	r3, r7
 800819e:	4618      	mov	r0, r3
 80081a0:	f003 fc6e 	bl	800ba80 <atoi>
 80081a4:	4603      	mov	r3, r0
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	4b5d      	ldr	r3, [pc, #372]	; (8008320 <get_store_info+0x310>)
 80081aa:	80da      	strh	r2, [r3, #6]
				            			  break;
 80081ac:	e01e      	b.n	80081ec <get_store_info+0x1dc>
				            		  case 3:
				            			  _info_storage.w_file_seek = atoi(value_buff);
 80081ae:	463b      	mov	r3, r7
 80081b0:	4618      	mov	r0, r3
 80081b2:	f003 fc65 	bl	800ba80 <atoi>
 80081b6:	4603      	mov	r3, r0
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	4b59      	ldr	r3, [pc, #356]	; (8008320 <get_store_info+0x310>)
 80081bc:	815a      	strh	r2, [r3, #10]
				            			  break;
 80081be:	e015      	b.n	80081ec <get_store_info+0x1dc>
				            		  case 4:
				            			  _info_storage.r_folder_seek = atoi(value_buff);
 80081c0:	463b      	mov	r3, r7
 80081c2:	4618      	mov	r0, r3
 80081c4:	f003 fc5c 	bl	800ba80 <atoi>
 80081c8:	4603      	mov	r3, r0
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	4b54      	ldr	r3, [pc, #336]	; (8008320 <get_store_info+0x310>)
 80081ce:	809a      	strh	r2, [r3, #4]
				            			  break;
 80081d0:	e00c      	b.n	80081ec <get_store_info+0x1dc>
				            		  case 5:
				            			  _info_storage.r_file_seek = atoi(value_buff);
 80081d2:	463b      	mov	r3, r7
 80081d4:	4618      	mov	r0, r3
 80081d6:	f003 fc53 	bl	800ba80 <atoi>
 80081da:	4603      	mov	r3, r0
 80081dc:	b29a      	uxth	r2, r3
 80081de:	4b50      	ldr	r3, [pc, #320]	; (8008320 <get_store_info+0x310>)
 80081e0:	811a      	strh	r2, [r3, #8]
				            			  success = 1 ;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				            			  break;
 80081e8:	e000      	b.n	80081ec <get_store_info+0x1dc>
				            		  default:
				            			  break;
 80081ea:	bf00      	nop
				            	  }
				            	  break;
 80081ec:	e008      	b.n	8008200 <get_store_info+0x1f0>
			        	  for(int i=0; i<INFO_STORAGE_KEY_SIZE; i++)
 80081ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80081f2:	3301      	adds	r3, #1
 80081f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80081f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	dd95      	ble.n	800812c <get_store_info+0x11c>
				              }
			        	  }
			          }
			          if(lfs_read_buffer[index] == '}')
 8008200:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008204:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008208:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800820c:	4413      	add	r3, r2
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b7d      	cmp	r3, #125	; 0x7d
 8008212:	d068      	beq.n	80082e6 <get_store_info+0x2d6>
			          {
			        	  break;
			          }
			          memset(key_buff, 0, sizeof(key_buff));
 8008214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008218:	2230      	movs	r2, #48	; 0x30
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f004 f805 	bl	800c22c <memset>
			          memset(value_buff, 0, sizeof(value_buff));
 8008222:	463b      	mov	r3, r7
 8008224:	2230      	movs	r2, #48	; 0x30
 8008226:	2100      	movs	r1, #0
 8008228:	4618      	mov	r0, r3
 800822a:	f003 ffff 	bl	800c22c <memset>
		              got_key = 1 ; got_value = 0 ; key_index =0 ; value_index=0  ;
 800822e:	2301      	movs	r3, #1
 8008230:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008234:	2300      	movs	r3, #0
 8008236:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800823a:	2300      	movs	r3, #0
 800823c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008240:	2300      	movs	r3, #0
 8008242:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008246:	e03d      	b.n	80082c4 <get_store_info+0x2b4>
		          }
		          else if(lfs_read_buffer[index] == ':')
 8008248:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800824c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008250:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8008254:	4413      	add	r3, r2
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b3a      	cmp	r3, #58	; 0x3a
 800825a:	d106      	bne.n	800826a <get_store_info+0x25a>
		          {
		        	  got_value = 1 ;	got_key = 0;
 800825c:	2301      	movs	r3, #1
 800825e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008268:	e02c      	b.n	80082c4 <get_store_info+0x2b4>
		          }
		          else
		          {
			          if(got_key)
 800826a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800826e:	2b00      	cmp	r3, #0
 8008270:	d012      	beq.n	8008298 <get_store_info+0x288>
			          {
			              key_buff[key_index++]= lfs_read_buffer[index] ;
 8008272:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800827c:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8008280:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8008284:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8008288:	440a      	add	r2, r1
 800828a:	7811      	ldrb	r1, [r2, #0]
 800828c:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8008290:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008294:	54d1      	strb	r1, [r2, r3]
 8008296:	e015      	b.n	80082c4 <get_store_info+0x2b4>
			          }
			          else if(got_value == 1)
 8008298:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800829c:	2b01      	cmp	r3, #1
 800829e:	d111      	bne.n	80082c4 <get_store_info+0x2b4>
			          {
			        	  value_buff[value_index++] = lfs_read_buffer[index];
 80082a0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80082aa:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80082ae:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 80082b2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80082b6:	440a      	add	r2, r1
 80082b8:	7811      	ldrb	r1, [r2, #0]
 80082ba:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80082be:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80082c2:	54d1      	strb	r1, [r2, r3]
			          }
		          }
	        	  index++ ;
 80082c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80082c8:	3301      	adds	r3, #1
 80082ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		      while(lfs_read_buffer[index])
 80082ce:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80082d2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 80082d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80082da:	4413      	add	r3, r2
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f47f aedb 	bne.w	800809a <get_store_info+0x8a>
 80082e4:	e000      	b.n	80082e8 <get_store_info+0x2d8>
			        	  break;
 80082e6:	bf00      	nop
		      }
		  }
		  lfs_file_close(&littlefs, &info_file);
 80082e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80082ec:	4619      	mov	r1, r3
 80082ee:	4806      	ldr	r0, [pc, #24]	; (8008308 <get_store_info+0x2f8>)
 80082f0:	f7ff fba2 	bl	8007a38 <lfs_file_close>
	}
	return success ;
 80082f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	0800dd44 	.word	0x0800dd44
 8008308:	2000019c 	.word	0x2000019c
 800830c:	0800dd58 	.word	0x0800dd58
 8008310:	0800dd8c 	.word	0x0800dd8c
 8008314:	0800ddc0 	.word	0x0800ddc0
 8008318:	0800dde4 	.word	0x0800dde4
 800831c:	0800e3d0 	.word	0x0800e3d0
 8008320:	20000224 	.word	0x20000224

08008324 <set_store_info>:

static int set_store_info()
{
 8008324:	b590      	push	{r4, r7, lr}
 8008326:	b0e5      	sub	sp, #404	; 0x194
 8008328:	af00      	add	r7, sp, #0
	int success = 0 ;
 800832a:	2300      	movs	r3, #0
 800832c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	char lfs_read_buffer[STORAGE_INFO_FILE_SIZE];
	char value_buff[48];
	lfs_file_t file;

	memset(lfs_read_buffer, 0, STORAGE_INFO_FILE_SIZE);
 8008330:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008338:	2100      	movs	r1, #0
 800833a:	4618      	mov	r0, r3
 800833c:	f003 ff76 	bl	800c22c <memset>
	lfs_read_buffer[0] = '{';
 8008340:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008348:	227b      	movs	r2, #123	; 0x7b
 800834a:	701a      	strb	r2, [r3, #0]
	for(int indx = 0 ; indx < INFO_STORAGE_KEY_SIZE; indx++)
 800834c:	2300      	movs	r3, #0
 800834e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8008352:	e0d0      	b.n	80084f6 <set_store_info+0x1d2>
	{
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, info_storage_keys[indx]);  strcat(lfs_read_buffer, "\"");
 8008354:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008358:	4618      	mov	r0, r3
 800835a:	f7f7 fef7 	bl	800014c <strlen>
 800835e:	4603      	mov	r3, r0
 8008360:	461a      	mov	r2, r3
 8008362:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008366:	4413      	add	r3, r2
 8008368:	498c      	ldr	r1, [pc, #560]	; (800859c <set_store_info+0x278>)
 800836a:	461a      	mov	r2, r3
 800836c:	460b      	mov	r3, r1
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	8013      	strh	r3, [r2, #0]
 8008372:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8008376:	4613      	mov	r3, r2
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	4413      	add	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4a88      	ldr	r2, [pc, #544]	; (80085a0 <set_store_info+0x27c>)
 8008380:	441a      	add	r2, r3
 8008382:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f003 ff57 	bl	800c23c <strcat>
 800838e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008392:	4618      	mov	r0, r3
 8008394:	f7f7 feda 	bl	800014c <strlen>
 8008398:	4603      	mov	r3, r0
 800839a:	461a      	mov	r2, r3
 800839c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80083a0:	4413      	add	r3, r2
 80083a2:	497e      	ldr	r1, [pc, #504]	; (800859c <set_store_info+0x278>)
 80083a4:	461a      	mov	r2, r3
 80083a6:	460b      	mov	r3, r1
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	8013      	strh	r3, [r2, #0]
		  strcat(lfs_read_buffer, (char*)":");
 80083ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7f7 fecb 	bl	800014c <strlen>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80083be:	4413      	add	r3, r2
 80083c0:	4978      	ldr	r1, [pc, #480]	; (80085a4 <set_store_info+0x280>)
 80083c2:	461a      	mov	r2, r3
 80083c4:	460b      	mov	r3, r1
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	8013      	strh	r3, [r2, #0]
		  memset(value_buff, 0, sizeof(value_buff));
 80083ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083ce:	2230      	movs	r2, #48	; 0x30
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f003 ff2a 	bl	800c22c <memset>
		  switch(indx)
 80083d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80083dc:	2b05      	cmp	r3, #5
 80083de:	d84b      	bhi.n	8008478 <set_store_info+0x154>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <set_store_info+0xc4>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	08008401 	.word	0x08008401
 80083ec:	08008415 	.word	0x08008415
 80083f0:	08008429 	.word	0x08008429
 80083f4:	0800843d 	.word	0x0800843d
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008465 	.word	0x08008465
		  {
	  	  	  case 0:
	  	  		  itoa(_info_storage.folder_max_count, value_buff, 10);
 8008400:	4b69      	ldr	r3, [pc, #420]	; (80085a8 <set_store_info+0x284>)
 8008402:	881b      	ldrh	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800840a:	220a      	movs	r2, #10
 800840c:	4619      	mov	r1, r3
 800840e:	f003 fb53 	bl	800bab8 <itoa>
	  	  		  break;
 8008412:	e032      	b.n	800847a <set_store_info+0x156>
	  	  	  case 1:
	  	  		  itoa(_info_storage.file_max_count, value_buff, 10);
 8008414:	4b64      	ldr	r3, [pc, #400]	; (80085a8 <set_store_info+0x284>)
 8008416:	885b      	ldrh	r3, [r3, #2]
 8008418:	4618      	mov	r0, r3
 800841a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800841e:	220a      	movs	r2, #10
 8008420:	4619      	mov	r1, r3
 8008422:	f003 fb49 	bl	800bab8 <itoa>
	  	  		  break;
 8008426:	e028      	b.n	800847a <set_store_info+0x156>
	  	  	  case 2:
	  	  		  itoa(_info_storage.w_folder_seek, value_buff, 10);
 8008428:	4b5f      	ldr	r3, [pc, #380]	; (80085a8 <set_store_info+0x284>)
 800842a:	88db      	ldrh	r3, [r3, #6]
 800842c:	4618      	mov	r0, r3
 800842e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008432:	220a      	movs	r2, #10
 8008434:	4619      	mov	r1, r3
 8008436:	f003 fb3f 	bl	800bab8 <itoa>
	  	  		  break;
 800843a:	e01e      	b.n	800847a <set_store_info+0x156>
	  	  	  case 3:
	  	  		  itoa(_info_storage.w_file_seek, value_buff, 10);
 800843c:	4b5a      	ldr	r3, [pc, #360]	; (80085a8 <set_store_info+0x284>)
 800843e:	895b      	ldrh	r3, [r3, #10]
 8008440:	4618      	mov	r0, r3
 8008442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008446:	220a      	movs	r2, #10
 8008448:	4619      	mov	r1, r3
 800844a:	f003 fb35 	bl	800bab8 <itoa>
	  	  		  break;
 800844e:	e014      	b.n	800847a <set_store_info+0x156>
	  	  	  case 4:
	  	  		  itoa(_info_storage.r_folder_seek, value_buff, 10);
 8008450:	4b55      	ldr	r3, [pc, #340]	; (80085a8 <set_store_info+0x284>)
 8008452:	889b      	ldrh	r3, [r3, #4]
 8008454:	4618      	mov	r0, r3
 8008456:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800845a:	220a      	movs	r2, #10
 800845c:	4619      	mov	r1, r3
 800845e:	f003 fb2b 	bl	800bab8 <itoa>
	  	  		  break;
 8008462:	e00a      	b.n	800847a <set_store_info+0x156>
	  	  	  case 5:
	  	  		  itoa(_info_storage.r_file_seek, value_buff, 10);
 8008464:	4b50      	ldr	r3, [pc, #320]	; (80085a8 <set_store_info+0x284>)
 8008466:	891b      	ldrh	r3, [r3, #8]
 8008468:	4618      	mov	r0, r3
 800846a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800846e:	220a      	movs	r2, #10
 8008470:	4619      	mov	r1, r3
 8008472:	f003 fb21 	bl	800bab8 <itoa>
	  	  		  break;
 8008476:	e000      	b.n	800847a <set_store_info+0x156>
	  	  	  default:
	  	  		  break;
 8008478:	bf00      	nop
		  }
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, value_buff);  strcat(lfs_read_buffer, "\"");
 800847a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800847e:	4618      	mov	r0, r3
 8008480:	f7f7 fe64 	bl	800014c <strlen>
 8008484:	4603      	mov	r3, r0
 8008486:	461a      	mov	r2, r3
 8008488:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800848c:	4413      	add	r3, r2
 800848e:	4943      	ldr	r1, [pc, #268]	; (800859c <set_store_info+0x278>)
 8008490:	461a      	mov	r2, r3
 8008492:	460b      	mov	r3, r1
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	8013      	strh	r3, [r2, #0]
 8008498:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800849c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f003 feca 	bl	800c23c <strcat>
 80084a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f7 fe4d 	bl	800014c <strlen>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80084ba:	4413      	add	r3, r2
 80084bc:	4937      	ldr	r1, [pc, #220]	; (800859c <set_store_info+0x278>)
 80084be:	461a      	mov	r2, r3
 80084c0:	460b      	mov	r3, r1
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	8013      	strh	r3, [r2, #0]
		  if(indx < INFO_STORAGE_KEY_SIZE-1)	 strcat(lfs_read_buffer, ",");
 80084c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	dc0e      	bgt.n	80084ec <set_store_info+0x1c8>
 80084ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f7 fe3a 	bl	800014c <strlen>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80084e0:	4413      	add	r3, r2
 80084e2:	4932      	ldr	r1, [pc, #200]	; (80085ac <set_store_info+0x288>)
 80084e4:	461a      	mov	r2, r3
 80084e6:	460b      	mov	r3, r1
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	8013      	strh	r3, [r2, #0]
	for(int indx = 0 ; indx < INFO_STORAGE_KEY_SIZE; indx++)
 80084ec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80084f0:	3301      	adds	r3, #1
 80084f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80084f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	f77f af2a 	ble.w	8008354 <set_store_info+0x30>
	}
	strcat(lfs_read_buffer, (char*)"}");
 8008500:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008504:	4618      	mov	r0, r3
 8008506:	f7f7 fe21 	bl	800014c <strlen>
 800850a:	4603      	mov	r3, r0
 800850c:	461a      	mov	r2, r3
 800850e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008512:	4413      	add	r3, r2
 8008514:	4926      	ldr	r1, [pc, #152]	; (80085b0 <set_store_info+0x28c>)
 8008516:	461a      	mov	r2, r3
 8008518:	460b      	mov	r3, r1
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	8013      	strh	r3, [r2, #0]

#ifdef DEBUG
	printf("set_store_info :  new info string : %s\n", lfs_read_buffer);
 800851e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008522:	4619      	mov	r1, r3
 8008524:	4823      	ldr	r0, [pc, #140]	; (80085b4 <set_store_info+0x290>)
 8008526:	f003 fd23 	bl	800bf70 <iprintf>
#endif

	if( lfs_file_open(&littlefs, &file, STORAGE_INFO_FILE_NAME, LFS_O_RDWR | LFS_O_CREAT ) < 0 )
 800852a:	1d39      	adds	r1, r7, #4
 800852c:	f240 1303 	movw	r3, #259	; 0x103
 8008530:	4a21      	ldr	r2, [pc, #132]	; (80085b8 <set_store_info+0x294>)
 8008532:	4822      	ldr	r0, [pc, #136]	; (80085bc <set_store_info+0x298>)
 8008534:	f7ff fa4c 	bl	80079d0 <lfs_file_open>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	da04      	bge.n	8008548 <set_store_info+0x224>
	{
#ifdef DEBUG
		  printf("set_store_info: fail to open %s from save_info\n", STORAGE_INFO_FILE_NAME);	while(1);
 800853e:	491e      	ldr	r1, [pc, #120]	; (80085b8 <set_store_info+0x294>)
 8008540:	481f      	ldr	r0, [pc, #124]	; (80085c0 <set_store_info+0x29c>)
 8008542:	f003 fd15 	bl	800bf70 <iprintf>
 8008546:	e7fe      	b.n	8008546 <set_store_info+0x222>
#endif
	}
	else
	{
		  if(lfs_file_write(&littlefs, &file, lfs_read_buffer, strlen(lfs_read_buffer)) < strlen(lfs_read_buffer))
 8008548:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800854c:	4618      	mov	r0, r3
 800854e:	f7f7 fdfd 	bl	800014c <strlen>
 8008552:	4603      	mov	r3, r0
 8008554:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008558:	1d39      	adds	r1, r7, #4
 800855a:	4818      	ldr	r0, [pc, #96]	; (80085bc <set_store_info+0x298>)
 800855c:	f7ff fac8 	bl	8007af0 <lfs_file_write>
 8008560:	4603      	mov	r3, r0
 8008562:	461c      	mov	r4, r3
 8008564:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008568:	4618      	mov	r0, r3
 800856a:	f7f7 fdef 	bl	800014c <strlen>
 800856e:	4603      	mov	r3, r0
 8008570:	429c      	cmp	r4, r3
 8008572:	d204      	bcs.n	800857e <set_store_info+0x25a>
		  {
#ifdef DEBUG
			  printf("set_store_info :  fail to write new %s from main\n", STORAGE_INFO_FILE_NAME); while(1);
 8008574:	4910      	ldr	r1, [pc, #64]	; (80085b8 <set_store_info+0x294>)
 8008576:	4813      	ldr	r0, [pc, #76]	; (80085c4 <set_store_info+0x2a0>)
 8008578:	f003 fcfa 	bl	800bf70 <iprintf>
 800857c:	e7fe      	b.n	800857c <set_store_info+0x258>
#endif
		  }
		  else
		  {
			  success = 1 ;
 800857e:	2301      	movs	r3, #1
 8008580:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
		  }
		  lfs_file_close(&littlefs, &file);
 8008584:	1d3b      	adds	r3, r7, #4
 8008586:	4619      	mov	r1, r3
 8008588:	480c      	ldr	r0, [pc, #48]	; (80085bc <set_store_info+0x298>)
 800858a:	f7ff fa55 	bl	8007a38 <lfs_file_close>
	}
    return success ;
 800858e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
}
 8008592:	4618      	mov	r0, r3
 8008594:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8008598:	46bd      	mov	sp, r7
 800859a:	bd90      	pop	{r4, r7, pc}
 800859c:	0800de0c 	.word	0x0800de0c
 80085a0:	0800e3d0 	.word	0x0800e3d0
 80085a4:	0800de10 	.word	0x0800de10
 80085a8:	20000224 	.word	0x20000224
 80085ac:	0800de14 	.word	0x0800de14
 80085b0:	0800de18 	.word	0x0800de18
 80085b4:	0800de1c 	.word	0x0800de1c
 80085b8:	0800dd44 	.word	0x0800dd44
 80085bc:	2000019c 	.word	0x2000019c
 80085c0:	0800de44 	.word	0x0800de44
 80085c4:	0800de74 	.word	0x0800de74

080085c8 <save_data>:

static Storage_error_t save_data(uint8_t* buffer, uint16_t size)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b0b0      	sub	sp, #192	; 0xc0
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
	lfs_file_t file ;
	Storage_error_t err = STORAGE_WRITE_FAIL ;
 80085d4:	23fa      	movs	r3, #250	; 0xfa
 80085d6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	char data_path[68];
	char folder_seek[3],file_seek[5];

	int written = 0 ;
 80085da:	2300      	movs	r3, #0
 80085dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	if((_info_storage.w_folder_seek == _info_storage.r_folder_seek) &&  \
 80085e0:	4b73      	ldr	r3, [pc, #460]	; (80087b0 <save_data+0x1e8>)
 80085e2:	88da      	ldrh	r2, [r3, #6]
 80085e4:	4b72      	ldr	r3, [pc, #456]	; (80087b0 <save_data+0x1e8>)
 80085e6:	889b      	ldrh	r3, [r3, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d111      	bne.n	8008610 <save_data+0x48>
			(_info_storage.r_file_seek >_info_storage.w_file_seek ) && \
 80085ec:	4b70      	ldr	r3, [pc, #448]	; (80087b0 <save_data+0x1e8>)
 80085ee:	891a      	ldrh	r2, [r3, #8]
 80085f0:	4b6f      	ldr	r3, [pc, #444]	; (80087b0 <save_data+0x1e8>)
 80085f2:	895b      	ldrh	r3, [r3, #10]
	if((_info_storage.w_folder_seek == _info_storage.r_folder_seek) &&  \
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d90b      	bls.n	8008610 <save_data+0x48>
			(_info_storage.r_file_seek -_info_storage.w_file_seek ) < 2 )
 80085f8:	4b6d      	ldr	r3, [pc, #436]	; (80087b0 <save_data+0x1e8>)
 80085fa:	891b      	ldrh	r3, [r3, #8]
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b6c      	ldr	r3, [pc, #432]	; (80087b0 <save_data+0x1e8>)
 8008600:	895b      	ldrh	r3, [r3, #10]
 8008602:	1ad3      	subs	r3, r2, r3
			(_info_storage.r_file_seek >_info_storage.w_file_seek ) && \
 8008604:	2b01      	cmp	r3, #1
 8008606:	dc03      	bgt.n	8008610 <save_data+0x48>
	{
		err = STORATE_FULL;
 8008608:	23fe      	movs	r3, #254	; 0xfe
 800860a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800860e:	e0c9      	b.n	80087a4 <save_data+0x1dc>
    }
	else
	{
		memset(folder_seek, 0, sizeof(folder_seek)); 	itoa(_info_storage.w_folder_seek, folder_seek, 10);
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	2203      	movs	r2, #3
 8008616:	2100      	movs	r1, #0
 8008618:	4618      	mov	r0, r3
 800861a:	f003 fe07 	bl	800c22c <memset>
 800861e:	4b64      	ldr	r3, [pc, #400]	; (80087b0 <save_data+0x1e8>)
 8008620:	88db      	ldrh	r3, [r3, #6]
 8008622:	4618      	mov	r0, r3
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	220a      	movs	r2, #10
 800862a:	4619      	mov	r1, r3
 800862c:	f003 fa44 	bl	800bab8 <itoa>
		memset(file_seek,   0, sizeof(file_seek));   	itoa(_info_storage.w_file_seek, file_seek, 10);
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	2205      	movs	r2, #5
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f003 fdf7 	bl	800c22c <memset>
 800863e:	4b5c      	ldr	r3, [pc, #368]	; (80087b0 <save_data+0x1e8>)
 8008640:	895b      	ldrh	r3, [r3, #10]
 8008642:	4618      	mov	r0, r3
 8008644:	f107 030c 	add.w	r3, r7, #12
 8008648:	220a      	movs	r2, #10
 800864a:	4619      	mov	r1, r3
 800864c:	f003 fa34 	bl	800bab8 <itoa>
		memset(data_path,   0, sizeof(data_path));
 8008650:	f107 0318 	add.w	r3, r7, #24
 8008654:	2244      	movs	r2, #68	; 0x44
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f003 fde7 	bl	800c22c <memset>

		strcpy(data_path, folder_seek);	strcat(data_path, "/");	strcat(data_path, file_seek);	strcat(data_path, ".txt");
 800865e:	f107 0214 	add.w	r2, r7, #20
 8008662:	f107 0318 	add.w	r3, r7, #24
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f003 fea8 	bl	800c3be <strcpy>
 800866e:	f107 0318 	add.w	r3, r7, #24
 8008672:	4618      	mov	r0, r3
 8008674:	f7f7 fd6a 	bl	800014c <strlen>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	f107 0318 	add.w	r3, r7, #24
 8008680:	4413      	add	r3, r2
 8008682:	494c      	ldr	r1, [pc, #304]	; (80087b4 <save_data+0x1ec>)
 8008684:	461a      	mov	r2, r3
 8008686:	460b      	mov	r3, r1
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	8013      	strh	r3, [r2, #0]
 800868c:	f107 020c 	add.w	r2, r7, #12
 8008690:	f107 0318 	add.w	r3, r7, #24
 8008694:	4611      	mov	r1, r2
 8008696:	4618      	mov	r0, r3
 8008698:	f003 fdd0 	bl	800c23c <strcat>
 800869c:	f107 0318 	add.w	r3, r7, #24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7f7 fd53 	bl	800014c <strlen>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
 80086aa:	f107 0318 	add.w	r3, r7, #24
 80086ae:	4413      	add	r3, r2
 80086b0:	4a41      	ldr	r2, [pc, #260]	; (80087b8 <save_data+0x1f0>)
 80086b2:	6810      	ldr	r0, [r2, #0]
 80086b4:	6018      	str	r0, [r3, #0]
 80086b6:	7912      	ldrb	r2, [r2, #4]
 80086b8:	711a      	strb	r2, [r3, #4]

#ifdef DEBUG
		printf("save_data :  path %s\n", data_path); //HAL_Delay(3000);
 80086ba:	f107 0318 	add.w	r3, r7, #24
 80086be:	4619      	mov	r1, r3
 80086c0:	483e      	ldr	r0, [pc, #248]	; (80087bc <save_data+0x1f4>)
 80086c2:	f003 fc55 	bl	800bf70 <iprintf>
#endif

		if( lfs_file_open(&littlefs, &file, data_path, LFS_O_RDWR | LFS_O_CREAT ) < 0 )
 80086c6:	f107 0218 	add.w	r2, r7, #24
 80086ca:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80086ce:	f240 1303 	movw	r3, #259	; 0x103
 80086d2:	483b      	ldr	r0, [pc, #236]	; (80087c0 <save_data+0x1f8>)
 80086d4:	f7ff f97c 	bl	80079d0 <lfs_file_open>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	da09      	bge.n	80086f2 <save_data+0x12a>
		{
#ifdef DEBUG
			 printf("save_data :fail to open data path :  %s\n", data_path);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4619      	mov	r1, r3
 80086e4:	4837      	ldr	r0, [pc, #220]	; (80087c4 <save_data+0x1fc>)
 80086e6:	f003 fc43 	bl	800bf70 <iprintf>
#endif
			 err = STORAGE_FILE_OPEN_FAIL ;
 80086ea:	23fb      	movs	r3, #251	; 0xfb
 80086ec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80086f0:	e01c      	b.n	800872c <save_data+0x164>
		}
		else
		{
			  if(lfs_file_write(&littlefs, &file, buffer, size) < 0 )
 80086f2:	887b      	ldrh	r3, [r7, #2]
 80086f4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	4831      	ldr	r0, [pc, #196]	; (80087c0 <save_data+0x1f8>)
 80086fc:	f7ff f9f8 	bl	8007af0 <lfs_file_write>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	da03      	bge.n	800870e <save_data+0x146>
			  {
#ifdef DEBUG
				  printf("fail to write info.txt \n"); while(1);
 8008706:	4830      	ldr	r0, [pc, #192]	; (80087c8 <save_data+0x200>)
 8008708:	f003 fca0 	bl	800c04c <puts>
 800870c:	e7fe      	b.n	800870c <save_data+0x144>
#endif
			  }
			  else
			  {
#ifdef DEBUG
				  printf("successfully written to %s \n ", data_path);  //HAL_Delay(3000);
 800870e:	f107 0318 	add.w	r3, r7, #24
 8008712:	4619      	mov	r1, r3
 8008714:	482d      	ldr	r0, [pc, #180]	; (80087cc <save_data+0x204>)
 8008716:	f003 fc2b 	bl	800bf70 <iprintf>
#endif
				  written = 1 ;
 800871a:	2301      	movs	r3, #1
 800871c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			  }
			  lfs_file_close(&littlefs, &file);
 8008720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008724:	4619      	mov	r1, r3
 8008726:	4826      	ldr	r0, [pc, #152]	; (80087c0 <save_data+0x1f8>)
 8008728:	f7ff f986 	bl	8007a38 <lfs_file_close>
		}
		if(written==1)
 800872c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008730:	2b01      	cmp	r3, #1
 8008732:	d137      	bne.n	80087a4 <save_data+0x1dc>
		{
			  int w_file_seek = _info_storage.w_file_seek;
 8008734:	4b1e      	ldr	r3, [pc, #120]	; (80087b0 <save_data+0x1e8>)
 8008736:	895b      	ldrh	r3, [r3, #10]
 8008738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  int w_folder_seek = _info_storage.w_folder_seek;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <save_data+0x1e8>)
 800873e:	88db      	ldrh	r3, [r3, #6]
 8008740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			  if(_info_storage.w_file_seek++ > FILE_MAX_COUNT)
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <save_data+0x1e8>)
 8008746:	895b      	ldrh	r3, [r3, #10]
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	b291      	uxth	r1, r2
 800874c:	4a18      	ldr	r2, [pc, #96]	; (80087b0 <save_data+0x1e8>)
 800874e:	8151      	strh	r1, [r2, #10]
 8008750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008754:	d90d      	bls.n	8008772 <save_data+0x1aa>
			  {
				  _info_storage.w_file_seek = FILE_SEEK_START ;
 8008756:	4b16      	ldr	r3, [pc, #88]	; (80087b0 <save_data+0x1e8>)
 8008758:	2200      	movs	r2, #0
 800875a:	815a      	strh	r2, [r3, #10]
				  if(_info_storage.w_folder_seek++ > FOLDER_MAX_COUNT)
 800875c:	4b14      	ldr	r3, [pc, #80]	; (80087b0 <save_data+0x1e8>)
 800875e:	88db      	ldrh	r3, [r3, #6]
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	b291      	uxth	r1, r2
 8008764:	4a12      	ldr	r2, [pc, #72]	; (80087b0 <save_data+0x1e8>)
 8008766:	80d1      	strh	r1, [r2, #6]
 8008768:	2b0c      	cmp	r3, #12
 800876a:	d902      	bls.n	8008772 <save_data+0x1aa>
				  {
					  _info_storage.w_folder_seek = FOLDER_SEEK_START ;
 800876c:	4b10      	ldr	r3, [pc, #64]	; (80087b0 <save_data+0x1e8>)
 800876e:	2201      	movs	r2, #1
 8008770:	80da      	strh	r2, [r3, #6]
				  }
			  }
			  if(set_store_info() != 1)
 8008772:	f7ff fdd7 	bl	8008324 <set_store_info>
 8008776:	4603      	mov	r3, r0
 8008778:	2b01      	cmp	r3, #1
 800877a:	d00d      	beq.n	8008798 <save_data+0x1d0>
			  {
				  _info_storage.w_file_seek = w_file_seek;
 800877c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008780:	b29a      	uxth	r2, r3
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <save_data+0x1e8>)
 8008784:	815a      	strh	r2, [r3, #10]
				  _info_storage.w_folder_seek = w_folder_seek;
 8008786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800878a:	b29a      	uxth	r2, r3
 800878c:	4b08      	ldr	r3, [pc, #32]	; (80087b0 <save_data+0x1e8>)
 800878e:	80da      	strh	r2, [r3, #6]
#ifdef DEBUG
				  printf("save_data : fail to update storage info \n"); while(1);
 8008790:	480f      	ldr	r0, [pc, #60]	; (80087d0 <save_data+0x208>)
 8008792:	f003 fc5b 	bl	800c04c <puts>
 8008796:	e7fe      	b.n	8008796 <save_data+0x1ce>
#endif
			  }
			  else
			  {
				  err = STORAGE_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#ifdef DEBUG
				  printf("save_data : info updated successfully ..  \n");
 800879e:	480d      	ldr	r0, [pc, #52]	; (80087d4 <save_data+0x20c>)
 80087a0:	f003 fc54 	bl	800c04c <puts>
#endif
			  }
		 }
	}
	return err ;
 80087a4:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	37c0      	adds	r7, #192	; 0xc0
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000224 	.word	0x20000224
 80087b4:	0800dea8 	.word	0x0800dea8
 80087b8:	0800deac 	.word	0x0800deac
 80087bc:	0800deb4 	.word	0x0800deb4
 80087c0:	2000019c 	.word	0x2000019c
 80087c4:	0800decc 	.word	0x0800decc
 80087c8:	0800def8 	.word	0x0800def8
 80087cc:	0800df10 	.word	0x0800df10
 80087d0:	0800df30 	.word	0x0800df30
 80087d4:	0800df5c 	.word	0x0800df5c

080087d8 <read_data>:

static Storage_error_t read_data(uint8_t* buffer, uint16_t size)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b0b0      	sub	sp, #192	; 0xc0
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	807b      	strh	r3, [r7, #2]
	  lfs_file_t file ;
	  Storage_error_t err = STORAGE_WRITE_FAIL ;
 80087e4:	23fa      	movs	r3, #250	; 0xfa
 80087e6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	  char data_path[68];
	  char folder_seek[3], file_seek[5];

	  int read_ok = 0 ;
 80087ea:	2300      	movs	r3, #0
 80087ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	  if((_info_storage.w_folder_seek == _info_storage.r_folder_seek) && (_info_storage.r_file_seek ==_info_storage.w_file_seek ))
 80087f0:	4b6c      	ldr	r3, [pc, #432]	; (80089a4 <read_data+0x1cc>)
 80087f2:	88da      	ldrh	r2, [r3, #6]
 80087f4:	4b6b      	ldr	r3, [pc, #428]	; (80089a4 <read_data+0x1cc>)
 80087f6:	889b      	ldrh	r3, [r3, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d10c      	bne.n	8008816 <read_data+0x3e>
 80087fc:	4b69      	ldr	r3, [pc, #420]	; (80089a4 <read_data+0x1cc>)
 80087fe:	891a      	ldrh	r2, [r3, #8]
 8008800:	4b68      	ldr	r3, [pc, #416]	; (80089a4 <read_data+0x1cc>)
 8008802:	895b      	ldrh	r3, [r3, #10]
 8008804:	429a      	cmp	r2, r3
 8008806:	d106      	bne.n	8008816 <read_data+0x3e>
	  {
		  err = STORATE_EMPTY  ;
 8008808:	23fd      	movs	r3, #253	; 0xfd
 800880a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
#ifdef DEBUG
		  printf("read_data : storage empty ... \n");
 800880e:	4866      	ldr	r0, [pc, #408]	; (80089a8 <read_data+0x1d0>)
 8008810:	f003 fc1c 	bl	800c04c <puts>
 8008814:	e0bf      	b.n	8008996 <read_data+0x1be>
#endif
	  }
	  else
	  {
		  memset(folder_seek, 0, sizeof(folder_seek)); itoa(_info_storage.r_folder_seek, folder_seek, 10);
 8008816:	f107 0314 	add.w	r3, r7, #20
 800881a:	2203      	movs	r2, #3
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f003 fd04 	bl	800c22c <memset>
 8008824:	4b5f      	ldr	r3, [pc, #380]	; (80089a4 <read_data+0x1cc>)
 8008826:	889b      	ldrh	r3, [r3, #4]
 8008828:	4618      	mov	r0, r3
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	220a      	movs	r2, #10
 8008830:	4619      	mov	r1, r3
 8008832:	f003 f941 	bl	800bab8 <itoa>
		  memset(file_seek,   0, sizeof(file_seek));   itoa(_info_storage.r_file_seek, file_seek, 10);
 8008836:	f107 030c 	add.w	r3, r7, #12
 800883a:	2205      	movs	r2, #5
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f003 fcf4 	bl	800c22c <memset>
 8008844:	4b57      	ldr	r3, [pc, #348]	; (80089a4 <read_data+0x1cc>)
 8008846:	891b      	ldrh	r3, [r3, #8]
 8008848:	4618      	mov	r0, r3
 800884a:	f107 030c 	add.w	r3, r7, #12
 800884e:	220a      	movs	r2, #10
 8008850:	4619      	mov	r1, r3
 8008852:	f003 f931 	bl	800bab8 <itoa>
		  memset(data_path,   0, sizeof(data_path));
 8008856:	f107 0318 	add.w	r3, r7, #24
 800885a:	2244      	movs	r2, #68	; 0x44
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f003 fce4 	bl	800c22c <memset>

		  strcpy(data_path, folder_seek);	strcat(data_path, "/");	 strcat(data_path, file_seek); strcat(data_path, ".txt");
 8008864:	f107 0214 	add.w	r2, r7, #20
 8008868:	f107 0318 	add.w	r3, r7, #24
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f003 fda5 	bl	800c3be <strcpy>
 8008874:	f107 0318 	add.w	r3, r7, #24
 8008878:	4618      	mov	r0, r3
 800887a:	f7f7 fc67 	bl	800014c <strlen>
 800887e:	4603      	mov	r3, r0
 8008880:	461a      	mov	r2, r3
 8008882:	f107 0318 	add.w	r3, r7, #24
 8008886:	4413      	add	r3, r2
 8008888:	4948      	ldr	r1, [pc, #288]	; (80089ac <read_data+0x1d4>)
 800888a:	461a      	mov	r2, r3
 800888c:	460b      	mov	r3, r1
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	8013      	strh	r3, [r2, #0]
 8008892:	f107 020c 	add.w	r2, r7, #12
 8008896:	f107 0318 	add.w	r3, r7, #24
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f003 fccd 	bl	800c23c <strcat>
 80088a2:	f107 0318 	add.w	r3, r7, #24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f7 fc50 	bl	800014c <strlen>
 80088ac:	4603      	mov	r3, r0
 80088ae:	461a      	mov	r2, r3
 80088b0:	f107 0318 	add.w	r3, r7, #24
 80088b4:	4413      	add	r3, r2
 80088b6:	4a3e      	ldr	r2, [pc, #248]	; (80089b0 <read_data+0x1d8>)
 80088b8:	6810      	ldr	r0, [r2, #0]
 80088ba:	6018      	str	r0, [r3, #0]
 80088bc:	7912      	ldrb	r2, [r2, #4]
 80088be:	711a      	strb	r2, [r3, #4]

#ifdef DEBUG
		  printf("read_data :  path %s\n", data_path);
 80088c0:	f107 0318 	add.w	r3, r7, #24
 80088c4:	4619      	mov	r1, r3
 80088c6:	483b      	ldr	r0, [pc, #236]	; (80089b4 <read_data+0x1dc>)
 80088c8:	f003 fb52 	bl	800bf70 <iprintf>
#endif

		  if( lfs_file_open(&littlefs, &file, data_path, LFS_O_RDWR ) < 0 )
 80088cc:	f107 0218 	add.w	r2, r7, #24
 80088d0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80088d4:	2303      	movs	r3, #3
 80088d6:	4838      	ldr	r0, [pc, #224]	; (80089b8 <read_data+0x1e0>)
 80088d8:	f7ff f87a 	bl	80079d0 <lfs_file_open>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da03      	bge.n	80088ea <read_data+0x112>
		  {
#ifdef DEBUG
			  printf("read_data :fail to open data_path \n"); while(1);
 80088e2:	4836      	ldr	r0, [pc, #216]	; (80089bc <read_data+0x1e4>)
 80088e4:	f003 fbb2 	bl	800c04c <puts>
 80088e8:	e7fe      	b.n	80088e8 <read_data+0x110>
#endif
			  err = STORAGE_FILE_OPEN_FAIL ;
		  }
		  else
		  {
			  if(lfs_file_read(&littlefs, &file, buffer, size) < 0 )
 80088ea:	887b      	ldrh	r3, [r7, #2]
 80088ec:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4831      	ldr	r0, [pc, #196]	; (80089b8 <read_data+0x1e0>)
 80088f4:	f7ff f8cc 	bl	8007a90 <lfs_file_read>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	da03      	bge.n	8008906 <read_data+0x12e>
			  {
#ifdef DEBUG
				  printf("read_data : fail to read info.txt \n"); while(1);
 80088fe:	4830      	ldr	r0, [pc, #192]	; (80089c0 <read_data+0x1e8>)
 8008900:	f003 fba4 	bl	800c04c <puts>
 8008904:	e7fe      	b.n	8008904 <read_data+0x12c>
				  err = STORAGE_WRITE_FAIL;
			  }
			  else
			  {
#ifdef DEBUG
				  printf("successfully read from %s   \n", data_path);
 8008906:	f107 0318 	add.w	r3, r7, #24
 800890a:	4619      	mov	r1, r3
 800890c:	482d      	ldr	r0, [pc, #180]	; (80089c4 <read_data+0x1ec>)
 800890e:	f003 fb2f 	bl	800bf70 <iprintf>
#endif
				  read_ok = 1;
 8008912:	2301      	movs	r3, #1
 8008914:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			  }
			  lfs_file_close(&littlefs, &file);
 8008918:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800891c:	4619      	mov	r1, r3
 800891e:	4826      	ldr	r0, [pc, #152]	; (80089b8 <read_data+0x1e0>)
 8008920:	f7ff f88a 	bl	8007a38 <lfs_file_close>
		  }
		  if(read_ok == 1)
 8008924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008928:	2b01      	cmp	r3, #1
 800892a:	d134      	bne.n	8008996 <read_data+0x1be>
		  {
			  int r_file_seek = _info_storage.r_file_seek;
 800892c:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <read_data+0x1cc>)
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			  int r_folder_seek = _info_storage.r_folder_seek;
 8008934:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <read_data+0x1cc>)
 8008936:	889b      	ldrh	r3, [r3, #4]
 8008938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			  if(_info_storage.r_file_seek++ > FILE_MAX_COUNT)
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <read_data+0x1cc>)
 800893e:	891b      	ldrh	r3, [r3, #8]
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	b291      	uxth	r1, r2
 8008944:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <read_data+0x1cc>)
 8008946:	8111      	strh	r1, [r2, #8]
 8008948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800894c:	d90d      	bls.n	800896a <read_data+0x192>
			  {
				  _info_storage.r_file_seek = FILE_SEEK_START ;
 800894e:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <read_data+0x1cc>)
 8008950:	2200      	movs	r2, #0
 8008952:	811a      	strh	r2, [r3, #8]
				  if(_info_storage.r_folder_seek++ > FOLDER_MAX_COUNT)
 8008954:	4b13      	ldr	r3, [pc, #76]	; (80089a4 <read_data+0x1cc>)
 8008956:	889b      	ldrh	r3, [r3, #4]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	b291      	uxth	r1, r2
 800895c:	4a11      	ldr	r2, [pc, #68]	; (80089a4 <read_data+0x1cc>)
 800895e:	8091      	strh	r1, [r2, #4]
 8008960:	2b0c      	cmp	r3, #12
 8008962:	d902      	bls.n	800896a <read_data+0x192>
				  {
					  _info_storage.r_folder_seek = FOLDER_SEEK_START ;
 8008964:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <read_data+0x1cc>)
 8008966:	2201      	movs	r2, #1
 8008968:	809a      	strh	r2, [r3, #4]
				  }
			  }
			  if(set_store_info() != 1)
 800896a:	f7ff fcdb 	bl	8008324 <set_store_info>
 800896e:	4603      	mov	r3, r0
 8008970:	2b01      	cmp	r3, #1
 8008972:	d00d      	beq.n	8008990 <read_data+0x1b8>
			  {
				  _info_storage.r_file_seek = r_file_seek;
 8008974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008978:	b29a      	uxth	r2, r3
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <read_data+0x1cc>)
 800897c:	811a      	strh	r2, [r3, #8]
				  _info_storage.r_folder_seek = r_folder_seek;
 800897e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008982:	b29a      	uxth	r2, r3
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <read_data+0x1cc>)
 8008986:	809a      	strh	r2, [r3, #4]
#ifdef DEBUG
				  printf("read_data : fail to update storage info \n"); while(1);
 8008988:	480f      	ldr	r0, [pc, #60]	; (80089c8 <read_data+0x1f0>)
 800898a:	f003 fb5f 	bl	800c04c <puts>
 800898e:	e7fe      	b.n	800898e <read_data+0x1b6>
#endif
			  }
			  else
			  {
				  err = STORAGE_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			  }
		  }
	  }
	  return err ;
 8008996:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
}
 800899a:	4618      	mov	r0, r3
 800899c:	37c0      	adds	r7, #192	; 0xc0
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000224 	.word	0x20000224
 80089a8:	0800df88 	.word	0x0800df88
 80089ac:	0800dea8 	.word	0x0800dea8
 80089b0:	0800deac 	.word	0x0800deac
 80089b4:	0800dfa8 	.word	0x0800dfa8
 80089b8:	2000019c 	.word	0x2000019c
 80089bc:	0800dfc0 	.word	0x0800dfc0
 80089c0:	0800dfe4 	.word	0x0800dfe4
 80089c4:	0800e008 	.word	0x0800e008
 80089c8:	0800e028 	.word	0x0800e028

080089cc <get_firmware_info>:

uint8_t  get_firmware_info(Info_firmware_t * _firmware)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b0f6      	sub	sp, #472	; 0x1d8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80089d6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80089da:	6018      	str	r0, [r3, #0]
	int success = 0 ;
 80089dc:	2300      	movs	r3, #0
 80089de:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	int index = 0 , got_key = 0, got_value=0 , key_index =0 , value_index = 0 ;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80089e8:	2300      	movs	r3, #0
 80089ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80089ee:	2300      	movs	r3, #0
 80089f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80089fa:	2300      	movs	r3, #0
 80089fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	uint8_t lfs_read_buffer[FIRMWARE_INFO_FILE_SIZE];
	lfs_file_t info_file;

	char key_buff[48], value_buff[48];

	memset(lfs_read_buffer, 0, FIRMWARE_INFO_FILE_SIZE);
 8008a00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f003 fc0e 	bl	800c22c <memset>

	if( lfs_file_open(&littlefs, &info_file, FIRMWARE_INFO_FILE_NAME, LFS_O_RDWR ) < 0 )
 8008a10:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008a14:	2303      	movs	r3, #3
 8008a16:	4abe      	ldr	r2, [pc, #760]	; (8008d10 <get_firmware_info+0x344>)
 8008a18:	48be      	ldr	r0, [pc, #760]	; (8008d14 <get_firmware_info+0x348>)
 8008a1a:	f7fe ffd9 	bl	80079d0 <lfs_file_open>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da04      	bge.n	8008a2e <get_firmware_info+0x62>
	{
#ifdef DEBUG
			printf("get_store_info -> fail to open %s from save_info \n", FIRMWARE_INFO_FILE_NAME);
 8008a24:	49ba      	ldr	r1, [pc, #744]	; (8008d10 <get_firmware_info+0x344>)
 8008a26:	48bc      	ldr	r0, [pc, #752]	; (8008d18 <get_firmware_info+0x34c>)
 8008a28:	f003 faa2 	bl	800bf70 <iprintf>
 8008a2c:	e185      	b.n	8008d3a <get_firmware_info+0x36e>
#endif
	}
	else
	{
		  if( lfs_file_read(&littlefs, &info_file, lfs_read_buffer, FIRMWARE_INFO_FILE_SIZE) < 0 )
 8008a2e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8008a32:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a3a:	48b6      	ldr	r0, [pc, #728]	; (8008d14 <get_firmware_info+0x348>)
 8008a3c:	f7ff f828 	bl	8007a90 <lfs_file_read>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da04      	bge.n	8008a50 <get_firmware_info+0x84>
		  {
#ifdef DEBUG
			  printf("get_store_info -> fail to read %s from save_info \n", FIRMWARE_INFO_FILE_NAME); while(1);
 8008a46:	49b2      	ldr	r1, [pc, #712]	; (8008d10 <get_firmware_info+0x344>)
 8008a48:	48b4      	ldr	r0, [pc, #720]	; (8008d1c <get_firmware_info+0x350>)
 8008a4a:	f003 fa91 	bl	800bf70 <iprintf>
 8008a4e:	e7fe      	b.n	8008a4e <get_firmware_info+0x82>
#endif
		  }
		  else
		  {
#ifdef DEBUG
			  printf("get_store_info ->  %s  :::  %s \n", FIRMWARE_INFO_FILE_NAME, lfs_read_buffer);
 8008a50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008a54:	461a      	mov	r2, r3
 8008a56:	49ae      	ldr	r1, [pc, #696]	; (8008d10 <get_firmware_info+0x344>)
 8008a58:	48b1      	ldr	r0, [pc, #708]	; (8008d20 <get_firmware_info+0x354>)
 8008a5a:	f003 fa89 	bl	800bf70 <iprintf>
#endif
		      while(lfs_read_buffer[index])
 8008a5e:	e14b      	b.n	8008cf8 <get_firmware_info+0x32c>
		      {
	        	  if(lfs_read_buffer[index] == '\"')
 8008a60:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008a64:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008a68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008a6c:	4413      	add	r3, r2
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b22      	cmp	r3, #34	; 0x22
 8008a72:	f000 813c 	beq.w	8008cee <get_firmware_info+0x322>
	        	  {

	        	  }
	        	  else  if(lfs_read_buffer[index] == '{' || lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 8008a76:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008a7a:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008a7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008a82:	4413      	add	r3, r2
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b7b      	cmp	r3, #123	; 0x7b
 8008a88:	d014      	beq.n	8008ab4 <get_firmware_info+0xe8>
 8008a8a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008a8e:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008a92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008a96:	4413      	add	r3, r2
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b2c      	cmp	r3, #44	; 0x2c
 8008a9c:	d00a      	beq.n	8008ab4 <get_firmware_info+0xe8>
 8008a9e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008aa2:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008aa6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008aaa:	4413      	add	r3, r2
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b7d      	cmp	r3, #125	; 0x7d
 8008ab0:	f040 80df 	bne.w	8008c72 <get_firmware_info+0x2a6>
		          {
			          if(lfs_read_buffer[index] == ',' || lfs_read_buffer[index] == '}')
 8008ab4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008ab8:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008abc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008ac0:	4413      	add	r3, r2
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	2b2c      	cmp	r3, #44	; 0x2c
 8008ac6:	d00a      	beq.n	8008ade <get_firmware_info+0x112>
 8008ac8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008acc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008ad0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008ad4:	4413      	add	r3, r2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b7d      	cmp	r3, #125	; 0x7d
 8008ada:	f040 80a5 	bne.w	8008c28 <get_firmware_info+0x25c>
			          {
#ifdef DEBUG
			        	  printf("get_store_info ->  key:%s   value:%s\n", key_buff, value_buff);
 8008ade:	f107 0208 	add.w	r2, r7, #8
 8008ae2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	488e      	ldr	r0, [pc, #568]	; (8008d24 <get_firmware_info+0x358>)
 8008aea:	f003 fa41 	bl	800bf70 <iprintf>
#endif
			        	  for(int i=0; i<INFO_FIRMWARE_KEY_SIZE; i++)
 8008aee:	2300      	movs	r3, #0
 8008af0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008af4:	e093      	b.n	8008c1e <get_firmware_info+0x252>
			        	  {
				              if(memcmp(key_buff, info_firmware_keys[i], key_index) == 0)
 8008af6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008afa:	4613      	mov	r3, r2
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	4413      	add	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4a89      	ldr	r2, [pc, #548]	; (8008d28 <get_firmware_info+0x35c>)
 8008b04:	1899      	adds	r1, r3, r2
 8008b06:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8008b0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f003 fb7c 	bl	800c20c <memcmp>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d17c      	bne.n	8008c14 <get_firmware_info+0x248>
				              {
				            	  switch(i)
 8008b1a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d876      	bhi.n	8008c10 <get_firmware_info+0x244>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <get_firmware_info+0x15c>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b3d 	.word	0x08008b3d
 8008b2c:	08008b6f 	.word	0x08008b6f
 8008b30:	08008b8b 	.word	0x08008b8b
 8008b34:	08008ba7 	.word	0x08008ba7
 8008b38:	08008bd9 	.word	0x08008bd9
				            	  {
				            	  	  case 0:
				            	  		  memset(_firmware->version, 0, sizeof(_firmware->version));
 8008b3c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008b40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	2210      	movs	r2, #16
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f003 fb6d 	bl	800c22c <memset>
				            	  		  memcpy(_firmware->version, value_buff, value_index);
 8008b52:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008b56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8008b62:	f107 0108 	add.w	r1, r7, #8
 8008b66:	4618      	mov	r0, r3
 8008b68:	f003 fc31 	bl	800c3ce <memcpy>
				            			  break;
 8008b6c:	e051      	b.n	8008c12 <get_firmware_info+0x246>
				            		  case 1:
				            			  _firmware->size = atoi(value_buff);
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 ff84 	bl	800ba80 <atoi>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008b80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	601a      	str	r2, [r3, #0]
				            			  break;
 8008b88:	e043      	b.n	8008c12 <get_firmware_info+0x246>
				            		  case 2:
				            			  _firmware->checksum = atoi(value_buff);
 8008b8a:	f107 0308 	add.w	r3, r7, #8
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f002 ff76 	bl	800ba80 <atoi>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008b9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	605a      	str	r2, [r3, #4]
				            			  break;
 8008ba4:	e035      	b.n	8008c12 <get_firmware_info+0x246>
				            		  case 3:
				            			  memset(_firmware->remote_firmware_url, 0, sizeof(_firmware->remote_firmware_url));
 8008ba6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008baa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	2280      	movs	r2, #128	; 0x80
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f003 fb38 	bl	800c22c <memset>
				            			  memcpy(_firmware->remote_firmware_url, value_buff, value_index);
 8008bbc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008bc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3318      	adds	r3, #24
 8008bc8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8008bcc:	f107 0108 	add.w	r1, r7, #8
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f003 fbfc 	bl	800c3ce <memcpy>
				            			  break;
 8008bd6:	e01c      	b.n	8008c12 <get_firmware_info+0x246>
				            		  case 4:
				            			  memset(_firmware->local_firmwre_dir, 0, sizeof(_firmware->local_firmwre_dir));
 8008bd8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008bdc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3398      	adds	r3, #152	; 0x98
 8008be4:	2230      	movs	r2, #48	; 0x30
 8008be6:	2100      	movs	r1, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f003 fb1f 	bl	800c22c <memset>
				            			  memcpy(_firmware->local_firmwre_dir, value_buff, value_index);
 8008bee:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008bf2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3398      	adds	r3, #152	; 0x98
 8008bfa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8008bfe:	f107 0108 	add.w	r1, r7, #8
 8008c02:	4618      	mov	r0, r3
 8008c04:	f003 fbe3 	bl	800c3ce <memcpy>
				            			  success = 1 ;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
				            			  break;
 8008c0e:	e000      	b.n	8008c12 <get_firmware_info+0x246>
				            		  default:
				            			  break;
 8008c10:	bf00      	nop
				            	  }
				            	  break;
 8008c12:	e009      	b.n	8008c28 <get_firmware_info+0x25c>
			        	  for(int i=0; i<INFO_FIRMWARE_KEY_SIZE; i++)
 8008c14:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008c18:	3301      	adds	r3, #1
 8008c1a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008c1e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	f77f af67 	ble.w	8008af6 <get_firmware_info+0x12a>
				              }
			        	  }
			          }
			          if(lfs_read_buffer[index] == '}')
 8008c28:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008c2c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008c30:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008c34:	4413      	add	r3, r2
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b7d      	cmp	r3, #125	; 0x7d
 8008c3a:	d077      	beq.n	8008d2c <get_firmware_info+0x360>
			          {
			        	  break;
			          }
			          memset(key_buff, 0, sizeof(key_buff));
 8008c3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008c40:	2230      	movs	r2, #48	; 0x30
 8008c42:	2100      	movs	r1, #0
 8008c44:	4618      	mov	r0, r3
 8008c46:	f003 faf1 	bl	800c22c <memset>
			          memset(value_buff, 0, sizeof(value_buff));
 8008c4a:	f107 0308 	add.w	r3, r7, #8
 8008c4e:	2230      	movs	r2, #48	; 0x30
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f003 faea 	bl	800c22c <memset>
		              got_key = 1 ; got_value = 0 ; key_index =0 ; value_index=0  ;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008c64:	2300      	movs	r3, #0
 8008c66:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008c70:	e03d      	b.n	8008cee <get_firmware_info+0x322>
		          }
		          else if(lfs_read_buffer[index] == ':')
 8008c72:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008c76:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008c7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008c7e:	4413      	add	r3, r2
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b3a      	cmp	r3, #58	; 0x3a
 8008c84:	d106      	bne.n	8008c94 <get_firmware_info+0x2c8>
		          {
		        	  got_value = 1 ;	got_key = 0;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8008c92:	e02c      	b.n	8008cee <get_firmware_info+0x322>
		          }
		          else
		          {
			          if(got_key)
 8008c94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d012      	beq.n	8008cc2 <get_firmware_info+0x2f6>
			          {
			              key_buff[key_index++]= lfs_read_buffer[index] ;
 8008c9c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8008ca6:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8008caa:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8008cae:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8008cb2:	440a      	add	r2, r1
 8008cb4:	7811      	ldrb	r1, [r2, #0]
 8008cb6:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8008cba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008cbe:	54d1      	strb	r1, [r2, r3]
 8008cc0:	e015      	b.n	8008cee <get_firmware_info+0x322>
			          }
			          else if(got_value == 1)
 8008cc2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d111      	bne.n	8008cee <get_firmware_info+0x322>
			          {
			        	  value_buff[value_index++] = lfs_read_buffer[index];
 8008cca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 8008cd4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8008cd8:	f5a2 718e 	sub.w	r1, r2, #284	; 0x11c
 8008cdc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8008ce0:	440a      	add	r2, r1
 8008ce2:	7811      	ldrb	r1, [r2, #0]
 8008ce4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8008ce8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8008cec:	54d1      	strb	r1, [r2, r3]
			          }
		          }
	        	  index++ ;
 8008cee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
		      while(lfs_read_buffer[index])
 8008cf8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008cfc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8008d00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008d04:	4413      	add	r3, r2
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f47f aea9 	bne.w	8008a60 <get_firmware_info+0x94>
 8008d0e:	e00e      	b.n	8008d2e <get_firmware_info+0x362>
 8008d10:	0800e054 	.word	0x0800e054
 8008d14:	2000019c 	.word	0x2000019c
 8008d18:	0800dd58 	.word	0x0800dd58
 8008d1c:	0800dd8c 	.word	0x0800dd8c
 8008d20:	0800ddc0 	.word	0x0800ddc0
 8008d24:	0800dde4 	.word	0x0800dde4
 8008d28:	0800e43c 	.word	0x0800e43c
			        	  break;
 8008d2c:	bf00      	nop
		      }
		  }
		  lfs_file_close(&littlefs, &info_file);
 8008d2e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008d32:	4619      	mov	r1, r3
 8008d34:	4813      	ldr	r0, [pc, #76]	; (8008d84 <get_firmware_info+0x3b8>)
 8008d36:	f7fe fe7f 	bl	8007a38 <lfs_file_close>
	}
	if(success == 1)
 8008d3a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d117      	bne.n	8008d72 <get_firmware_info+0x3a6>
	{
		_firmware->read = firmware_read;
 8008d42:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008d46:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a0e      	ldr	r2, [pc, #56]	; (8008d88 <get_firmware_info+0x3bc>)
 8008d4e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		_firmware->write = firmware_write;
 8008d52:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008d56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <get_firmware_info+0x3c0>)
 8008d5e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		_firmware->remove = remove_firmware ;
 8008d62:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8008d66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <get_firmware_info+0x3c4>)
 8008d6e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	}
	return success ;
 8008d72:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008d76:	b2db      	uxtb	r3, r3
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	2000019c 	.word	0x2000019c
 8008d88:	08009175 	.word	0x08009175
 8008d8c:	08009055 	.word	0x08009055
 8008d90:	08009281 	.word	0x08009281

08008d94 <set_firmware_info>:

uint8_t set_firmware_info(Info_firmware_t * _firmware)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b0e7      	sub	sp, #412	; 0x19c
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008d9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008da2:	6018      	str	r0, [r3, #0]
	int success = 0 ;
 8008da4:	2300      	movs	r3, #0
 8008da6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

	char lfs_read_buffer[FIRMWARE_INFO_FILE_SIZE];
	char value_buff[48];
	lfs_file_t file;

	memset(lfs_read_buffer, 0, FIRMWARE_INFO_FILE_SIZE);
 8008daa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f003 fa39 	bl	800c22c <memset>
	lfs_read_buffer[0] = '{';
 8008dba:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc2:	227b      	movs	r2, #123	; 0x7b
 8008dc4:	701a      	strb	r2, [r3, #0]
	for(int indx = 0 ; indx < INFO_FIRMWARE_KEY_SIZE; indx++)
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008dcc:	e0d7      	b.n	8008f7e <set_firmware_info+0x1ea>
	{
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, info_firmware_keys[indx]);  strcat(lfs_read_buffer, "\"");
 8008dce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7f7 f9ba 	bl	800014c <strlen>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008de0:	4413      	add	r3, r2
 8008de2:	4992      	ldr	r1, [pc, #584]	; (800902c <set_firmware_info+0x298>)
 8008de4:	461a      	mov	r2, r3
 8008de6:	460b      	mov	r3, r1
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	8013      	strh	r3, [r2, #0]
 8008dec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008df0:	4613      	mov	r3, r2
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4a8d      	ldr	r2, [pc, #564]	; (8009030 <set_firmware_info+0x29c>)
 8008dfa:	441a      	add	r2, r3
 8008dfc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008e00:	4611      	mov	r1, r2
 8008e02:	4618      	mov	r0, r3
 8008e04:	f003 fa1a 	bl	800c23c <strcat>
 8008e08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f7 f99d 	bl	800014c <strlen>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008e1a:	4413      	add	r3, r2
 8008e1c:	4983      	ldr	r1, [pc, #524]	; (800902c <set_firmware_info+0x298>)
 8008e1e:	461a      	mov	r2, r3
 8008e20:	460b      	mov	r3, r1
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	8013      	strh	r3, [r2, #0]
		  strcat(lfs_read_buffer, (char*)":");
 8008e26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 f98e 	bl	800014c <strlen>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008e38:	4413      	add	r3, r2
 8008e3a:	497e      	ldr	r1, [pc, #504]	; (8009034 <set_firmware_info+0x2a0>)
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	460b      	mov	r3, r1
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	8013      	strh	r3, [r2, #0]
		  memset(value_buff, 0, sizeof(value_buff));
 8008e44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008e48:	2230      	movs	r2, #48	; 0x30
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f003 f9ed 	bl	800c22c <memset>
		  switch(indx)
 8008e52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d852      	bhi.n	8008f00 <set_firmware_info+0x16c>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <set_firmware_info+0xcc>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008e75 	.word	0x08008e75
 8008e64:	08008e91 	.word	0x08008e91
 8008e68:	08008ead 	.word	0x08008ead
 8008e6c:	08008ec9 	.word	0x08008ec9
 8008e70:	08008ee5 	.word	0x08008ee5
		  {
	  	  	  case 0:
	  	  		  strcat(value_buff, (char*)_firmware->version);
 8008e74:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008e78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f103 0208 	add.w	r2, r3, #8
 8008e82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008e86:	4611      	mov	r1, r2
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f003 f9d7 	bl	800c23c <strcat>
	  	  		  break;
 8008e8e:	e038      	b.n	8008f02 <set_firmware_info+0x16e>
	  	  	  case 1:
	  	  		  itoa(_firmware->size, value_buff, 10);
 8008e90:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008e94:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008ea2:	220a      	movs	r2, #10
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f002 fe07 	bl	800bab8 <itoa>
	  	  		  break;
 8008eaa:	e02a      	b.n	8008f02 <set_firmware_info+0x16e>
	  	  	  case 2:
	  	  		  itoa(_firmware->checksum, value_buff, 10);
 8008eac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008eb0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008ebe:	220a      	movs	r2, #10
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	f002 fdf9 	bl	800bab8 <itoa>
	  	  		  break;
 8008ec6:	e01c      	b.n	8008f02 <set_firmware_info+0x16e>
	  	  	  case 3:
	  	  		  strcat(value_buff, (char*)_firmware->remote_firmware_url);
 8008ec8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008ecc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f103 0218 	add.w	r2, r3, #24
 8008ed6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f003 f9ad 	bl	800c23c <strcat>
	  	  		  break;
 8008ee2:	e00e      	b.n	8008f02 <set_firmware_info+0x16e>
	  	  	  case 4:
	  	  		  strcat(value_buff, (char*)_firmware->local_firmwre_dir);
 8008ee4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008ee8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008ef2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f003 f99f 	bl	800c23c <strcat>
	  	  		  break;
 8008efe:	e000      	b.n	8008f02 <set_firmware_info+0x16e>
	  	  	  default:
	  	  		  break;
 8008f00:	bf00      	nop
		  }
		  strcat(lfs_read_buffer, "\""); strcat(lfs_read_buffer, value_buff);  strcat(lfs_read_buffer, "\"");
 8008f02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f7 f920 	bl	800014c <strlen>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f14:	4413      	add	r3, r2
 8008f16:	4945      	ldr	r1, [pc, #276]	; (800902c <set_firmware_info+0x298>)
 8008f18:	461a      	mov	r2, r3
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	8013      	strh	r3, [r2, #0]
 8008f20:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008f24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f003 f986 	bl	800c23c <strcat>
 8008f30:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f7 f909 	bl	800014c <strlen>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f42:	4413      	add	r3, r2
 8008f44:	4939      	ldr	r1, [pc, #228]	; (800902c <set_firmware_info+0x298>)
 8008f46:	461a      	mov	r2, r3
 8008f48:	460b      	mov	r3, r1
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	8013      	strh	r3, [r2, #0]
		  if(indx < INFO_FIRMWARE_KEY_SIZE-1)	 strcat(lfs_read_buffer, ",");
 8008f4e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	dc0e      	bgt.n	8008f74 <set_firmware_info+0x1e0>
 8008f56:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f7 f8f6 	bl	800014c <strlen>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f68:	4413      	add	r3, r2
 8008f6a:	4933      	ldr	r1, [pc, #204]	; (8009038 <set_firmware_info+0x2a4>)
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	460b      	mov	r3, r1
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	8013      	strh	r3, [r2, #0]
	for(int indx = 0 ; indx < INFO_FIRMWARE_KEY_SIZE; indx++)
 8008f74:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008f78:	3301      	adds	r3, #1
 8008f7a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008f7e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	f77f af23 	ble.w	8008dce <set_firmware_info+0x3a>
	}
	strcat(lfs_read_buffer, (char*)"}");
 8008f88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7f7 f8dd 	bl	800014c <strlen>
 8008f92:	4603      	mov	r3, r0
 8008f94:	461a      	mov	r2, r3
 8008f96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008f9a:	4413      	add	r3, r2
 8008f9c:	4927      	ldr	r1, [pc, #156]	; (800903c <set_firmware_info+0x2a8>)
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	8013      	strh	r3, [r2, #0]

#ifdef DEBUG
	printf("set_store_info :  new firmware string : %s\n", lfs_read_buffer);
 8008fa6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008faa:	4619      	mov	r1, r3
 8008fac:	4824      	ldr	r0, [pc, #144]	; (8009040 <set_firmware_info+0x2ac>)
 8008fae:	f002 ffdf 	bl	800bf70 <iprintf>
#endif

	if( lfs_file_open(&littlefs, &file, FIRMWARE_INFO_FILE_NAME, LFS_O_RDWR | LFS_O_CREAT ) < 0 )
 8008fb2:	f107 010c 	add.w	r1, r7, #12
 8008fb6:	f240 1303 	movw	r3, #259	; 0x103
 8008fba:	4a22      	ldr	r2, [pc, #136]	; (8009044 <set_firmware_info+0x2b0>)
 8008fbc:	4822      	ldr	r0, [pc, #136]	; (8009048 <set_firmware_info+0x2b4>)
 8008fbe:	f7fe fd07 	bl	80079d0 <lfs_file_open>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da04      	bge.n	8008fd2 <set_firmware_info+0x23e>
	{
#ifdef DEBUG
		  printf("set_store_info: fail to open %s from save_info\n", FIRMWARE_INFO_FILE_NAME);	while(1);
 8008fc8:	491e      	ldr	r1, [pc, #120]	; (8009044 <set_firmware_info+0x2b0>)
 8008fca:	4820      	ldr	r0, [pc, #128]	; (800904c <set_firmware_info+0x2b8>)
 8008fcc:	f002 ffd0 	bl	800bf70 <iprintf>
 8008fd0:	e7fe      	b.n	8008fd0 <set_firmware_info+0x23c>
#endif
	}
	else
	{
		  if(lfs_file_write(&littlefs, &file, lfs_read_buffer, strlen(lfs_read_buffer)) < strlen(lfs_read_buffer))
 8008fd2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7f7 f8b8 	bl	800014c <strlen>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008fe2:	f107 010c 	add.w	r1, r7, #12
 8008fe6:	4818      	ldr	r0, [pc, #96]	; (8009048 <set_firmware_info+0x2b4>)
 8008fe8:	f7fe fd82 	bl	8007af0 <lfs_file_write>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461c      	mov	r4, r3
 8008ff0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7f7 f8a9 	bl	800014c <strlen>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	d204      	bcs.n	800900a <set_firmware_info+0x276>
		  {
#ifdef DEBUG
			  printf("set_store_info :  fail to write new %s from main\n", FIRMWARE_INFO_FILE_NAME); while(1);
 8009000:	4910      	ldr	r1, [pc, #64]	; (8009044 <set_firmware_info+0x2b0>)
 8009002:	4813      	ldr	r0, [pc, #76]	; (8009050 <set_firmware_info+0x2bc>)
 8009004:	f002 ffb4 	bl	800bf70 <iprintf>
 8009008:	e7fe      	b.n	8009008 <set_firmware_info+0x274>
#endif
		  }
		  else
		  {
			  success = 1 ;
 800900a:	2301      	movs	r3, #1
 800900c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		  }
		  lfs_file_close(&littlefs, &file);
 8009010:	f107 030c 	add.w	r3, r7, #12
 8009014:	4619      	mov	r1, r3
 8009016:	480c      	ldr	r0, [pc, #48]	; (8009048 <set_firmware_info+0x2b4>)
 8009018:	f7fe fd0e 	bl	8007a38 <lfs_file_close>
	}
    return success ;
 800901c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009020:	b2db      	uxtb	r3, r3
}
 8009022:	4618      	mov	r0, r3
 8009024:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8009028:	46bd      	mov	sp, r7
 800902a:	bd90      	pop	{r4, r7, pc}
 800902c:	0800de0c 	.word	0x0800de0c
 8009030:	0800e43c 	.word	0x0800e43c
 8009034:	0800de10 	.word	0x0800de10
 8009038:	0800de14 	.word	0x0800de14
 800903c:	0800de18 	.word	0x0800de18
 8009040:	0800e068 	.word	0x0800e068
 8009044:	0800e054 	.word	0x0800e054
 8009048:	2000019c 	.word	0x2000019c
 800904c:	0800de44 	.word	0x0800de44
 8009050:	0800de74 	.word	0x0800de74

08009054 <firmware_write>:

static int firmware_write(uint8_t *buff, uint16_t size)
{
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b0a9      	sub	sp, #164	; 0xa4
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	807b      	strh	r3, [r7, #2]
	  lfs_file_t file ;
	  int write_size = -1 ;
 8009060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  char firmware_path[64];

	  memset(firmware_path, 0, sizeof(firmware_path));
 8009068:	f107 0308 	add.w	r3, r7, #8
 800906c:	2240      	movs	r2, #64	; 0x40
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f003 f8db 	bl	800c22c <memset>

	  strcpy(firmware_path, FIRMWARE_DIR_NAME);  strcat(firmware_path, "/"); strcat(firmware_path, FIRMWARE_FILE_NAME);
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4a36      	ldr	r2, [pc, #216]	; (8009154 <firmware_write+0x100>)
 800907c:	461c      	mov	r4, r3
 800907e:	4613      	mov	r3, r2
 8009080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009082:	c407      	stmia	r4!, {r0, r1, r2}
 8009084:	7023      	strb	r3, [r4, #0]
 8009086:	f107 0308 	add.w	r3, r7, #8
 800908a:	4618      	mov	r0, r3
 800908c:	f7f7 f85e 	bl	800014c <strlen>
 8009090:	4603      	mov	r3, r0
 8009092:	461a      	mov	r2, r3
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4413      	add	r3, r2
 800909a:	492f      	ldr	r1, [pc, #188]	; (8009158 <firmware_write+0x104>)
 800909c:	461a      	mov	r2, r3
 800909e:	460b      	mov	r3, r1
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	8013      	strh	r3, [r2, #0]
 80090a4:	f107 0308 	add.w	r3, r7, #8
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 f84f 	bl	800014c <strlen>
 80090ae:	4603      	mov	r3, r0
 80090b0:	461a      	mov	r2, r3
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4413      	add	r3, r2
 80090b8:	4928      	ldr	r1, [pc, #160]	; (800915c <firmware_write+0x108>)
 80090ba:	461a      	mov	r2, r3
 80090bc:	460b      	mov	r3, r1
 80090be:	cb03      	ldmia	r3!, {r0, r1}
 80090c0:	6010      	str	r0, [r2, #0]
 80090c2:	6051      	str	r1, [r2, #4]

	  if( lfs_file_open( &littlefs, &file, firmware_path, LFS_O_RDWR | LFS_O_CREAT)  < 0 )
 80090c4:	f107 0208 	add.w	r2, r7, #8
 80090c8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80090cc:	f240 1303 	movw	r3, #259	; 0x103
 80090d0:	4823      	ldr	r0, [pc, #140]	; (8009160 <firmware_write+0x10c>)
 80090d2:	f7fe fc7d 	bl	80079d0 <lfs_file_open>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da06      	bge.n	80090ea <firmware_write+0x96>
	  {
#ifdef DEBUG
		  printf("firmware_write :fail to open firmware dir %s \n", firmware_path); while(1);
 80090dc:	f107 0308 	add.w	r3, r7, #8
 80090e0:	4619      	mov	r1, r3
 80090e2:	4820      	ldr	r0, [pc, #128]	; (8009164 <firmware_write+0x110>)
 80090e4:	f002 ff44 	bl	800bf70 <iprintf>
 80090e8:	e7fe      	b.n	80090e8 <firmware_write+0x94>
#endif
	  }
	  else
	  {
		  if(lfs_file_seek(&littlefs, &file, 0, LFS_SEEK_END) < 0)
 80090ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80090ee:	2302      	movs	r3, #2
 80090f0:	2200      	movs	r2, #0
 80090f2:	481b      	ldr	r0, [pc, #108]	; (8009160 <firmware_write+0x10c>)
 80090f4:	f7fe fd2c 	bl	8007b50 <lfs_file_seek>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	da03      	bge.n	8009106 <firmware_write+0xb2>
		  {

#ifdef DEBUG
			  printf("firmware_write : fail to set seek end to write \n"); while(1);
 80090fe:	481a      	ldr	r0, [pc, #104]	; (8009168 <firmware_write+0x114>)
 8009100:	f002 ffa4 	bl	800c04c <puts>
 8009104:	e7fe      	b.n	8009104 <firmware_write+0xb0>
#endif
		  }
		  else
		  {
			  write_size = lfs_file_write(&littlefs, &file, buff, size) ;
 8009106:	887b      	ldrh	r3, [r7, #2]
 8009108:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4814      	ldr	r0, [pc, #80]	; (8009160 <firmware_write+0x10c>)
 8009110:	f7fe fcee 	bl	8007af0 <lfs_file_write>
 8009114:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			  if(write_size < 0)
 8009118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800911c:	2b00      	cmp	r3, #0
 800911e:	da05      	bge.n	800912c <firmware_write+0xd8>
			  {
#ifdef DEBUG
				  printf("firmware_write :  fail to write firmware .%d byte.\n", size); while(1);
 8009120:	887b      	ldrh	r3, [r7, #2]
 8009122:	4619      	mov	r1, r3
 8009124:	4811      	ldr	r0, [pc, #68]	; (800916c <firmware_write+0x118>)
 8009126:	f002 ff23 	bl	800bf70 <iprintf>
 800912a:	e7fe      	b.n	800912a <firmware_write+0xd6>
#endif
			  }
			  else
			  {
#ifdef DEBUG
				  printf("firmware_write : successfully write %d byte at dir %s   \n", write_size, firmware_path);
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	461a      	mov	r2, r3
 8009132:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009136:	480e      	ldr	r0, [pc, #56]	; (8009170 <firmware_write+0x11c>)
 8009138:	f002 ff1a 	bl	800bf70 <iprintf>
#endif
			  }
		  }
		  lfs_file_close(&littlefs, &file);
 800913c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009140:	4619      	mov	r1, r3
 8009142:	4807      	ldr	r0, [pc, #28]	; (8009160 <firmware_write+0x10c>)
 8009144:	f7fe fc78 	bl	8007a38 <lfs_file_close>
	  }
	  return write_size ;
 8009148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
 800914c:	4618      	mov	r0, r3
 800914e:	37a4      	adds	r7, #164	; 0xa4
 8009150:	46bd      	mov	sp, r7
 8009152:	bd90      	pop	{r4, r7, pc}
 8009154:	0800db4c 	.word	0x0800db4c
 8009158:	0800dea8 	.word	0x0800dea8
 800915c:	0800e094 	.word	0x0800e094
 8009160:	2000019c 	.word	0x2000019c
 8009164:	0800e09c 	.word	0x0800e09c
 8009168:	0800e0cc 	.word	0x0800e0cc
 800916c:	0800e0fc 	.word	0x0800e0fc
 8009170:	0800e130 	.word	0x0800e130

08009174 <firmware_read>:
static int firmware_read(uint8_t *buff, uint16_t size, uint32_t seek)
{
 8009174:	b590      	push	{r4, r7, lr}
 8009176:	b0ab      	sub	sp, #172	; 0xac
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	460b      	mov	r3, r1
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	817b      	strh	r3, [r7, #10]
	  lfs_file_t file ;
	  int read_size = -1 ;
 8009182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  char firmware_path[64];

	  memset(firmware_path, 0, sizeof(firmware_path));
 800918a:	f107 0310 	add.w	r3, r7, #16
 800918e:	2240      	movs	r2, #64	; 0x40
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f003 f84a 	bl	800c22c <memset>

	  strcpy(firmware_path, FIRMWARE_DIR_NAME); 	strcat(firmware_path, "/");	strcat(firmware_path, FIRMWARE_FILE_NAME);
 8009198:	f107 0310 	add.w	r3, r7, #16
 800919c:	4a31      	ldr	r2, [pc, #196]	; (8009264 <firmware_read+0xf0>)
 800919e:	461c      	mov	r4, r3
 80091a0:	4613      	mov	r3, r2
 80091a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091a4:	c407      	stmia	r4!, {r0, r1, r2}
 80091a6:	7023      	strb	r3, [r4, #0]
 80091a8:	f107 0310 	add.w	r3, r7, #16
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f6 ffcd 	bl	800014c <strlen>
 80091b2:	4603      	mov	r3, r0
 80091b4:	461a      	mov	r2, r3
 80091b6:	f107 0310 	add.w	r3, r7, #16
 80091ba:	4413      	add	r3, r2
 80091bc:	492a      	ldr	r1, [pc, #168]	; (8009268 <firmware_read+0xf4>)
 80091be:	461a      	mov	r2, r3
 80091c0:	460b      	mov	r3, r1
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	8013      	strh	r3, [r2, #0]
 80091c6:	f107 0310 	add.w	r3, r7, #16
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f6 ffbe 	bl	800014c <strlen>
 80091d0:	4603      	mov	r3, r0
 80091d2:	461a      	mov	r2, r3
 80091d4:	f107 0310 	add.w	r3, r7, #16
 80091d8:	4413      	add	r3, r2
 80091da:	4924      	ldr	r1, [pc, #144]	; (800926c <firmware_read+0xf8>)
 80091dc:	461a      	mov	r2, r3
 80091de:	460b      	mov	r3, r1
 80091e0:	cb03      	ldmia	r3!, {r0, r1}
 80091e2:	6010      	str	r0, [r2, #0]
 80091e4:	6051      	str	r1, [r2, #4]

	  if( lfs_file_open( &littlefs, &file, firmware_path, LFS_O_RDWR )  < 0 )
 80091e6:	f107 0210 	add.w	r2, r7, #16
 80091ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80091ee:	2303      	movs	r3, #3
 80091f0:	481f      	ldr	r0, [pc, #124]	; (8009270 <firmware_read+0xfc>)
 80091f2:	f7fe fbed 	bl	80079d0 <lfs_file_open>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da06      	bge.n	800920a <firmware_read+0x96>
	  {
#ifdef DEBUG
		  printf("firmware_read :fail to open firmware dir %s \n", firmware_path); while(1);
 80091fc:	f107 0310 	add.w	r3, r7, #16
 8009200:	4619      	mov	r1, r3
 8009202:	481c      	ldr	r0, [pc, #112]	; (8009274 <firmware_read+0x100>)
 8009204:	f002 feb4 	bl	800bf70 <iprintf>
 8009208:	e7fe      	b.n	8009208 <firmware_read+0x94>
#endif
	  }
	  else
	  {
		  if(lfs_file_seek(&littlefs, &file, seek, LFS_SEEK_SET) <  0)
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009210:	2300      	movs	r3, #0
 8009212:	4817      	ldr	r0, [pc, #92]	; (8009270 <firmware_read+0xfc>)
 8009214:	f7fe fc9c 	bl	8007b50 <lfs_file_seek>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	da04      	bge.n	8009228 <firmware_read+0xb4>
		  {

#ifdef DEBUG
			  printf("firmware_read : fail to set seek  at %lu  \n", seek); while(1);
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4815      	ldr	r0, [pc, #84]	; (8009278 <firmware_read+0x104>)
 8009222:	f002 fea5 	bl	800bf70 <iprintf>
 8009226:	e7fe      	b.n	8009226 <firmware_read+0xb2>
#endif
		  }
		  else
		  {
			  read_size = lfs_file_read(&littlefs, &file, buff, size) ;
 8009228:	897b      	ldrh	r3, [r7, #10]
 800922a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	480f      	ldr	r0, [pc, #60]	; (8009270 <firmware_read+0xfc>)
 8009232:	f7fe fc2d 	bl	8007a90 <lfs_file_read>
 8009236:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			  if(read_size < 0 )
 800923a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800923e:	2b00      	cmp	r3, #0
 8009240:	da04      	bge.n	800924c <firmware_read+0xd8>
			  {
#ifdef DEBUG
				  printf("firmware_read : fail to read firmware at seek %lu \n", seek); while(1);
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	480d      	ldr	r0, [pc, #52]	; (800927c <firmware_read+0x108>)
 8009246:	f002 fe93 	bl	800bf70 <iprintf>
 800924a:	e7fe      	b.n	800924a <firmware_read+0xd6>
				  //printf("firmware_read : successfully read at seek %lu  \n", seek);
#endif
			  }
		  }

		  lfs_file_close(&littlefs, &file);
 800924c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009250:	4619      	mov	r1, r3
 8009252:	4807      	ldr	r0, [pc, #28]	; (8009270 <firmware_read+0xfc>)
 8009254:	f7fe fbf0 	bl	8007a38 <lfs_file_close>
	  }
	  return read_size ;
 8009258:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
}
 800925c:	4618      	mov	r0, r3
 800925e:	37ac      	adds	r7, #172	; 0xac
 8009260:	46bd      	mov	sp, r7
 8009262:	bd90      	pop	{r4, r7, pc}
 8009264:	0800db4c 	.word	0x0800db4c
 8009268:	0800dea8 	.word	0x0800dea8
 800926c:	0800e094 	.word	0x0800e094
 8009270:	2000019c 	.word	0x2000019c
 8009274:	0800e16c 	.word	0x0800e16c
 8009278:	0800e19c 	.word	0x0800e19c
 800927c:	0800e1c8 	.word	0x0800e1c8

08009280 <remove_firmware>:

static Storage_error_t remove_firmware()
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b093      	sub	sp, #76	; 0x4c
 8009284:	af00      	add	r7, sp, #0
	  char firmware_path[64];

	  Storage_error_t err = STORAGE_OK ;
 8009286:	2300      	movs	r3, #0
 8009288:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	  memset(firmware_path, 0, sizeof(firmware_path));
 800928c:	1d3b      	adds	r3, r7, #4
 800928e:	2240      	movs	r2, #64	; 0x40
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f002 ffca 	bl	800c22c <memset>

	  strcpy(firmware_path, FIRMWARE_DIR_NAME); 	strcat(firmware_path, "/");	strcat(firmware_path, FIRMWARE_FILE_NAME);
 8009298:	1d3b      	adds	r3, r7, #4
 800929a:	4a1a      	ldr	r2, [pc, #104]	; (8009304 <remove_firmware+0x84>)
 800929c:	461c      	mov	r4, r3
 800929e:	4613      	mov	r3, r2
 80092a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092a2:	c407      	stmia	r4!, {r0, r1, r2}
 80092a4:	7023      	strb	r3, [r4, #0]
 80092a6:	1d3b      	adds	r3, r7, #4
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7f6 ff4f 	bl	800014c <strlen>
 80092ae:	4603      	mov	r3, r0
 80092b0:	461a      	mov	r2, r3
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	4413      	add	r3, r2
 80092b6:	4914      	ldr	r1, [pc, #80]	; (8009308 <remove_firmware+0x88>)
 80092b8:	461a      	mov	r2, r3
 80092ba:	460b      	mov	r3, r1
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	8013      	strh	r3, [r2, #0]
 80092c0:	1d3b      	adds	r3, r7, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7f6 ff42 	bl	800014c <strlen>
 80092c8:	4603      	mov	r3, r0
 80092ca:	461a      	mov	r2, r3
 80092cc:	1d3b      	adds	r3, r7, #4
 80092ce:	4413      	add	r3, r2
 80092d0:	490e      	ldr	r1, [pc, #56]	; (800930c <remove_firmware+0x8c>)
 80092d2:	461a      	mov	r2, r3
 80092d4:	460b      	mov	r3, r1
 80092d6:	cb03      	ldmia	r3!, {r0, r1}
 80092d8:	6010      	str	r0, [r2, #0]
 80092da:	6051      	str	r1, [r2, #4]
	  if(lfs_remove(&littlefs , firmware_path) < 0)
 80092dc:	1d3b      	adds	r3, r7, #4
 80092de:	4619      	mov	r1, r3
 80092e0:	480b      	ldr	r0, [pc, #44]	; (8009310 <remove_firmware+0x90>)
 80092e2:	f7fe fb5f 	bl	80079a4 <lfs_remove>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	da05      	bge.n	80092f8 <remove_firmware+0x78>
	  {
		  printf("fail to remove file %s", firmware_path); while(1);
 80092ec:	1d3b      	adds	r3, r7, #4
 80092ee:	4619      	mov	r1, r3
 80092f0:	4808      	ldr	r0, [pc, #32]	; (8009314 <remove_firmware+0x94>)
 80092f2:	f002 fe3d 	bl	800bf70 <iprintf>
 80092f6:	e7fe      	b.n	80092f6 <remove_firmware+0x76>
		  err = STORAGE_REMOVE_FAIL ;
	  }
	  return err ;
 80092f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	374c      	adds	r7, #76	; 0x4c
 8009300:	46bd      	mov	sp, r7
 8009302:	bd90      	pop	{r4, r7, pc}
 8009304:	0800db4c 	.word	0x0800db4c
 8009308:	0800dea8 	.word	0x0800dea8
 800930c:	0800e094 	.word	0x0800e094
 8009310:	2000019c 	.word	0x2000019c
 8009314:	0800e1fc 	.word	0x0800e1fc

08009318 <SPIF_Lock>:
#define SPIF_STATUS3_HOLD (1 << 7)

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	while (Handle->Lock)
 8009320:	e002      	b.n	8009328 <SPIF_Lock+0x10>
	{
		SPIF_Delay(1);
 8009322:	2001      	movs	r0, #1
 8009324:	f000 fd82 	bl	8009e2c <HAL_Delay>
	while (Handle->Lock)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	7b1b      	ldrb	r3, [r3, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1f8      	bne.n	8009322 <SPIF_Lock+0xa>
	}
	Handle->Lock = 1;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	731a      	strb	r2, [r3, #12]
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
	Handle->Lock = 0;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	731a      	strb	r2, [r3, #12]
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	bc80      	pop	{r7}
 8009354:	4770      	bx	lr

08009356 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6858      	ldr	r0, [r3, #4]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	b29b      	uxth	r3, r3
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	4619      	mov	r1, r3
 8009370:	f000 ffe8 	bl	800a344 <HAL_GPIO_WritePin>
	for (int i = 0; i < 10; i++);
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	e002      	b.n	8009380 <SPIF_CsPin+0x2a>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b09      	cmp	r3, #9
 8009384:	ddf9      	ble.n	800937a <SPIF_CsPin+0x24>
}
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af02      	add	r7, sp, #8
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 800939e:	2300      	movs	r3, #0
 80093a0:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
	if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	4613      	mov	r3, r2
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	68b9      	ldr	r1, [r7, #8]
 80093b4:	f001 fecd 	bl	800b152 <HAL_SPI_TransmitReceive>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <SPIF_TransmitReceive+0x32>
	{
		retVal = true;
 80093be:	2301      	movs	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
				break;
      }
		}
	}
#endif
	return retVal;
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 80093da:	2300      	movs	r3, #0
 80093dc:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
	if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	f001 fc57 	bl	800ac9c <HAL_SPI_Transmit>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <SPIF_Transmit+0x2c>
	{
		retVal = true;
 80093f4:	2301      	movs	r3, #1
 80093f6:	75fb      	strb	r3, [r7, #23]
				break;
      }
		}
	}
#endif
	return retVal;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b086      	sub	sp, #24
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
 800940e:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
	if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	b29a      	uxth	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	f001 fd7f 	bl	800af22 <HAL_SPI_Receive>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <SPIF_Receive+0x2c>
	{
		retVal = true;
 800942a:	2301      	movs	r3, #1
 800942c:	75fb      	strb	r3, [r7, #23]
				break;
      }
		}
	}
#endif
	return retVal;
 800942e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	bool retVal = true;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8009444:	2306      	movs	r3, #6
 8009446:	733b      	strb	r3, [r7, #12]
	SPIF_CsPin(Handle, 0);
 8009448:	2100      	movs	r1, #0
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff ff83 	bl	8009356 <SPIF_CsPin>
	if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8009450:	f107 010c 	add.w	r1, r7, #12
 8009454:	2364      	movs	r3, #100	; 0x64
 8009456:	2201      	movs	r2, #1
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff ffb7 	bl	80093cc <SPIF_Transmit>
 800945e:	4603      	mov	r3, r0
 8009460:	f083 0301 	eor.w	r3, r3, #1
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <SPIF_WriteEnable+0x36>
	{
		retVal = false;
 800946a:	2300      	movs	r3, #0
 800946c:	73fb      	strb	r3, [r7, #15]
		dprintf("SPIF_WriteEnable() Error\r\n");
	}
	SPIF_CsPin(Handle, 1);
 800946e:	2101      	movs	r1, #1
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff ff70 	bl	8009356 <SPIF_CsPin>
	return retVal;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	bool retVal = true;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 800948c:	2304      	movs	r3, #4
 800948e:	733b      	strb	r3, [r7, #12]
	SPIF_CsPin(Handle, 0);
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff ff5f 	bl	8009356 <SPIF_CsPin>
	if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8009498:	f107 010c 	add.w	r1, r7, #12
 800949c:	2364      	movs	r3, #100	; 0x64
 800949e:	2201      	movs	r2, #1
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ff93 	bl	80093cc <SPIF_Transmit>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f083 0301 	eor.w	r3, r3, #1
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <SPIF_WriteDisable+0x36>
	{
		retVal = false;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
		dprintf("SPIF_WriteDisable() Error\r\n");
	}
	SPIF_CsPin(Handle, 1);
 80094b6:	2101      	movs	r1, #1
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff ff4c 	bl	8009356 <SPIF_CsPin>
	return retVal;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	6078      	str	r0, [r7, #4]
	uint8_t retVal = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
	uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 80094d4:	f24a 5305 	movw	r3, #42245	; 0xa505
 80094d8:	81bb      	strh	r3, [r7, #12]
	uint8_t rx[2];
	SPIF_CsPin(Handle, 0);
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff ff3a 	bl	8009356 <SPIF_CsPin>
	if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80094e2:	f107 0208 	add.w	r2, r7, #8
 80094e6:	f107 010c 	add.w	r1, r7, #12
 80094ea:	2364      	movs	r3, #100	; 0x64
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2302      	movs	r3, #2
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7ff ff4d 	bl	8009390 <SPIF_TransmitReceive>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <SPIF_ReadReg1+0x38>
	{
		retVal = rx[1];
 80094fc:	7a7b      	ldrb	r3, [r7, #9]
 80094fe:	73fb      	strb	r3, [r7, #15]
	}
	SPIF_CsPin(Handle, 1);
 8009500:	2101      	movs	r1, #1
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff ff27 	bl	8009356 <SPIF_CsPin>
	return retVal;
 8009508:	7bfb      	ldrb	r3, [r7, #15]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
	bool retVal = false;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
	uint32_t startTime = HAL_GetTick();
 8009520:	f000 fc7a 	bl	8009e18 <HAL_GetTick>
 8009524:	60b8      	str	r0, [r7, #8]
	while (1)
	{
		SPIF_Delay(1);
 8009526:	2001      	movs	r0, #1
 8009528:	f000 fc80 	bl	8009e2c <HAL_Delay>
		if (HAL_GetTick() - startTime >= Timeout)
 800952c:	f000 fc74 	bl	8009e18 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d90a      	bls.n	8009552 <SPIF_WaitForWriting+0x40>
		{
			dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
			break;
		}
		if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f7ff ffc3 	bl	80094c8 <SPIF_ReadReg1>
 8009542:	4603      	mov	r3, r0
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ec      	bne.n	8009526 <SPIF_WaitForWriting+0x14>
		{
			retVal = true;
 800954c:	2301      	movs	r3, #1
 800954e:	73fb      	strb	r3, [r7, #15]
			break;
 8009550:	e000      	b.n	8009554 <SPIF_WaitForWriting+0x42>
			break;
 8009552:	bf00      	nop
		}
	}
	return retVal;
 8009554:	7bfb      	ldrb	r3, [r7, #15]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af02      	add	r7, sp, #8
 8009566:	6078      	str	r0, [r7, #4]
	uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8009568:	f06f 0360 	mvn.w	r3, #96	; 0x60
 800956c:	613b      	str	r3, [r7, #16]
	uint8_t rx[4];
	bool retVal = false;
 800956e:	2300      	movs	r3, #0
 8009570:	75fb      	strb	r3, [r7, #23]
	do
	{
		dprintf("SPIF_FindChip()\r\n");
		SPIF_CsPin(Handle, 0);
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f7ff feee 	bl	8009356 <SPIF_CsPin>
		if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 800957a:	f107 020c 	add.w	r2, r7, #12
 800957e:	f107 0110 	add.w	r1, r7, #16
 8009582:	2364      	movs	r3, #100	; 0x64
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2304      	movs	r3, #4
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff ff01 	bl	8009390 <SPIF_TransmitReceive>
 800958e:	4603      	mov	r3, r0
 8009590:	f083 0301 	eor.w	r3, r3, #1
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <SPIF_FindChip+0x44>
		{
			SPIF_CsPin(Handle, 1);
 800959a:	2101      	movs	r1, #1
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff feda 	bl	8009356 <SPIF_CsPin>
			break;
 80095a2:	e165      	b.n	8009870 <SPIF_FindChip+0x310>
		}
		SPIF_CsPin(Handle, 1);
 80095a4:	2101      	movs	r1, #1
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fed5 	bl	8009356 <SPIF_CsPin>
		dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
		Handle->Manufactor = rx[1];
 80095ac:	7b7a      	ldrb	r2, [r7, #13]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	721a      	strb	r2, [r3, #8]
		Handle->MemType = rx[2];
 80095b2:	7bba      	ldrb	r2, [r7, #14]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	72da      	strb	r2, [r3, #11]
		Handle->Size = rx[3];
 80095b8:	7bfa      	ldrb	r2, [r7, #15]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	725a      	strb	r2, [r3, #9]

		dprintf("SPIF MANUFACTURE: ");
		switch (Handle->Manufactor)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	7a1b      	ldrb	r3, [r3, #8]
 80095c2:	2bef      	cmp	r3, #239	; 0xef
 80095c4:	f000 80e2 	beq.w	800978c <SPIF_FindChip+0x22c>
 80095c8:	2bef      	cmp	r3, #239	; 0xef
 80095ca:	f300 80db 	bgt.w	8009784 <SPIF_FindChip+0x224>
 80095ce:	2bd5      	cmp	r3, #213	; 0xd5
 80095d0:	f300 80d8 	bgt.w	8009784 <SPIF_FindChip+0x224>
 80095d4:	2bbf      	cmp	r3, #191	; 0xbf
 80095d6:	da16      	bge.n	8009606 <SPIF_FindChip+0xa6>
 80095d8:	2bad      	cmp	r3, #173	; 0xad
 80095da:	f000 80d9 	beq.w	8009790 <SPIF_FindChip+0x230>
 80095de:	2bad      	cmp	r3, #173	; 0xad
 80095e0:	f300 80d0 	bgt.w	8009784 <SPIF_FindChip+0x224>
 80095e4:	2ba1      	cmp	r3, #161	; 0xa1
 80095e6:	f300 80cd 	bgt.w	8009784 <SPIF_FindChip+0x224>
 80095ea:	2b85      	cmp	r3, #133	; 0x85
 80095ec:	da40      	bge.n	8009670 <SPIF_FindChip+0x110>
 80095ee:	2b62      	cmp	r3, #98	; 0x62
 80095f0:	f000 80d0 	beq.w	8009794 <SPIF_FindChip+0x234>
 80095f4:	2b62      	cmp	r3, #98	; 0x62
 80095f6:	f300 80c5 	bgt.w	8009784 <SPIF_FindChip+0x224>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	f300 80c0 	bgt.w	8009780 <SPIF_FindChip+0x220>
 8009600:	2b00      	cmp	r3, #0
 8009602:	dc77      	bgt.n	80096f4 <SPIF_FindChip+0x194>
 8009604:	e0be      	b.n	8009784 <SPIF_FindChip+0x224>
 8009606:	3bbf      	subs	r3, #191	; 0xbf
 8009608:	2b16      	cmp	r3, #22
 800960a:	f200 80bb 	bhi.w	8009784 <SPIF_FindChip+0x224>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <SPIF_FindChip+0xb4>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009799 	.word	0x08009799
 8009618:	08009785 	.word	0x08009785
 800961c:	08009785 	.word	0x08009785
 8009620:	08009799 	.word	0x08009799
 8009624:	08009785 	.word	0x08009785
 8009628:	08009785 	.word	0x08009785
 800962c:	08009785 	.word	0x08009785
 8009630:	08009785 	.word	0x08009785
 8009634:	08009785 	.word	0x08009785
 8009638:	08009799 	.word	0x08009799
 800963c:	08009785 	.word	0x08009785
 8009640:	08009785 	.word	0x08009785
 8009644:	08009785 	.word	0x08009785
 8009648:	08009785 	.word	0x08009785
 800964c:	08009785 	.word	0x08009785
 8009650:	08009785 	.word	0x08009785
 8009654:	08009785 	.word	0x08009785
 8009658:	08009785 	.word	0x08009785
 800965c:	08009785 	.word	0x08009785
 8009660:	08009785 	.word	0x08009785
 8009664:	08009785 	.word	0x08009785
 8009668:	08009785 	.word	0x08009785
 800966c:	08009799 	.word	0x08009799
 8009670:	3b85      	subs	r3, #133	; 0x85
 8009672:	2b1c      	cmp	r3, #28
 8009674:	f200 8086 	bhi.w	8009784 <SPIF_FindChip+0x224>
 8009678:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <SPIF_FindChip+0x120>)
 800967a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967e:	bf00      	nop
 8009680:	0800979d 	.word	0x0800979d
 8009684:	08009785 	.word	0x08009785
 8009688:	08009785 	.word	0x08009785
 800968c:	08009785 	.word	0x08009785
 8009690:	0800979d 	.word	0x0800979d
 8009694:	08009785 	.word	0x08009785
 8009698:	08009785 	.word	0x08009785
 800969c:	0800979d 	.word	0x0800979d
 80096a0:	08009785 	.word	0x08009785
 80096a4:	08009785 	.word	0x08009785
 80096a8:	08009785 	.word	0x08009785
 80096ac:	08009785 	.word	0x08009785
 80096b0:	08009785 	.word	0x08009785
 80096b4:	08009785 	.word	0x08009785
 80096b8:	08009785 	.word	0x08009785
 80096bc:	08009785 	.word	0x08009785
 80096c0:	08009785 	.word	0x08009785
 80096c4:	08009785 	.word	0x08009785
 80096c8:	08009785 	.word	0x08009785
 80096cc:	08009785 	.word	0x08009785
 80096d0:	08009785 	.word	0x08009785
 80096d4:	08009785 	.word	0x08009785
 80096d8:	08009785 	.word	0x08009785
 80096dc:	08009785 	.word	0x08009785
 80096e0:	08009785 	.word	0x08009785
 80096e4:	08009785 	.word	0x08009785
 80096e8:	08009785 	.word	0x08009785
 80096ec:	08009785 	.word	0x08009785
 80096f0:	0800979d 	.word	0x0800979d
 80096f4:	3b01      	subs	r3, #1
 80096f6:	2b1f      	cmp	r3, #31
 80096f8:	d844      	bhi.n	8009784 <SPIF_FindChip+0x224>
 80096fa:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <SPIF_FindChip+0x1a0>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	080097a1 	.word	0x080097a1
 8009704:	08009785 	.word	0x08009785
 8009708:	08009785 	.word	0x08009785
 800970c:	080097a1 	.word	0x080097a1
 8009710:	08009785 	.word	0x08009785
 8009714:	08009785 	.word	0x08009785
 8009718:	08009785 	.word	0x08009785
 800971c:	08009785 	.word	0x08009785
 8009720:	08009785 	.word	0x08009785
 8009724:	08009785 	.word	0x08009785
 8009728:	08009785 	.word	0x08009785
 800972c:	08009785 	.word	0x08009785
 8009730:	08009785 	.word	0x08009785
 8009734:	08009785 	.word	0x08009785
 8009738:	08009785 	.word	0x08009785
 800973c:	08009785 	.word	0x08009785
 8009740:	08009785 	.word	0x08009785
 8009744:	08009785 	.word	0x08009785
 8009748:	08009785 	.word	0x08009785
 800974c:	08009785 	.word	0x08009785
 8009750:	08009785 	.word	0x08009785
 8009754:	08009785 	.word	0x08009785
 8009758:	08009785 	.word	0x08009785
 800975c:	08009785 	.word	0x08009785
 8009760:	08009785 	.word	0x08009785
 8009764:	08009785 	.word	0x08009785
 8009768:	08009785 	.word	0x08009785
 800976c:	080097a1 	.word	0x080097a1
 8009770:	08009785 	.word	0x08009785
 8009774:	08009785 	.word	0x08009785
 8009778:	08009785 	.word	0x08009785
 800977c:	080097a1 	.word	0x080097a1
 8009780:	2b37      	cmp	r3, #55	; 0x37
 8009782:	d00f      	beq.n	80097a4 <SPIF_FindChip+0x244>
			break;
		case SPIF_MANUFACTOR_PUYA:
			dprintf("PUYA");
			break;
		default:
			Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	721a      	strb	r2, [r3, #8]
			dprintf("ERROR");
			break;
 800978a:	e00c      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 800978c:	bf00      	nop
 800978e:	e00a      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 8009790:	bf00      	nop
 8009792:	e008      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 8009794:	bf00      	nop
 8009796:	e006      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 8009798:	bf00      	nop
 800979a:	e004      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 800979c:	bf00      	nop
 800979e:	e002      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <SPIF_FindChip+0x246>
			break;
 80097a4:	bf00      	nop
		}
		dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
		dprintf(" - SIZE: ");
		switch (Handle->Size)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	3b11      	subs	r3, #17
 80097ac:	2b0f      	cmp	r3, #15
 80097ae:	d84e      	bhi.n	800984e <SPIF_FindChip+0x2ee>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <SPIF_FindChip+0x258>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097f9 	.word	0x080097f9
 80097bc:	08009801 	.word	0x08009801
 80097c0:	08009809 	.word	0x08009809
 80097c4:	08009811 	.word	0x08009811
 80097c8:	08009819 	.word	0x08009819
 80097cc:	08009821 	.word	0x08009821
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009831 	.word	0x08009831
 80097d8:	0800983b 	.word	0x0800983b
 80097dc:	0800984f 	.word	0x0800984f
 80097e0:	0800984f 	.word	0x0800984f
 80097e4:	0800984f 	.word	0x0800984f
 80097e8:	0800984f 	.word	0x0800984f
 80097ec:	0800984f 	.word	0x0800984f
 80097f0:	0800984f 	.word	0x0800984f
 80097f4:	08009845 	.word	0x08009845
		{
		case SPIF_SIZE_1MBIT:
			Handle->BlockCnt = 2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2202      	movs	r2, #2
 80097fc:	61da      	str	r2, [r3, #28]
			dprintf("1 MBIT\r\n");
			break;
 80097fe:	e02a      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_2MBIT:
			Handle->BlockCnt = 4;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2204      	movs	r2, #4
 8009804:	61da      	str	r2, [r3, #28]
			dprintf("2 MBIT\r\n");
			break;
 8009806:	e026      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_4MBIT:
			Handle->BlockCnt = 8;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2208      	movs	r2, #8
 800980c:	61da      	str	r2, [r3, #28]
			dprintf("4 MBIT\r\n");
			break;
 800980e:	e022      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_8MBIT:
			Handle->BlockCnt = 16;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2210      	movs	r2, #16
 8009814:	61da      	str	r2, [r3, #28]
			dprintf("8 MBIT\r\n");
			break;
 8009816:	e01e      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_16MBIT:
			Handle->BlockCnt = 32;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2220      	movs	r2, #32
 800981c:	61da      	str	r2, [r3, #28]
			dprintf("16 MBIT\r\n");
			break;
 800981e:	e01a      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_32MBIT:
			Handle->BlockCnt = 64;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2240      	movs	r2, #64	; 0x40
 8009824:	61da      	str	r2, [r3, #28]
			dprintf("32 MBIT\r\n");
			break;
 8009826:	e016      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_64MBIT:
			Handle->BlockCnt = 128;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2280      	movs	r2, #128	; 0x80
 800982c:	61da      	str	r2, [r3, #28]
			dprintf("64 MBIT\r\n");
			break;
 800982e:	e012      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_128MBIT:
			Handle->BlockCnt = 256;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009836:	61da      	str	r2, [r3, #28]
			dprintf("128 MBIT\r\n");
			break;
 8009838:	e00d      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_256MBIT:
			Handle->BlockCnt = 512;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009840:	61da      	str	r2, [r3, #28]
			dprintf("256 MBIT\r\n");
			break;
 8009842:	e008      	b.n	8009856 <SPIF_FindChip+0x2f6>
		case SPIF_SIZE_512MBIT:
			Handle->BlockCnt = 1024;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800984a:	61da      	str	r2, [r3, #28]
			dprintf("512 MBIT\r\n");
			break;
 800984c:	e003      	b.n	8009856 <SPIF_FindChip+0x2f6>
		default:
			Handle->Size = SPIF_SIZE_ERROR;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	725a      	strb	r2, [r3, #9]
			dprintf("ERROR\r\n");
			break;
 8009854:	bf00      	nop
		}

		Handle->SectorCnt = Handle->BlockCnt * 16;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	011a      	lsls	r2, r3, #4
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	619a      	str	r2, [r3, #24]
		Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	031b      	lsls	r3, r3, #12
 8009866:	0a1a      	lsrs	r2, r3, #8
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	615a      	str	r2, [r3, #20]
		dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
		dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
		dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
		dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
		dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
		retVal = true;
 800986c:	2301      	movs	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]

	} while (0);

	return retVal;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3718      	adds	r7, #24
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop

0800987c <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	; 0x28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 800988a:	2300      	movs	r3, #0
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800989a:	61bb      	str	r3, [r7, #24]
	{
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
		uint32_t dbgTime = HAL_GetTick();
#endif
		dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
		if (PageNumber >= Handle->PageCnt)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	f080 808e 	bcs.w	80099c4 <SPIF_WriteFn+0x148>
		{
			dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
			break;
		}
		if (Offset >= SPIF_PAGE_SIZE)
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2bff      	cmp	r3, #255	; 0xff
 80098ac:	f200 808c 	bhi.w	80099c8 <SPIF_WriteFn+0x14c>
		{
			dprintf("SPIF_WritePage() ERROR Offset\r\n");
			break;
		}
		if (Size > maximum)
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d901      	bls.n	80098bc <SPIF_WriteFn+0x40>
		{
			Size = maximum;
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	603b      	str	r3, [r7, #0]
		}
		address = SPIF_PageToAddress(PageNumber) + Offset;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	021b      	lsls	r3, r3, #8
 80098c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098c2:	4413      	add	r3, r2
 80098c4:	61fb      	str	r3, [r7, #28]
#if SPIF_DEBUG == SPIF_DEBUG_FULL
			dprintf("SPIF WRITING {\r\n0x%02X", Data[0]);
			for (int i = 1; i < Size; i++)
 80098c6:	2301      	movs	r3, #1
 80098c8:	623b      	str	r3, [r7, #32]
 80098ca:	e002      	b.n	80098d2 <SPIF_WriteFn+0x56>
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	3301      	adds	r3, #1
 80098d0:	623b      	str	r3, [r7, #32]
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d8f8      	bhi.n	80098cc <SPIF_WriteFn+0x50>
				}
				dprintf(", 0x%02X", Data[i]);
			}
			dprintf("\r\n}\r\n");
#endif
		if (SPIF_WriteEnable(Handle) == false)
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fdac 	bl	8009438 <SPIF_WriteEnable>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f083 0301 	eor.w	r3, r3, #1
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d16f      	bne.n	80099cc <SPIF_WriteFn+0x150>
		{
			break;
		}
		SPIF_CsPin(Handle, 0);
 80098ec:	2100      	movs	r1, #0
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f7ff fd31 	bl	8009356 <SPIF_CsPin>
		if (Handle->BlockCnt >= 512)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098fc:	d322      	bcc.n	8009944 <SPIF_WriteFn+0xc8>
		{
			tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80098fe:	2312      	movs	r3, #18
 8009900:	743b      	strb	r3, [r7, #16]
			tx[1] = (address & 0xFF000000) >> 24;
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	0e1b      	lsrs	r3, r3, #24
 8009906:	b2db      	uxtb	r3, r3
 8009908:	747b      	strb	r3, [r7, #17]
			tx[2] = (address & 0x00FF0000) >> 16;
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	b2db      	uxtb	r3, r3
 8009910:	74bb      	strb	r3, [r7, #18]
			tx[3] = (address & 0x0000FF00) >> 8;
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	0a1b      	lsrs	r3, r3, #8
 8009916:	b2db      	uxtb	r3, r3
 8009918:	74fb      	strb	r3, [r7, #19]
			tx[4] = (address & 0x000000FF);
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	753b      	strb	r3, [r7, #20]
			if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8009920:	f107 0110 	add.w	r1, r7, #16
 8009924:	2364      	movs	r3, #100	; 0x64
 8009926:	2205      	movs	r2, #5
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f7ff fd4f 	bl	80093cc <SPIF_Transmit>
 800992e:	4603      	mov	r3, r0
 8009930:	f083 0301 	eor.w	r3, r3, #1
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d023      	beq.n	8009982 <SPIF_WriteFn+0x106>
			{
				SPIF_CsPin(Handle, 1);
 800993a:	2101      	movs	r1, #1
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7ff fd0a 	bl	8009356 <SPIF_CsPin>
				break;
 8009942:	e044      	b.n	80099ce <SPIF_WriteFn+0x152>
			}
		}
		else
		{
			tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8009944:	2302      	movs	r3, #2
 8009946:	743b      	strb	r3, [r7, #16]
			tx[1] = (address & 0x00FF0000) >> 16;
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	b2db      	uxtb	r3, r3
 800994e:	747b      	strb	r3, [r7, #17]
			tx[2] = (address & 0x0000FF00) >> 8;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	b2db      	uxtb	r3, r3
 8009956:	74bb      	strb	r3, [r7, #18]
			tx[3] = (address & 0x000000FF);
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	74fb      	strb	r3, [r7, #19]
			if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 800995e:	f107 0110 	add.w	r1, r7, #16
 8009962:	2364      	movs	r3, #100	; 0x64
 8009964:	2204      	movs	r2, #4
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f7ff fd30 	bl	80093cc <SPIF_Transmit>
 800996c:	4603      	mov	r3, r0
 800996e:	f083 0301 	eor.w	r3, r3, #1
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b00      	cmp	r3, #0
 8009976:	d004      	beq.n	8009982 <SPIF_WriteFn+0x106>
			{
				SPIF_CsPin(Handle, 1);
 8009978:	2101      	movs	r1, #1
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fceb 	bl	8009356 <SPIF_CsPin>
				break;
 8009980:	e025      	b.n	80099ce <SPIF_WriteFn+0x152>
			}
		}
		if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8009982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f7ff fd1e 	bl	80093cc <SPIF_Transmit>
 8009990:	4603      	mov	r3, r0
 8009992:	f083 0301 	eor.w	r3, r3, #1
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <SPIF_WriteFn+0x12a>
		{
			SPIF_CsPin(Handle, 1);
 800999c:	2101      	movs	r1, #1
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff fcd9 	bl	8009356 <SPIF_CsPin>
			break;
 80099a4:	e013      	b.n	80099ce <SPIF_WriteFn+0x152>
		}
		SPIF_CsPin(Handle, 1);
 80099a6:	2101      	movs	r1, #1
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f7ff fcd4 	bl	8009356 <SPIF_CsPin>
		if (SPIF_WaitForWriting(Handle, 100))
 80099ae:	2164      	movs	r1, #100	; 0x64
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f7ff fdae 	bl	8009512 <SPIF_WaitForWriting>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d008      	beq.n	80099ce <SPIF_WriteFn+0x152>
		{
			//dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
			retVal = true;
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80099c2:	e004      	b.n	80099ce <SPIF_WriteFn+0x152>
			break;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <SPIF_WriteFn+0x152>
			break;
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <SPIF_WriteFn+0x152>
			break;
 80099cc:	bf00      	nop
		}

	} while (0);

	SPIF_WriteDisable(Handle);
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fd56 	bl	8009480 <SPIF_WriteDisable>
	return retVal;
 80099d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3728      	adds	r7, #40	; 0x28
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
	bool retVal = false;
 80099ee:	2300      	movs	r3, #0
 80099f0:	77fb      	strb	r3, [r7, #31]
	{
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
		uint32_t dbgTime = HAL_GetTick();
#endif
		dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
		SPIF_CsPin(Handle, 0);
 80099f2:	2100      	movs	r1, #0
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff fcae 	bl	8009356 <SPIF_CsPin>
		if (Handle->BlockCnt >= 512)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a02:	d322      	bcc.n	8009a4a <SPIF_ReadFn+0x6a>
		{
			tx[0] = SPIF_CMD_READDATA4ADD;
 8009a04:	2313      	movs	r3, #19
 8009a06:	743b      	strb	r3, [r7, #16]
			tx[1] = (Address & 0xFF000000) >> 24;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	0e1b      	lsrs	r3, r3, #24
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	747b      	strb	r3, [r7, #17]
			tx[2] = (Address & 0x00FF0000) >> 16;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	74bb      	strb	r3, [r7, #18]
			tx[3] = (Address & 0x0000FF00) >> 8;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	0a1b      	lsrs	r3, r3, #8
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	74fb      	strb	r3, [r7, #19]
			tx[4] = (Address & 0x000000FF);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	753b      	strb	r3, [r7, #20]
			if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8009a26:	f107 0110 	add.w	r1, r7, #16
 8009a2a:	2364      	movs	r3, #100	; 0x64
 8009a2c:	2205      	movs	r2, #5
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff fccc 	bl	80093cc <SPIF_Transmit>
 8009a34:	4603      	mov	r3, r0
 8009a36:	f083 0301 	eor.w	r3, r3, #1
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d023      	beq.n	8009a88 <SPIF_ReadFn+0xa8>
			{
				SPIF_CsPin(Handle, 1);
 8009a40:	2101      	movs	r1, #1
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff fc87 	bl	8009356 <SPIF_CsPin>
				break;
 8009a48:	e040      	b.n	8009acc <SPIF_ReadFn+0xec>
			}
		}
		else
		{
			tx[0] = SPIF_CMD_READDATA3ADD;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	743b      	strb	r3, [r7, #16]
			tx[1] = (Address & 0x00FF0000) >> 16;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	747b      	strb	r3, [r7, #17]
			tx[2] = (Address & 0x0000FF00) >> 8;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	0a1b      	lsrs	r3, r3, #8
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	74bb      	strb	r3, [r7, #18]
			tx[3] = (Address & 0x000000FF);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	74fb      	strb	r3, [r7, #19]
			if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8009a64:	f107 0110 	add.w	r1, r7, #16
 8009a68:	2364      	movs	r3, #100	; 0x64
 8009a6a:	2204      	movs	r2, #4
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7ff fcad 	bl	80093cc <SPIF_Transmit>
 8009a72:	4603      	mov	r3, r0
 8009a74:	f083 0301 	eor.w	r3, r3, #1
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <SPIF_ReadFn+0xa8>
			{
				SPIF_CsPin(Handle, 1);
 8009a7e:	2101      	movs	r1, #1
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff fc68 	bl	8009356 <SPIF_CsPin>
				break;
 8009a86:	e021      	b.n	8009acc <SPIF_ReadFn+0xec>
			}
		}
		if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8009a88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7ff fcb6 	bl	8009402 <SPIF_Receive>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f083 0301 	eor.w	r3, r3, #1
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <SPIF_ReadFn+0xcc>
		{
			SPIF_CsPin(Handle, 1);
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff fc56 	bl	8009356 <SPIF_CsPin>
			break;
 8009aaa:	e00f      	b.n	8009acc <SPIF_ReadFn+0xec>
		}
		SPIF_CsPin(Handle, 1);
 8009aac:	2101      	movs	r1, #1
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff fc51 	bl	8009356 <SPIF_CsPin>
		//dprintf("SPIF_ReadAddress() %d BYTES READ DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
#if SPIF_DEBUG == SPIF_DEBUG_FULL
		dprintf("{\r\n0x%02X", Data[0]);
		for (int i = 1; i < Size; i++)
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	61bb      	str	r3, [r7, #24]
 8009ab8:	e002      	b.n	8009ac0 <SPIF_ReadFn+0xe0>
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	3301      	adds	r3, #1
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d8f8      	bhi.n	8009aba <SPIF_ReadFn+0xda>
			}
			dprintf(", 0x%02X", Data[i]);
		}
		dprintf("\r\n}\r\n");
#endif
		retVal = true;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	77fb      	strb	r3, [r7, #31]

	} while (0);

	return retVal;
 8009acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <SPIF_Init>:
/***********************************************************************************************************/
/***********************************************************************************************************/
/***********************************************************************************************************/

bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	607a      	str	r2, [r7, #4]
 8009ae4:	807b      	strh	r3, [r7, #2]
	bool retVal = false;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75fb      	strb	r3, [r7, #23]
	do
	{
		if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d03d      	beq.n	8009b6c <SPIF_Init+0x94>
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d03a      	beq.n	8009b6c <SPIF_Init+0x94>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d037      	beq.n	8009b6c <SPIF_Init+0x94>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	7a9b      	ldrb	r3, [r3, #10]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d033      	beq.n	8009b6c <SPIF_Init+0x94>
		{
			dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
			break;
		}
		memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8009b04:	2220      	movs	r2, #32
 8009b06:	2100      	movs	r1, #0
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f002 fb8f 	bl	800c22c <memset>
		Handle->HSpi = HSpi;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	601a      	str	r2, [r3, #0]
		Handle->Gpio = Gpio;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	605a      	str	r2, [r3, #4]
		Handle->Pin = Pin;
 8009b1a:	887a      	ldrh	r2, [r7, #2]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	611a      	str	r2, [r3, #16]
		SPIF_CsPin(Handle, 1);
 8009b20:	2101      	movs	r1, #1
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff fc17 	bl	8009356 <SPIF_CsPin>
		/* wait for stable VCC */
		while (HAL_GetTick() < 20)
 8009b28:	e002      	b.n	8009b30 <SPIF_Init+0x58>
		{
			SPIF_Delay(1);
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	f000 f97e 	bl	8009e2c <HAL_Delay>
		while (HAL_GetTick() < 20)
 8009b30:	f000 f972 	bl	8009e18 <HAL_GetTick>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b13      	cmp	r3, #19
 8009b38:	d9f7      	bls.n	8009b2a <SPIF_Init+0x52>
		}
		if (SPIF_WriteDisable(Handle) == false)
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff fca0 	bl	8009480 <SPIF_WriteDisable>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f083 0301 	eor.w	r3, r3, #1
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10e      	bne.n	8009b6a <SPIF_Init+0x92>
		{
			break;
		}
		retVal = SPIF_FindChip(Handle);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff fd07 	bl	8009560 <SPIF_FindChip>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
		if (retVal)
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d007      	beq.n	8009b6c <SPIF_Init+0x94>
		{
			Handle->Inited = 1;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	729a      	strb	r2, [r3, #10]
			dprintf("SPIF_Init() Done\r\n");
			printf("flash init ok \n");
 8009b62:	4805      	ldr	r0, [pc, #20]	; (8009b78 <SPIF_Init+0xa0>)
 8009b64:	f002 fa72 	bl	800c04c <puts>
 8009b68:	e000      	b.n	8009b6c <SPIF_Init+0x94>
			break;
 8009b6a:	bf00      	nop
		}

	} while (0);

	return retVal;
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	0800e214 	.word	0x0800e214

08009b7c <SPIF_EraseSector>:
}

/***********************************************************************************************************/

bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
	SPIF_Lock(Handle);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fbc6 	bl	8009318 <SPIF_Lock>
	bool retVal = false;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75fb      	strb	r3, [r7, #23]
	uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	031b      	lsls	r3, r3, #12
 8009b94:	613b      	str	r3, [r7, #16]
	{
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
		uint32_t dbgTime = HAL_GetTick();
#endif
		dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
		if (Sector >= Handle->SectorCnt)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d262      	bcs.n	8009c66 <SPIF_EraseSector+0xea>
		{
			dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
			break;
		}
		if (SPIF_WriteEnable(Handle) == false)
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff fc49 	bl	8009438 <SPIF_WriteEnable>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f083 0301 	eor.w	r3, r3, #1
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d15b      	bne.n	8009c6a <SPIF_EraseSector+0xee>
		{
			break;
		}
		SPIF_CsPin(Handle, 0);
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fbce 	bl	8009356 <SPIF_CsPin>
		if (Handle->BlockCnt >= 512)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc2:	d322      	bcc.n	8009c0a <SPIF_EraseSector+0x8e>
		{
			tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8009bc4:	2321      	movs	r3, #33	; 0x21
 8009bc6:	723b      	strb	r3, [r7, #8]
			tx[1] = (address & 0xFF000000) >> 24;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	0e1b      	lsrs	r3, r3, #24
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	727b      	strb	r3, [r7, #9]
			tx[2] = (address & 0x00FF0000) >> 16;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	0c1b      	lsrs	r3, r3, #16
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	72bb      	strb	r3, [r7, #10]
			tx[3] = (address & 0x0000FF00) >> 8;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	0a1b      	lsrs	r3, r3, #8
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	72fb      	strb	r3, [r7, #11]
			tx[4] = (address & 0x000000FF);
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	733b      	strb	r3, [r7, #12]
			if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8009be6:	f107 0108 	add.w	r1, r7, #8
 8009bea:	2364      	movs	r3, #100	; 0x64
 8009bec:	2205      	movs	r2, #5
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff fbec 	bl	80093cc <SPIF_Transmit>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f083 0301 	eor.w	r3, r3, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d023      	beq.n	8009c48 <SPIF_EraseSector+0xcc>
			{
				SPIF_CsPin(Handle, 1);
 8009c00:	2101      	movs	r1, #1
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fba7 	bl	8009356 <SPIF_CsPin>
				break;
 8009c08:	e030      	b.n	8009c6c <SPIF_EraseSector+0xf0>
			}
		}
		else
		{
			tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8009c0a:	2320      	movs	r3, #32
 8009c0c:	723b      	strb	r3, [r7, #8]
			tx[1] = (address & 0x00FF0000) >> 16;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	0c1b      	lsrs	r3, r3, #16
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	727b      	strb	r3, [r7, #9]
			tx[2] = (address & 0x0000FF00) >> 8;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	0a1b      	lsrs	r3, r3, #8
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	72bb      	strb	r3, [r7, #10]
			tx[3] = (address & 0x000000FF);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	72fb      	strb	r3, [r7, #11]
			if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8009c24:	f107 0108 	add.w	r1, r7, #8
 8009c28:	2364      	movs	r3, #100	; 0x64
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff fbcd 	bl	80093cc <SPIF_Transmit>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f083 0301 	eor.w	r3, r3, #1
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <SPIF_EraseSector+0xcc>
			{
				SPIF_CsPin(Handle, 1);
 8009c3e:	2101      	movs	r1, #1
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff fb88 	bl	8009356 <SPIF_CsPin>
				break;
 8009c46:	e011      	b.n	8009c6c <SPIF_EraseSector+0xf0>
			}
		}
		SPIF_CsPin(Handle, 1);
 8009c48:	2101      	movs	r1, #1
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fb83 	bl	8009356 <SPIF_CsPin>
		if (SPIF_WaitForWriting(Handle, 1000))
 8009c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fc5c 	bl	8009512 <SPIF_WaitForWriting>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <SPIF_EraseSector+0xf0>
		{
			//dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
			retVal = true;
 8009c60:	2301      	movs	r3, #1
 8009c62:	75fb      	strb	r3, [r7, #23]
 8009c64:	e002      	b.n	8009c6c <SPIF_EraseSector+0xf0>
			break;
 8009c66:	bf00      	nop
 8009c68:	e000      	b.n	8009c6c <SPIF_EraseSector+0xf0>
			break;
 8009c6a:	bf00      	nop
		}

	} while (0);

	SPIF_WriteDisable(Handle);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fc07 	bl	8009480 <SPIF_WriteDisable>
	SPIF_UnLock(Handle);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fb63 	bl	800933e <SPIF_UnLock>
	return retVal;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <SPIF_WriteAddress>:
}

/***********************************************************************************************************/

bool SPIF_WriteAddress(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b08e      	sub	sp, #56	; 0x38
 8009c86:	af02      	add	r7, sp, #8
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	603b      	str	r3, [r7, #0]
	SPIF_Lock(Handle);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff fb41 	bl	8009318 <SPIF_Lock>
	bool retVal = false;
 8009c96:	2300      	movs	r3, #0
 8009c98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t page, add, offset, remaining, length, maximum, index = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61fb      	str	r3, [r7, #28]
	add = Address;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	remaining = Size;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
	do
	{
		page = SPIF_AddressToPage(add);
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	0a1b      	lsrs	r3, r3, #8
 8009cac:	61bb      	str	r3, [r7, #24]
		offset = add % SPIF_PAGE_SIZE;
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	617b      	str	r3, [r7, #20]
		maximum = SPIF_PAGE_SIZE - offset;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009cba:	613b      	str	r3, [r7, #16]
		if (remaining <= maximum)
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d802      	bhi.n	8009cca <SPIF_WriteAddress+0x48>
		{
			length = remaining;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	623b      	str	r3, [r7, #32]
 8009cc8:	e001      	b.n	8009cce <SPIF_WriteAddress+0x4c>
		}
		else
		{
			length = maximum;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	623b      	str	r3, [r7, #32]
		}
		if (SPIF_WriteFn(Handle, page, &Data[index], length, offset) == false)
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	441a      	add	r2, r3
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	69b9      	ldr	r1, [r7, #24]
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff fdcd 	bl	800987c <SPIF_WriteFn>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	f083 0301 	eor.w	r3, r3, #1
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d116      	bne.n	8009d1c <SPIF_WriteAddress+0x9a>
		{
			break;
		}
		add += length;
 8009cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	62bb      	str	r3, [r7, #40]	; 0x28
		index += length;
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	61fb      	str	r3, [r7, #28]
		remaining -= length;
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	627b      	str	r3, [r7, #36]	; 0x24
		if (remaining == 0)
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <SPIF_WriteAddress+0x92>
		{
			retVal = true;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009d12:	e004      	b.n	8009d1e <SPIF_WriteAddress+0x9c>
		}

	} while (remaining > 0);
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1c6      	bne.n	8009ca8 <SPIF_WriteAddress+0x26>
 8009d1a:	e000      	b.n	8009d1e <SPIF_WriteAddress+0x9c>
			break;
 8009d1c:	bf00      	nop

	SPIF_UnLock(Handle);
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f7ff fb0d 	bl	800933e <SPIF_UnLock>
	return retVal;
 8009d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3730      	adds	r7, #48	; 0x30
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <SPIF_ReadAddress>:
}

/***********************************************************************************************************/

bool SPIF_ReadAddress(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
	SPIF_Lock(Handle);
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff faea 	bl	8009318 <SPIF_Lock>
	bool retVal = false;
 8009d44:	2300      	movs	r3, #0
 8009d46:	75fb      	strb	r3, [r7, #23]
	retVal = SPIF_ReadFn(Handle, Address, Data, Size);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fe46 	bl	80099e0 <SPIF_ReadFn>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]
	SPIF_UnLock(Handle);
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff faf0 	bl	800933e <SPIF_UnLock>
	return retVal;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3718      	adds	r7, #24
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d6c:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <HAL_Init+0x28>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a07      	ldr	r2, [pc, #28]	; (8009d90 <HAL_Init+0x28>)
 8009d72:	f043 0310 	orr.w	r3, r3, #16
 8009d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d78:	2003      	movs	r0, #3
 8009d7a:	f000 f92b 	bl	8009fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d7e:	200f      	movs	r0, #15
 8009d80:	f000 f808 	bl	8009d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009d84:	f7f6 fc04 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	40022000 	.word	0x40022000

08009d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009d9c:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <HAL_InitTick+0x54>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	4b12      	ldr	r3, [pc, #72]	; (8009dec <HAL_InitTick+0x58>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f935 	bl	800a022 <HAL_SYSTICK_Config>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e00e      	b.n	8009de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b0f      	cmp	r3, #15
 8009dc6:	d80a      	bhi.n	8009dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009dc8:	2200      	movs	r2, #0
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dd0:	f000 f90b 	bl	8009fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009dd4:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <HAL_InitTick+0x5c>)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e000      	b.n	8009de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000000 	.word	0x20000000
 8009dec:	2000007c 	.word	0x2000007c
 8009df0:	20000078 	.word	0x20000078

08009df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <HAL_IncTick+0x1c>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <HAL_IncTick+0x20>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4413      	add	r3, r2
 8009e04:	4a03      	ldr	r2, [pc, #12]	; (8009e14 <HAL_IncTick+0x20>)
 8009e06:	6013      	str	r3, [r2, #0]
}
 8009e08:	bf00      	nop
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bc80      	pop	{r7}
 8009e0e:	4770      	bx	lr
 8009e10:	2000007c 	.word	0x2000007c
 8009e14:	20000234 	.word	0x20000234

08009e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <HAL_GetTick+0x10>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bc80      	pop	{r7}
 8009e26:	4770      	bx	lr
 8009e28:	20000234 	.word	0x20000234

08009e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e34:	f7ff fff0 	bl	8009e18 <HAL_GetTick>
 8009e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e44:	d005      	beq.n	8009e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <HAL_Delay+0x44>)
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009e52:	bf00      	nop
 8009e54:	f7ff ffe0 	bl	8009e18 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d8f7      	bhi.n	8009e54 <HAL_Delay+0x28>
  {
  }
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	2000007c 	.word	0x2000007c

08009e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f003 0307 	and.w	r3, r3, #7
 8009e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e90:	4013      	ands	r3, r2
 8009e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ea6:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	60d3      	str	r3, [r2, #12]
}
 8009eac:	bf00      	nop
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bc80      	pop	{r7}
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	e000ed00 	.word	0xe000ed00

08009ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009ec0:	4b04      	ldr	r3, [pc, #16]	; (8009ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	0a1b      	lsrs	r3, r3, #8
 8009ec6:	f003 0307 	and.w	r3, r3, #7
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	e000ed00 	.word	0xe000ed00

08009ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	6039      	str	r1, [r7, #0]
 8009ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	db0a      	blt.n	8009f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	490c      	ldr	r1, [pc, #48]	; (8009f24 <__NVIC_SetPriority+0x4c>)
 8009ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ef6:	0112      	lsls	r2, r2, #4
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	440b      	add	r3, r1
 8009efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f00:	e00a      	b.n	8009f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	4908      	ldr	r1, [pc, #32]	; (8009f28 <__NVIC_SetPriority+0x50>)
 8009f08:	79fb      	ldrb	r3, [r7, #7]
 8009f0a:	f003 030f 	and.w	r3, r3, #15
 8009f0e:	3b04      	subs	r3, #4
 8009f10:	0112      	lsls	r2, r2, #4
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	440b      	add	r3, r1
 8009f16:	761a      	strb	r2, [r3, #24]
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	e000e100 	.word	0xe000e100
 8009f28:	e000ed00 	.word	0xe000ed00

08009f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b089      	sub	sp, #36	; 0x24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f1c3 0307 	rsb	r3, r3, #7
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	bf28      	it	cs
 8009f4a:	2304      	movcs	r3, #4
 8009f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	3304      	adds	r3, #4
 8009f52:	2b06      	cmp	r3, #6
 8009f54:	d902      	bls.n	8009f5c <NVIC_EncodePriority+0x30>
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	3b03      	subs	r3, #3
 8009f5a:	e000      	b.n	8009f5e <NVIC_EncodePriority+0x32>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6a:	43da      	mvns	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	401a      	ands	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7e:	43d9      	mvns	r1, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f84:	4313      	orrs	r3, r2
         );
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3724      	adds	r7, #36	; 0x24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bc80      	pop	{r7}
 8009f8e:	4770      	bx	lr

08009f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fa0:	d301      	bcc.n	8009fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e00f      	b.n	8009fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009fa6:	4a0a      	ldr	r2, [pc, #40]	; (8009fd0 <SysTick_Config+0x40>)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009fae:	210f      	movs	r1, #15
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fb4:	f7ff ff90 	bl	8009ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <SysTick_Config+0x40>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009fbe:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <SysTick_Config+0x40>)
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	e000e010 	.word	0xe000e010

08009fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff49 	bl	8009e74 <__NVIC_SetPriorityGrouping>
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ffc:	f7ff ff5e 	bl	8009ebc <__NVIC_GetPriorityGrouping>
 800a000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	6978      	ldr	r0, [r7, #20]
 800a008:	f7ff ff90 	bl	8009f2c <NVIC_EncodePriority>
 800a00c:	4602      	mov	r2, r0
 800a00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff ff5f 	bl	8009ed8 <__NVIC_SetPriority>
}
 800a01a:	bf00      	nop
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b082      	sub	sp, #8
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff ffb0 	bl	8009f90 <SysTick_Config>
 800a030:	4603      	mov	r3, r0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b08b      	sub	sp, #44	; 0x2c
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a046:	2300      	movs	r3, #0
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a04a:	2300      	movs	r3, #0
 800a04c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a04e:	e169      	b.n	800a324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a050:	2201      	movs	r2, #1
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	fa02 f303 	lsl.w	r3, r2, r3
 800a058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	69fa      	ldr	r2, [r7, #28]
 800a060:	4013      	ands	r3, r2
 800a062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a064:	69ba      	ldr	r2, [r7, #24]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	429a      	cmp	r2, r3
 800a06a:	f040 8158 	bne.w	800a31e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	4a9a      	ldr	r2, [pc, #616]	; (800a2dc <HAL_GPIO_Init+0x2a0>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d05e      	beq.n	800a136 <HAL_GPIO_Init+0xfa>
 800a078:	4a98      	ldr	r2, [pc, #608]	; (800a2dc <HAL_GPIO_Init+0x2a0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d875      	bhi.n	800a16a <HAL_GPIO_Init+0x12e>
 800a07e:	4a98      	ldr	r2, [pc, #608]	; (800a2e0 <HAL_GPIO_Init+0x2a4>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d058      	beq.n	800a136 <HAL_GPIO_Init+0xfa>
 800a084:	4a96      	ldr	r2, [pc, #600]	; (800a2e0 <HAL_GPIO_Init+0x2a4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d86f      	bhi.n	800a16a <HAL_GPIO_Init+0x12e>
 800a08a:	4a96      	ldr	r2, [pc, #600]	; (800a2e4 <HAL_GPIO_Init+0x2a8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d052      	beq.n	800a136 <HAL_GPIO_Init+0xfa>
 800a090:	4a94      	ldr	r2, [pc, #592]	; (800a2e4 <HAL_GPIO_Init+0x2a8>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d869      	bhi.n	800a16a <HAL_GPIO_Init+0x12e>
 800a096:	4a94      	ldr	r2, [pc, #592]	; (800a2e8 <HAL_GPIO_Init+0x2ac>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d04c      	beq.n	800a136 <HAL_GPIO_Init+0xfa>
 800a09c:	4a92      	ldr	r2, [pc, #584]	; (800a2e8 <HAL_GPIO_Init+0x2ac>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d863      	bhi.n	800a16a <HAL_GPIO_Init+0x12e>
 800a0a2:	4a92      	ldr	r2, [pc, #584]	; (800a2ec <HAL_GPIO_Init+0x2b0>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d046      	beq.n	800a136 <HAL_GPIO_Init+0xfa>
 800a0a8:	4a90      	ldr	r2, [pc, #576]	; (800a2ec <HAL_GPIO_Init+0x2b0>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d85d      	bhi.n	800a16a <HAL_GPIO_Init+0x12e>
 800a0ae:	2b12      	cmp	r3, #18
 800a0b0:	d82a      	bhi.n	800a108 <HAL_GPIO_Init+0xcc>
 800a0b2:	2b12      	cmp	r3, #18
 800a0b4:	d859      	bhi.n	800a16a <HAL_GPIO_Init+0x12e>
 800a0b6:	a201      	add	r2, pc, #4	; (adr r2, 800a0bc <HAL_GPIO_Init+0x80>)
 800a0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0bc:	0800a137 	.word	0x0800a137
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a123 	.word	0x0800a123
 800a0c8:	0800a165 	.word	0x0800a165
 800a0cc:	0800a16b 	.word	0x0800a16b
 800a0d0:	0800a16b 	.word	0x0800a16b
 800a0d4:	0800a16b 	.word	0x0800a16b
 800a0d8:	0800a16b 	.word	0x0800a16b
 800a0dc:	0800a16b 	.word	0x0800a16b
 800a0e0:	0800a16b 	.word	0x0800a16b
 800a0e4:	0800a16b 	.word	0x0800a16b
 800a0e8:	0800a16b 	.word	0x0800a16b
 800a0ec:	0800a16b 	.word	0x0800a16b
 800a0f0:	0800a16b 	.word	0x0800a16b
 800a0f4:	0800a16b 	.word	0x0800a16b
 800a0f8:	0800a16b 	.word	0x0800a16b
 800a0fc:	0800a16b 	.word	0x0800a16b
 800a100:	0800a119 	.word	0x0800a119
 800a104:	0800a12d 	.word	0x0800a12d
 800a108:	4a79      	ldr	r2, [pc, #484]	; (800a2f0 <HAL_GPIO_Init+0x2b4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d013      	beq.n	800a136 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a10e:	e02c      	b.n	800a16a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	623b      	str	r3, [r7, #32]
          break;
 800a116:	e029      	b.n	800a16c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	3304      	adds	r3, #4
 800a11e:	623b      	str	r3, [r7, #32]
          break;
 800a120:	e024      	b.n	800a16c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	3308      	adds	r3, #8
 800a128:	623b      	str	r3, [r7, #32]
          break;
 800a12a:	e01f      	b.n	800a16c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	330c      	adds	r3, #12
 800a132:	623b      	str	r3, [r7, #32]
          break;
 800a134:	e01a      	b.n	800a16c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d102      	bne.n	800a144 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a13e:	2304      	movs	r3, #4
 800a140:	623b      	str	r3, [r7, #32]
          break;
 800a142:	e013      	b.n	800a16c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d105      	bne.n	800a158 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a14c:	2308      	movs	r3, #8
 800a14e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	611a      	str	r2, [r3, #16]
          break;
 800a156:	e009      	b.n	800a16c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a158:	2308      	movs	r3, #8
 800a15a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	615a      	str	r2, [r3, #20]
          break;
 800a162:	e003      	b.n	800a16c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a164:	2300      	movs	r3, #0
 800a166:	623b      	str	r3, [r7, #32]
          break;
 800a168:	e000      	b.n	800a16c <HAL_GPIO_Init+0x130>
          break;
 800a16a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2bff      	cmp	r3, #255	; 0xff
 800a170:	d801      	bhi.n	800a176 <HAL_GPIO_Init+0x13a>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	e001      	b.n	800a17a <HAL_GPIO_Init+0x13e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3304      	adds	r3, #4
 800a17a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2bff      	cmp	r3, #255	; 0xff
 800a180:	d802      	bhi.n	800a188 <HAL_GPIO_Init+0x14c>
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	e002      	b.n	800a18e <HAL_GPIO_Init+0x152>
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	3b08      	subs	r3, #8
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	210f      	movs	r1, #15
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	fa01 f303 	lsl.w	r3, r1, r3
 800a19c:	43db      	mvns	r3, r3
 800a19e:	401a      	ands	r2, r3
 800a1a0:	6a39      	ldr	r1, [r7, #32]
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80b1 	beq.w	800a31e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a1bc:	4b4d      	ldr	r3, [pc, #308]	; (800a2f4 <HAL_GPIO_Init+0x2b8>)
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	4a4c      	ldr	r2, [pc, #304]	; (800a2f4 <HAL_GPIO_Init+0x2b8>)
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	6193      	str	r3, [r2, #24]
 800a1c8:	4b4a      	ldr	r3, [pc, #296]	; (800a2f4 <HAL_GPIO_Init+0x2b8>)
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	60bb      	str	r3, [r7, #8]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a1d4:	4a48      	ldr	r2, [pc, #288]	; (800a2f8 <HAL_GPIO_Init+0x2bc>)
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	089b      	lsrs	r3, r3, #2
 800a1da:	3302      	adds	r3, #2
 800a1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	f003 0303 	and.w	r3, r3, #3
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	220f      	movs	r2, #15
 800a1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f0:	43db      	mvns	r3, r3
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a40      	ldr	r2, [pc, #256]	; (800a2fc <HAL_GPIO_Init+0x2c0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d013      	beq.n	800a228 <HAL_GPIO_Init+0x1ec>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a3f      	ldr	r2, [pc, #252]	; (800a300 <HAL_GPIO_Init+0x2c4>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d00d      	beq.n	800a224 <HAL_GPIO_Init+0x1e8>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a3e      	ldr	r2, [pc, #248]	; (800a304 <HAL_GPIO_Init+0x2c8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d007      	beq.n	800a220 <HAL_GPIO_Init+0x1e4>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a3d      	ldr	r2, [pc, #244]	; (800a308 <HAL_GPIO_Init+0x2cc>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d101      	bne.n	800a21c <HAL_GPIO_Init+0x1e0>
 800a218:	2303      	movs	r3, #3
 800a21a:	e006      	b.n	800a22a <HAL_GPIO_Init+0x1ee>
 800a21c:	2304      	movs	r3, #4
 800a21e:	e004      	b.n	800a22a <HAL_GPIO_Init+0x1ee>
 800a220:	2302      	movs	r3, #2
 800a222:	e002      	b.n	800a22a <HAL_GPIO_Init+0x1ee>
 800a224:	2301      	movs	r3, #1
 800a226:	e000      	b.n	800a22a <HAL_GPIO_Init+0x1ee>
 800a228:	2300      	movs	r3, #0
 800a22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22c:	f002 0203 	and.w	r2, r2, #3
 800a230:	0092      	lsls	r2, r2, #2
 800a232:	4093      	lsls	r3, r2
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a23a:	492f      	ldr	r1, [pc, #188]	; (800a2f8 <HAL_GPIO_Init+0x2bc>)
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	089b      	lsrs	r3, r3, #2
 800a240:	3302      	adds	r3, #2
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d006      	beq.n	800a262 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a254:	4b2d      	ldr	r3, [pc, #180]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	492c      	ldr	r1, [pc, #176]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	608b      	str	r3, [r1, #8]
 800a260:	e006      	b.n	800a270 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a262:	4b2a      	ldr	r3, [pc, #168]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	43db      	mvns	r3, r3
 800a26a:	4928      	ldr	r1, [pc, #160]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a27c:	4b23      	ldr	r3, [pc, #140]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a27e:	68da      	ldr	r2, [r3, #12]
 800a280:	4922      	ldr	r1, [pc, #136]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	4313      	orrs	r3, r2
 800a286:	60cb      	str	r3, [r1, #12]
 800a288:	e006      	b.n	800a298 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a28a:	4b20      	ldr	r3, [pc, #128]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	43db      	mvns	r3, r3
 800a292:	491e      	ldr	r1, [pc, #120]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a294:	4013      	ands	r3, r2
 800a296:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a2a4:	4b19      	ldr	r3, [pc, #100]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	4918      	ldr	r1, [pc, #96]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	604b      	str	r3, [r1, #4]
 800a2b0:	e006      	b.n	800a2c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a2b2:	4b16      	ldr	r3, [pc, #88]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	43db      	mvns	r3, r3
 800a2ba:	4914      	ldr	r1, [pc, #80]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d021      	beq.n	800a310 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a2cc:	4b0f      	ldr	r3, [pc, #60]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	490e      	ldr	r1, [pc, #56]	; (800a30c <HAL_GPIO_Init+0x2d0>)
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	600b      	str	r3, [r1, #0]
 800a2d8:	e021      	b.n	800a31e <HAL_GPIO_Init+0x2e2>
 800a2da:	bf00      	nop
 800a2dc:	10320000 	.word	0x10320000
 800a2e0:	10310000 	.word	0x10310000
 800a2e4:	10220000 	.word	0x10220000
 800a2e8:	10210000 	.word	0x10210000
 800a2ec:	10120000 	.word	0x10120000
 800a2f0:	10110000 	.word	0x10110000
 800a2f4:	40021000 	.word	0x40021000
 800a2f8:	40010000 	.word	0x40010000
 800a2fc:	40010800 	.word	0x40010800
 800a300:	40010c00 	.word	0x40010c00
 800a304:	40011000 	.word	0x40011000
 800a308:	40011400 	.word	0x40011400
 800a30c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <HAL_GPIO_Init+0x304>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	43db      	mvns	r3, r3
 800a318:	4909      	ldr	r1, [pc, #36]	; (800a340 <HAL_GPIO_Init+0x304>)
 800a31a:	4013      	ands	r3, r2
 800a31c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	3301      	adds	r3, #1
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	fa22 f303 	lsr.w	r3, r2, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f47f ae8e 	bne.w	800a050 <HAL_GPIO_Init+0x14>
  }
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	372c      	adds	r7, #44	; 0x2c
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bc80      	pop	{r7}
 800a33e:	4770      	bx	lr
 800a340:	40010400 	.word	0x40010400

0800a344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	807b      	strh	r3, [r7, #2]
 800a350:	4613      	mov	r3, r2
 800a352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a354:	787b      	ldrb	r3, [r7, #1]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a35a:	887a      	ldrh	r2, [r7, #2]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a360:	e003      	b.n	800a36a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a362:	887b      	ldrh	r3, [r7, #2]
 800a364:	041a      	lsls	r2, r3, #16
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	611a      	str	r2, [r3, #16]
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	bc80      	pop	{r7}
 800a372:	4770      	bx	lr

0800a374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e272      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 8087 	beq.w	800a4a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a394:	4b92      	ldr	r3, [pc, #584]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f003 030c 	and.w	r3, r3, #12
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d00c      	beq.n	800a3ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a3a0:	4b8f      	ldr	r3, [pc, #572]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f003 030c 	and.w	r3, r3, #12
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d112      	bne.n	800a3d2 <HAL_RCC_OscConfig+0x5e>
 800a3ac:	4b8c      	ldr	r3, [pc, #560]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b8:	d10b      	bne.n	800a3d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3ba:	4b89      	ldr	r3, [pc, #548]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d06c      	beq.n	800a4a0 <HAL_RCC_OscConfig+0x12c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d168      	bne.n	800a4a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e24c      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3da:	d106      	bne.n	800a3ea <HAL_RCC_OscConfig+0x76>
 800a3dc:	4b80      	ldr	r3, [pc, #512]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a7f      	ldr	r2, [pc, #508]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	e02e      	b.n	800a448 <HAL_RCC_OscConfig+0xd4>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10c      	bne.n	800a40c <HAL_RCC_OscConfig+0x98>
 800a3f2:	4b7b      	ldr	r3, [pc, #492]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a7a      	ldr	r2, [pc, #488]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a3f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	4b78      	ldr	r3, [pc, #480]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a77      	ldr	r2, [pc, #476]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	e01d      	b.n	800a448 <HAL_RCC_OscConfig+0xd4>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a414:	d10c      	bne.n	800a430 <HAL_RCC_OscConfig+0xbc>
 800a416:	4b72      	ldr	r3, [pc, #456]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a71      	ldr	r2, [pc, #452]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a41c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	4b6f      	ldr	r3, [pc, #444]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a6e      	ldr	r2, [pc, #440]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e00b      	b.n	800a448 <HAL_RCC_OscConfig+0xd4>
 800a430:	4b6b      	ldr	r3, [pc, #428]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a6a      	ldr	r2, [pc, #424]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	4b68      	ldr	r3, [pc, #416]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a67      	ldr	r2, [pc, #412]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d013      	beq.n	800a478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a450:	f7ff fce2 	bl	8009e18 <HAL_GetTick>
 800a454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a456:	e008      	b.n	800a46a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a458:	f7ff fcde 	bl	8009e18 <HAL_GetTick>
 800a45c:	4602      	mov	r2, r0
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	2b64      	cmp	r3, #100	; 0x64
 800a464:	d901      	bls.n	800a46a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	e200      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a46a:	4b5d      	ldr	r3, [pc, #372]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f0      	beq.n	800a458 <HAL_RCC_OscConfig+0xe4>
 800a476:	e014      	b.n	800a4a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a478:	f7ff fcce 	bl	8009e18 <HAL_GetTick>
 800a47c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a47e:	e008      	b.n	800a492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a480:	f7ff fcca 	bl	8009e18 <HAL_GetTick>
 800a484:	4602      	mov	r2, r0
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b64      	cmp	r3, #100	; 0x64
 800a48c:	d901      	bls.n	800a492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e1ec      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a492:	4b53      	ldr	r3, [pc, #332]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f0      	bne.n	800a480 <HAL_RCC_OscConfig+0x10c>
 800a49e:	e000      	b.n	800a4a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d063      	beq.n	800a576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a4ae:	4b4c      	ldr	r3, [pc, #304]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f003 030c 	and.w	r3, r3, #12
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00b      	beq.n	800a4d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a4ba:	4b49      	ldr	r3, [pc, #292]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f003 030c 	and.w	r3, r3, #12
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d11c      	bne.n	800a500 <HAL_RCC_OscConfig+0x18c>
 800a4c6:	4b46      	ldr	r3, [pc, #280]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d116      	bne.n	800a500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4d2:	4b43      	ldr	r3, [pc, #268]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <HAL_RCC_OscConfig+0x176>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d001      	beq.n	800a4ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e1c0      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4ea:	4b3d      	ldr	r3, [pc, #244]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	695b      	ldr	r3, [r3, #20]
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	4939      	ldr	r1, [pc, #228]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4fe:	e03a      	b.n	800a576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d020      	beq.n	800a54a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a508:	4b36      	ldr	r3, [pc, #216]	; (800a5e4 <HAL_RCC_OscConfig+0x270>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a50e:	f7ff fc83 	bl	8009e18 <HAL_GetTick>
 800a512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a514:	e008      	b.n	800a528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a516:	f7ff fc7f 	bl	8009e18 <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	2b02      	cmp	r3, #2
 800a522:	d901      	bls.n	800a528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e1a1      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a528:	4b2d      	ldr	r3, [pc, #180]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0f0      	beq.n	800a516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a534:	4b2a      	ldr	r3, [pc, #168]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	4927      	ldr	r1, [pc, #156]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a544:	4313      	orrs	r3, r2
 800a546:	600b      	str	r3, [r1, #0]
 800a548:	e015      	b.n	800a576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a54a:	4b26      	ldr	r3, [pc, #152]	; (800a5e4 <HAL_RCC_OscConfig+0x270>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a550:	f7ff fc62 	bl	8009e18 <HAL_GetTick>
 800a554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a556:	e008      	b.n	800a56a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a558:	f7ff fc5e 	bl	8009e18 <HAL_GetTick>
 800a55c:	4602      	mov	r2, r0
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	2b02      	cmp	r3, #2
 800a564:	d901      	bls.n	800a56a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e180      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a56a:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1f0      	bne.n	800a558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d03a      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d019      	beq.n	800a5be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a58a:	4b17      	ldr	r3, [pc, #92]	; (800a5e8 <HAL_RCC_OscConfig+0x274>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a590:	f7ff fc42 	bl	8009e18 <HAL_GetTick>
 800a594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a596:	e008      	b.n	800a5aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a598:	f7ff fc3e 	bl	8009e18 <HAL_GetTick>
 800a59c:	4602      	mov	r2, r0
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d901      	bls.n	800a5aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	e160      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5aa:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <HAL_RCC_OscConfig+0x26c>)
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0f0      	beq.n	800a598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a5b6:	2001      	movs	r0, #1
 800a5b8:	f000 face 	bl	800ab58 <RCC_Delay>
 800a5bc:	e01c      	b.n	800a5f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <HAL_RCC_OscConfig+0x274>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5c4:	f7ff fc28 	bl	8009e18 <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5ca:	e00f      	b.n	800a5ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5cc:	f7ff fc24 	bl	8009e18 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d908      	bls.n	800a5ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e146      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
 800a5de:	bf00      	nop
 800a5e0:	40021000 	.word	0x40021000
 800a5e4:	42420000 	.word	0x42420000
 800a5e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5ec:	4b92      	ldr	r3, [pc, #584]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f0:	f003 0302 	and.w	r3, r3, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1e9      	bne.n	800a5cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80a6 	beq.w	800a752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a606:	2300      	movs	r3, #0
 800a608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a60a:	4b8b      	ldr	r3, [pc, #556]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a60c:	69db      	ldr	r3, [r3, #28]
 800a60e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10d      	bne.n	800a632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a616:	4b88      	ldr	r3, [pc, #544]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	4a87      	ldr	r2, [pc, #540]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a61c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a620:	61d3      	str	r3, [r2, #28]
 800a622:	4b85      	ldr	r3, [pc, #532]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62a:	60bb      	str	r3, [r7, #8]
 800a62c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a62e:	2301      	movs	r3, #1
 800a630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a632:	4b82      	ldr	r3, [pc, #520]	; (800a83c <HAL_RCC_OscConfig+0x4c8>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d118      	bne.n	800a670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a63e:	4b7f      	ldr	r3, [pc, #508]	; (800a83c <HAL_RCC_OscConfig+0x4c8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a7e      	ldr	r2, [pc, #504]	; (800a83c <HAL_RCC_OscConfig+0x4c8>)
 800a644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a64a:	f7ff fbe5 	bl	8009e18 <HAL_GetTick>
 800a64e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a650:	e008      	b.n	800a664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a652:	f7ff fbe1 	bl	8009e18 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	2b64      	cmp	r3, #100	; 0x64
 800a65e:	d901      	bls.n	800a664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a660:	2303      	movs	r3, #3
 800a662:	e103      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a664:	4b75      	ldr	r3, [pc, #468]	; (800a83c <HAL_RCC_OscConfig+0x4c8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0f0      	beq.n	800a652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d106      	bne.n	800a686 <HAL_RCC_OscConfig+0x312>
 800a678:	4b6f      	ldr	r3, [pc, #444]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	4a6e      	ldr	r2, [pc, #440]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a67e:	f043 0301 	orr.w	r3, r3, #1
 800a682:	6213      	str	r3, [r2, #32]
 800a684:	e02d      	b.n	800a6e2 <HAL_RCC_OscConfig+0x36e>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10c      	bne.n	800a6a8 <HAL_RCC_OscConfig+0x334>
 800a68e:	4b6a      	ldr	r3, [pc, #424]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	4a69      	ldr	r2, [pc, #420]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a694:	f023 0301 	bic.w	r3, r3, #1
 800a698:	6213      	str	r3, [r2, #32]
 800a69a:	4b67      	ldr	r3, [pc, #412]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	4a66      	ldr	r2, [pc, #408]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6a0:	f023 0304 	bic.w	r3, r3, #4
 800a6a4:	6213      	str	r3, [r2, #32]
 800a6a6:	e01c      	b.n	800a6e2 <HAL_RCC_OscConfig+0x36e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b05      	cmp	r3, #5
 800a6ae:	d10c      	bne.n	800a6ca <HAL_RCC_OscConfig+0x356>
 800a6b0:	4b61      	ldr	r3, [pc, #388]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	4a60      	ldr	r2, [pc, #384]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6b6:	f043 0304 	orr.w	r3, r3, #4
 800a6ba:	6213      	str	r3, [r2, #32]
 800a6bc:	4b5e      	ldr	r3, [pc, #376]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	4a5d      	ldr	r2, [pc, #372]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6c2:	f043 0301 	orr.w	r3, r3, #1
 800a6c6:	6213      	str	r3, [r2, #32]
 800a6c8:	e00b      	b.n	800a6e2 <HAL_RCC_OscConfig+0x36e>
 800a6ca:	4b5b      	ldr	r3, [pc, #364]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	4a5a      	ldr	r2, [pc, #360]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6d0:	f023 0301 	bic.w	r3, r3, #1
 800a6d4:	6213      	str	r3, [r2, #32]
 800a6d6:	4b58      	ldr	r3, [pc, #352]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	4a57      	ldr	r2, [pc, #348]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a6dc:	f023 0304 	bic.w	r3, r3, #4
 800a6e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d015      	beq.n	800a716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6ea:	f7ff fb95 	bl	8009e18 <HAL_GetTick>
 800a6ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6f0:	e00a      	b.n	800a708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6f2:	f7ff fb91 	bl	8009e18 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a700:	4293      	cmp	r3, r2
 800a702:	d901      	bls.n	800a708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e0b1      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a708:	4b4b      	ldr	r3, [pc, #300]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	f003 0302 	and.w	r3, r3, #2
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0ee      	beq.n	800a6f2 <HAL_RCC_OscConfig+0x37e>
 800a714:	e014      	b.n	800a740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a716:	f7ff fb7f 	bl	8009e18 <HAL_GetTick>
 800a71a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a71c:	e00a      	b.n	800a734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a71e:	f7ff fb7b 	bl	8009e18 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d901      	bls.n	800a734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e09b      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a734:	4b40      	ldr	r3, [pc, #256]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	f003 0302 	and.w	r3, r3, #2
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1ee      	bne.n	800a71e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a740:	7dfb      	ldrb	r3, [r7, #23]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d105      	bne.n	800a752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a746:	4b3c      	ldr	r3, [pc, #240]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	4a3b      	ldr	r2, [pc, #236]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a74c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 8087 	beq.w	800a86a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a75c:	4b36      	ldr	r3, [pc, #216]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f003 030c 	and.w	r3, r3, #12
 800a764:	2b08      	cmp	r3, #8
 800a766:	d061      	beq.n	800a82c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d146      	bne.n	800a7fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a770:	4b33      	ldr	r3, [pc, #204]	; (800a840 <HAL_RCC_OscConfig+0x4cc>)
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a776:	f7ff fb4f 	bl	8009e18 <HAL_GetTick>
 800a77a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a77c:	e008      	b.n	800a790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a77e:	f7ff fb4b 	bl	8009e18 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d901      	bls.n	800a790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e06d      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a790:	4b29      	ldr	r3, [pc, #164]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1f0      	bne.n	800a77e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a4:	d108      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a7a6:	4b24      	ldr	r3, [pc, #144]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	4921      	ldr	r1, [pc, #132]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7b8:	4b1f      	ldr	r3, [pc, #124]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a19      	ldr	r1, [r3, #32]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	491b      	ldr	r1, [pc, #108]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7d0:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <HAL_RCC_OscConfig+0x4cc>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d6:	f7ff fb1f 	bl	8009e18 <HAL_GetTick>
 800a7da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a7dc:	e008      	b.n	800a7f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7de:	f7ff fb1b 	bl	8009e18 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d901      	bls.n	800a7f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e03d      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a7f0:	4b11      	ldr	r3, [pc, #68]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0f0      	beq.n	800a7de <HAL_RCC_OscConfig+0x46a>
 800a7fc:	e035      	b.n	800a86a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7fe:	4b10      	ldr	r3, [pc, #64]	; (800a840 <HAL_RCC_OscConfig+0x4cc>)
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a804:	f7ff fb08 	bl	8009e18 <HAL_GetTick>
 800a808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a80a:	e008      	b.n	800a81e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a80c:	f7ff fb04 	bl	8009e18 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d901      	bls.n	800a81e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e026      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a81e:	4b06      	ldr	r3, [pc, #24]	; (800a838 <HAL_RCC_OscConfig+0x4c4>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1f0      	bne.n	800a80c <HAL_RCC_OscConfig+0x498>
 800a82a:	e01e      	b.n	800a86a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d107      	bne.n	800a844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e019      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
 800a838:	40021000 	.word	0x40021000
 800a83c:	40007000 	.word	0x40007000
 800a840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a844:	4b0b      	ldr	r3, [pc, #44]	; (800a874 <HAL_RCC_OscConfig+0x500>)
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	429a      	cmp	r2, r3
 800a856:	d106      	bne.n	800a866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a862:	429a      	cmp	r2, r3
 800a864:	d001      	beq.n	800a86a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e000      	b.n	800a86c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	40021000 	.word	0x40021000

0800a878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e0d0      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a88c:	4b6a      	ldr	r3, [pc, #424]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0307 	and.w	r3, r3, #7
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d910      	bls.n	800a8bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a89a:	4b67      	ldr	r3, [pc, #412]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f023 0207 	bic.w	r2, r3, #7
 800a8a2:	4965      	ldr	r1, [pc, #404]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8aa:	4b63      	ldr	r3, [pc, #396]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0307 	and.w	r3, r3, #7
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d001      	beq.n	800a8bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e0b8      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0302 	and.w	r3, r3, #2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d020      	beq.n	800a90a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0304 	and.w	r3, r3, #4
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d005      	beq.n	800a8e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8d4:	4b59      	ldr	r3, [pc, #356]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	4a58      	ldr	r2, [pc, #352]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a8da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a8de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0308 	and.w	r3, r3, #8
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8ec:	4b53      	ldr	r3, [pc, #332]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4a52      	ldr	r2, [pc, #328]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a8f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a8f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8f8:	4b50      	ldr	r3, [pc, #320]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	494d      	ldr	r1, [pc, #308]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a906:	4313      	orrs	r3, r2
 800a908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	d040      	beq.n	800a998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d107      	bne.n	800a92e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a91e:	4b47      	ldr	r3, [pc, #284]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d115      	bne.n	800a956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e07f      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2b02      	cmp	r3, #2
 800a934:	d107      	bne.n	800a946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a936:	4b41      	ldr	r3, [pc, #260]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e073      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a946:	4b3d      	ldr	r3, [pc, #244]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e06b      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a956:	4b39      	ldr	r3, [pc, #228]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f023 0203 	bic.w	r2, r3, #3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4936      	ldr	r1, [pc, #216]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a964:	4313      	orrs	r3, r2
 800a966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a968:	f7ff fa56 	bl	8009e18 <HAL_GetTick>
 800a96c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a96e:	e00a      	b.n	800a986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a970:	f7ff fa52 	bl	8009e18 <HAL_GetTick>
 800a974:	4602      	mov	r2, r0
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97e:	4293      	cmp	r3, r2
 800a980:	d901      	bls.n	800a986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e053      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a986:	4b2d      	ldr	r3, [pc, #180]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f003 020c 	and.w	r2, r3, #12
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	429a      	cmp	r2, r3
 800a996:	d1eb      	bne.n	800a970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a998:	4b27      	ldr	r3, [pc, #156]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d210      	bcs.n	800a9c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a6:	4b24      	ldr	r3, [pc, #144]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f023 0207 	bic.w	r2, r3, #7
 800a9ae:	4922      	ldr	r1, [pc, #136]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9b6:	4b20      	ldr	r3, [pc, #128]	; (800aa38 <HAL_RCC_ClockConfig+0x1c0>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0307 	and.w	r3, r3, #7
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d001      	beq.n	800a9c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e032      	b.n	800aa2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0304 	and.w	r3, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d008      	beq.n	800a9e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9d4:	4b19      	ldr	r3, [pc, #100]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	4916      	ldr	r1, [pc, #88]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9f2:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	490e      	ldr	r1, [pc, #56]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa06:	f000 f821 	bl	800aa4c <HAL_RCC_GetSysClockFreq>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	4b0b      	ldr	r3, [pc, #44]	; (800aa3c <HAL_RCC_ClockConfig+0x1c4>)
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	091b      	lsrs	r3, r3, #4
 800aa12:	f003 030f 	and.w	r3, r3, #15
 800aa16:	490a      	ldr	r1, [pc, #40]	; (800aa40 <HAL_RCC_ClockConfig+0x1c8>)
 800aa18:	5ccb      	ldrb	r3, [r1, r3]
 800aa1a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1e:	4a09      	ldr	r2, [pc, #36]	; (800aa44 <HAL_RCC_ClockConfig+0x1cc>)
 800aa20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa22:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <HAL_RCC_ClockConfig+0x1d0>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7ff f9b4 	bl	8009d94 <HAL_InitTick>

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	40022000 	.word	0x40022000
 800aa3c:	40021000 	.word	0x40021000
 800aa40:	0800e224 	.word	0x0800e224
 800aa44:	20000000 	.word	0x20000000
 800aa48:	20000078 	.word	0x20000078

0800aa4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	2300      	movs	r3, #0
 800aa58:	60bb      	str	r3, [r7, #8]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aa66:	4b1e      	ldr	r3, [pc, #120]	; (800aae0 <HAL_RCC_GetSysClockFreq+0x94>)
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f003 030c 	and.w	r3, r3, #12
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d002      	beq.n	800aa7c <HAL_RCC_GetSysClockFreq+0x30>
 800aa76:	2b08      	cmp	r3, #8
 800aa78:	d003      	beq.n	800aa82 <HAL_RCC_GetSysClockFreq+0x36>
 800aa7a:	e027      	b.n	800aacc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aa7c:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa7e:	613b      	str	r3, [r7, #16]
      break;
 800aa80:	e027      	b.n	800aad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	0c9b      	lsrs	r3, r3, #18
 800aa86:	f003 030f 	and.w	r3, r3, #15
 800aa8a:	4a17      	ldr	r2, [pc, #92]	; (800aae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aa8c:	5cd3      	ldrb	r3, [r2, r3]
 800aa8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d010      	beq.n	800aabc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aa9a:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <HAL_RCC_GetSysClockFreq+0x94>)
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	0c5b      	lsrs	r3, r3, #17
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	4a11      	ldr	r2, [pc, #68]	; (800aaec <HAL_RCC_GetSysClockFreq+0xa0>)
 800aaa6:	5cd3      	ldrb	r3, [r2, r3]
 800aaa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a0d      	ldr	r2, [pc, #52]	; (800aae4 <HAL_RCC_GetSysClockFreq+0x98>)
 800aaae:	fb03 f202 	mul.w	r2, r3, r2
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	e004      	b.n	800aac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a0c      	ldr	r2, [pc, #48]	; (800aaf0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aac0:	fb02 f303 	mul.w	r3, r2, r3
 800aac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	613b      	str	r3, [r7, #16]
      break;
 800aaca:	e002      	b.n	800aad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aacc:	4b05      	ldr	r3, [pc, #20]	; (800aae4 <HAL_RCC_GetSysClockFreq+0x98>)
 800aace:	613b      	str	r3, [r7, #16]
      break;
 800aad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aad2:	693b      	ldr	r3, [r7, #16]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	371c      	adds	r7, #28
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	40021000 	.word	0x40021000
 800aae4:	007a1200 	.word	0x007a1200
 800aae8:	0800e478 	.word	0x0800e478
 800aaec:	0800e488 	.word	0x0800e488
 800aaf0:	003d0900 	.word	0x003d0900

0800aaf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <HAL_RCC_GetHCLKFreq+0x10>)
 800aafa:	681b      	ldr	r3, [r3, #0]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bc80      	pop	{r7}
 800ab02:	4770      	bx	lr
 800ab04:	20000000 	.word	0x20000000

0800ab08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab0c:	f7ff fff2 	bl	800aaf4 <HAL_RCC_GetHCLKFreq>
 800ab10:	4602      	mov	r2, r0
 800ab12:	4b05      	ldr	r3, [pc, #20]	; (800ab28 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	0a1b      	lsrs	r3, r3, #8
 800ab18:	f003 0307 	and.w	r3, r3, #7
 800ab1c:	4903      	ldr	r1, [pc, #12]	; (800ab2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab1e:	5ccb      	ldrb	r3, [r1, r3]
 800ab20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	40021000 	.word	0x40021000
 800ab2c:	0800e234 	.word	0x0800e234

0800ab30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab34:	f7ff ffde 	bl	800aaf4 <HAL_RCC_GetHCLKFreq>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	0adb      	lsrs	r3, r3, #11
 800ab40:	f003 0307 	and.w	r3, r3, #7
 800ab44:	4903      	ldr	r1, [pc, #12]	; (800ab54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab46:	5ccb      	ldrb	r3, [r1, r3]
 800ab48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	40021000 	.word	0x40021000
 800ab54:	0800e234 	.word	0x0800e234

0800ab58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <RCC_Delay+0x34>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a0a      	ldr	r2, [pc, #40]	; (800ab90 <RCC_Delay+0x38>)
 800ab66:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6a:	0a5b      	lsrs	r3, r3, #9
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	fb02 f303 	mul.w	r3, r2, r3
 800ab72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ab74:	bf00      	nop
  }
  while (Delay --);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	60fa      	str	r2, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1f9      	bne.n	800ab74 <RCC_Delay+0x1c>
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bc80      	pop	{r7}
 800ab8a:	4770      	bx	lr
 800ab8c:	20000000 	.word	0x20000000
 800ab90:	10624dd3 	.word	0x10624dd3

0800ab94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e076      	b.n	800ac94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d108      	bne.n	800abc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abb6:	d009      	beq.n	800abcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	61da      	str	r2, [r3, #28]
 800abbe:	e005      	b.n	800abcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d106      	bne.n	800abec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7f5 fd04 	bl	80005f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac3c:	431a      	orrs	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac46:	431a      	orrs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1b      	ldr	r3, [r3, #32]
 800ac4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac50:	ea42 0103 	orr.w	r1, r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	0c1a      	lsrs	r2, r3, #16
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f002 0204 	and.w	r2, r2, #4
 800ac72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	69da      	ldr	r2, [r3, #28]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	4613      	mov	r3, r2
 800acaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d101      	bne.n	800acbe <HAL_SPI_Transmit+0x22>
 800acba:	2302      	movs	r3, #2
 800acbc:	e12d      	b.n	800af1a <HAL_SPI_Transmit+0x27e>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acc6:	f7ff f8a7 	bl	8009e18 <HAL_GetTick>
 800acca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800accc:	88fb      	ldrh	r3, [r7, #6]
 800acce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d002      	beq.n	800ace2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800acdc:	2302      	movs	r3, #2
 800acde:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ace0:	e116      	b.n	800af10 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <HAL_SPI_Transmit+0x52>
 800ace8:	88fb      	ldrh	r3, [r7, #6]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800acf2:	e10d      	b.n	800af10 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2203      	movs	r2, #3
 800acf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	88fa      	ldrh	r2, [r7, #6]
 800ad0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	88fa      	ldrh	r2, [r7, #6]
 800ad12:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad3a:	d10f      	bne.n	800ad5c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad66:	2b40      	cmp	r3, #64	; 0x40
 800ad68:	d007      	beq.n	800ad7a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad82:	d14f      	bne.n	800ae24 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <HAL_SPI_Transmit+0xf6>
 800ad8c:	8afb      	ldrh	r3, [r7, #22]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d142      	bne.n	800ae18 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	881a      	ldrh	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	1c9a      	adds	r2, r3, #2
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800adb6:	e02f      	b.n	800ae18 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f003 0302 	and.w	r3, r3, #2
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d112      	bne.n	800adec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	881a      	ldrh	r2, [r3, #0]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	1c9a      	adds	r2, r3, #2
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	86da      	strh	r2, [r3, #54]	; 0x36
 800adea:	e015      	b.n	800ae18 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adec:	f7ff f814 	bl	8009e18 <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d803      	bhi.n	800ae04 <HAL_SPI_Transmit+0x168>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae02:	d102      	bne.n	800ae0a <HAL_SPI_Transmit+0x16e>
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d106      	bne.n	800ae18 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ae16:	e07b      	b.n	800af10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1ca      	bne.n	800adb8 <HAL_SPI_Transmit+0x11c>
 800ae22:	e050      	b.n	800aec6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <HAL_SPI_Transmit+0x196>
 800ae2c:	8afb      	ldrh	r3, [r7, #22]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d144      	bne.n	800aebc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	330c      	adds	r3, #12
 800ae3c:	7812      	ldrb	r2, [r2, #0]
 800ae3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3b01      	subs	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ae58:	e030      	b.n	800aebc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d113      	bne.n	800ae90 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	330c      	adds	r3, #12
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae8e:	e015      	b.n	800aebc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae90:	f7fe ffc2 	bl	8009e18 <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d803      	bhi.n	800aea8 <HAL_SPI_Transmit+0x20c>
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aea6:	d102      	bne.n	800aeae <HAL_SPI_Transmit+0x212>
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800aeba:	e029      	b.n	800af10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1c9      	bne.n	800ae5a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fbcc 	bl	800b668 <SPI_EndRxTxTransaction>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10a      	bne.n	800aefa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aee4:	2300      	movs	r3, #0
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	613b      	str	r3, [r7, #16]
 800aef8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d002      	beq.n	800af08 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	77fb      	strb	r3, [r7, #31]
 800af06:	e003      	b.n	800af10 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af18:	7ffb      	ldrb	r3, [r7, #31]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b088      	sub	sp, #32
 800af26:	af02      	add	r7, sp, #8
 800af28:	60f8      	str	r0, [r7, #12]
 800af2a:	60b9      	str	r1, [r7, #8]
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	4613      	mov	r3, r2
 800af30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d002      	beq.n	800af48 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800af42:	2302      	movs	r3, #2
 800af44:	75fb      	strb	r3, [r7, #23]
    goto error;
 800af46:	e0fb      	b.n	800b140 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af50:	d112      	bne.n	800af78 <HAL_SPI_Receive+0x56>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10e      	bne.n	800af78 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2204      	movs	r2, #4
 800af5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800af62:	88fa      	ldrh	r2, [r7, #6]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f000 f8ef 	bl	800b152 <HAL_SPI_TransmitReceive>
 800af74:	4603      	mov	r3, r0
 800af76:	e0e8      	b.n	800b14a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <HAL_SPI_Receive+0x64>
 800af82:	2302      	movs	r3, #2
 800af84:	e0e1      	b.n	800b14a <HAL_SPI_Receive+0x228>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af8e:	f7fe ff43 	bl	8009e18 <HAL_GetTick>
 800af92:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <HAL_SPI_Receive+0x7e>
 800af9a:	88fb      	ldrh	r3, [r7, #6]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800afa4:	e0cc      	b.n	800b140 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2204      	movs	r2, #4
 800afaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	88fa      	ldrh	r2, [r7, #6]
 800afbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	88fa      	ldrh	r2, [r7, #6]
 800afc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afec:	d10f      	bne.n	800b00e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800affc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b00c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b018:	2b40      	cmp	r3, #64	; 0x40
 800b01a:	d007      	beq.n	800b02c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b02a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d16a      	bne.n	800b10a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b034:	e032      	b.n	800b09c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b01      	cmp	r3, #1
 800b042:	d115      	bne.n	800b070 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f103 020c 	add.w	r2, r3, #12
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b050:	7812      	ldrb	r2, [r2, #0]
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	1c5a      	adds	r2, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b064:	b29b      	uxth	r3, r3
 800b066:	3b01      	subs	r3, #1
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b06e:	e015      	b.n	800b09c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b070:	f7fe fed2 	bl	8009e18 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d803      	bhi.n	800b088 <HAL_SPI_Receive+0x166>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b086:	d102      	bne.n	800b08e <HAL_SPI_Receive+0x16c>
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800b08e:	2303      	movs	r3, #3
 800b090:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b09a:	e051      	b.n	800b140 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1c7      	bne.n	800b036 <HAL_SPI_Receive+0x114>
 800b0a6:	e035      	b.n	800b114 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d113      	bne.n	800b0de <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	b292      	uxth	r2, r2
 800b0c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	1c9a      	adds	r2, r3, #2
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0dc:	e015      	b.n	800b10a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0de:	f7fe fe9b 	bl	8009e18 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d803      	bhi.n	800b0f6 <HAL_SPI_Receive+0x1d4>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0f4:	d102      	bne.n	800b0fc <HAL_SPI_Receive+0x1da>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d106      	bne.n	800b10a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800b108:	e01a      	b.n	800b140 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b10e:	b29b      	uxth	r3, r3
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1c9      	bne.n	800b0a8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fa53 	bl	800b5c4 <SPI_EndRxTransaction>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	75fb      	strb	r3, [r7, #23]
 800b136:	e003      	b.n	800b140 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b148:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b08c      	sub	sp, #48	; 0x30
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
 800b15e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b160:	2301      	movs	r3, #1
 800b162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_SPI_TransmitReceive+0x26>
 800b174:	2302      	movs	r3, #2
 800b176:	e198      	b.n	800b4aa <HAL_SPI_TransmitReceive+0x358>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b180:	f7fe fe4a 	bl	8009e18 <HAL_GetTick>
 800b184:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b18c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b196:	887b      	ldrh	r3, [r7, #2]
 800b198:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b19a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d00f      	beq.n	800b1c2 <HAL_SPI_TransmitReceive+0x70>
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1a8:	d107      	bne.n	800b1ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d103      	bne.n	800b1ba <HAL_SPI_TransmitReceive+0x68>
 800b1b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1b6:	2b04      	cmp	r3, #4
 800b1b8:	d003      	beq.n	800b1c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1c0:	e16d      	b.n	800b49e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <HAL_SPI_TransmitReceive+0x82>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <HAL_SPI_TransmitReceive+0x82>
 800b1ce:	887b      	ldrh	r3, [r7, #2]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1da:	e160      	b.n	800b49e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d003      	beq.n	800b1f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2205      	movs	r2, #5
 800b1ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	887a      	ldrh	r2, [r7, #2]
 800b200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	887a      	ldrh	r2, [r7, #2]
 800b206:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	887a      	ldrh	r2, [r7, #2]
 800b212:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	887a      	ldrh	r2, [r7, #2]
 800b218:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b230:	2b40      	cmp	r3, #64	; 0x40
 800b232:	d007      	beq.n	800b244 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b24c:	d17c      	bne.n	800b348 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <HAL_SPI_TransmitReceive+0x10a>
 800b256:	8b7b      	ldrh	r3, [r7, #26]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d16a      	bne.n	800b332 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b260:	881a      	ldrh	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	1c9a      	adds	r2, r3, #2
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b280:	e057      	b.n	800b332 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d11b      	bne.n	800b2c8 <HAL_SPI_TransmitReceive+0x176>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b294:	b29b      	uxth	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d016      	beq.n	800b2c8 <HAL_SPI_TransmitReceive+0x176>
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d113      	bne.n	800b2c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a4:	881a      	ldrh	r2, [r3, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b0:	1c9a      	adds	r2, r3, #2
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d119      	bne.n	800b30a <HAL_SPI_TransmitReceive+0x1b8>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d014      	beq.n	800b30a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f2:	1c9a      	adds	r2, r3, #2
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b29a      	uxth	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b306:	2301      	movs	r3, #1
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b30a:	f7fe fd85 	bl	8009e18 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b316:	429a      	cmp	r2, r3
 800b318:	d80b      	bhi.n	800b332 <HAL_SPI_TransmitReceive+0x1e0>
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b320:	d007      	beq.n	800b332 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b330:	e0b5      	b.n	800b49e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b336:	b29b      	uxth	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1a2      	bne.n	800b282 <HAL_SPI_TransmitReceive+0x130>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b340:	b29b      	uxth	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d19d      	bne.n	800b282 <HAL_SPI_TransmitReceive+0x130>
 800b346:	e080      	b.n	800b44a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <HAL_SPI_TransmitReceive+0x204>
 800b350:	8b7b      	ldrh	r3, [r7, #26]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d16f      	bne.n	800b436 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	330c      	adds	r3, #12
 800b360:	7812      	ldrb	r2, [r2, #0]
 800b362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b372:	b29b      	uxth	r3, r3
 800b374:	3b01      	subs	r3, #1
 800b376:	b29a      	uxth	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b37c:	e05b      	b.n	800b436 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f003 0302 	and.w	r3, r3, #2
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d11c      	bne.n	800b3c6 <HAL_SPI_TransmitReceive+0x274>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b390:	b29b      	uxth	r3, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	d017      	beq.n	800b3c6 <HAL_SPI_TransmitReceive+0x274>
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d114      	bne.n	800b3c6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	330c      	adds	r3, #12
 800b3a6:	7812      	ldrb	r2, [r2, #0]
 800b3a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ae:	1c5a      	adds	r2, r3, #1
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d119      	bne.n	800b408 <HAL_SPI_TransmitReceive+0x2b6>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d014      	beq.n	800b408 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68da      	ldr	r2, [r3, #12]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e8:	b2d2      	uxtb	r2, r2
 800b3ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b404:	2301      	movs	r3, #1
 800b406:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b408:	f7fe fd06 	bl	8009e18 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b414:	429a      	cmp	r2, r3
 800b416:	d803      	bhi.n	800b420 <HAL_SPI_TransmitReceive+0x2ce>
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b41e:	d102      	bne.n	800b426 <HAL_SPI_TransmitReceive+0x2d4>
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	2b00      	cmp	r3, #0
 800b424:	d107      	bne.n	800b436 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b426:	2303      	movs	r3, #3
 800b428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2201      	movs	r2, #1
 800b430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b434:	e033      	b.n	800b49e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d19e      	bne.n	800b37e <HAL_SPI_TransmitReceive+0x22c>
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b444:	b29b      	uxth	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d199      	bne.n	800b37e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f90a 	bl	800b668 <SPI_EndRxTxTransaction>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d006      	beq.n	800b468 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2220      	movs	r2, #32
 800b464:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b466:	e01a      	b.n	800b49e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b494:	e003      	b.n	800b49e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3730      	adds	r7, #48	; 0x30
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b4c4:	f7fe fca8 	bl	8009e18 <HAL_GetTick>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4cc:	1a9b      	subs	r3, r3, r2
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b4d4:	f7fe fca0 	bl	8009e18 <HAL_GetTick>
 800b4d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b4da:	4b39      	ldr	r3, [pc, #228]	; (800b5c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	015b      	lsls	r3, r3, #5
 800b4e0:	0d1b      	lsrs	r3, r3, #20
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	fb02 f303 	mul.w	r3, r2, r3
 800b4e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4ea:	e054      	b.n	800b596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4f2:	d050      	beq.n	800b596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b4f4:	f7fe fc90 	bl	8009e18 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	69fa      	ldr	r2, [r7, #28]
 800b500:	429a      	cmp	r2, r3
 800b502:	d902      	bls.n	800b50a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d13d      	bne.n	800b586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b522:	d111      	bne.n	800b548 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b52c:	d004      	beq.n	800b538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b536:	d107      	bne.n	800b548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b550:	d10f      	bne.n	800b572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e017      	b.n	800b5b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	3b01      	subs	r3, #1
 800b594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	4013      	ands	r3, r2
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	bf0c      	ite	eq
 800b5a6:	2301      	moveq	r3, #1
 800b5a8:	2300      	movne	r3, #0
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d19b      	bne.n	800b4ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3720      	adds	r7, #32
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000000 	.word	0x20000000

0800b5c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5d8:	d111      	bne.n	800b5fe <SPI_EndRxTransaction+0x3a>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5e2:	d004      	beq.n	800b5ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ec:	d107      	bne.n	800b5fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5fc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b606:	d117      	bne.n	800b638 <SPI_EndRxTransaction+0x74>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b610:	d112      	bne.n	800b638 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2200      	movs	r2, #0
 800b61a:	2101      	movs	r1, #1
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f7ff ff49 	bl	800b4b4 <SPI_WaitFlagStateUntilTimeout>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01a      	beq.n	800b65e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62c:	f043 0220 	orr.w	r2, r3, #32
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e013      	b.n	800b660 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2200      	movs	r2, #0
 800b640:	2180      	movs	r1, #128	; 0x80
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7ff ff36 	bl	800b4b4 <SPI_WaitFlagStateUntilTimeout>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d007      	beq.n	800b65e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b652:	f043 0220 	orr.w	r2, r3, #32
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e000      	b.n	800b660 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2200      	movs	r2, #0
 800b67c:	2180      	movs	r1, #128	; 0x80
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f7ff ff18 	bl	800b4b4 <SPI_WaitFlagStateUntilTimeout>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d007      	beq.n	800b69a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68e:	f043 0220 	orr.w	r2, r3, #32
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e000      	b.n	800b69c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e042      	b.n	800b73c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f7f4 ffdc 	bl	8000688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2224      	movs	r2, #36	; 0x24
 800b6d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f91d 	bl	800b928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	691a      	ldr	r2, [r3, #16]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	695a      	ldr	r2, [r3, #20]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b70c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68da      	ldr	r2, [r3, #12]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b71c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2220      	movs	r2, #32
 800b730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08a      	sub	sp, #40	; 0x28
 800b748:	af02      	add	r7, sp, #8
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	4613      	mov	r3, r2
 800b752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b20      	cmp	r3, #32
 800b762:	d16d      	bne.n	800b840 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <HAL_UART_Transmit+0x2c>
 800b76a:	88fb      	ldrh	r3, [r7, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e066      	b.n	800b842 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2221      	movs	r2, #33	; 0x21
 800b77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b782:	f7fe fb49 	bl	8009e18 <HAL_GetTick>
 800b786:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	88fa      	ldrh	r2, [r7, #6]
 800b78c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	88fa      	ldrh	r2, [r7, #6]
 800b792:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79c:	d108      	bne.n	800b7b0 <HAL_UART_Transmit+0x6c>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d104      	bne.n	800b7b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	61bb      	str	r3, [r7, #24]
 800b7ae:	e003      	b.n	800b7b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b7b8:	e02a      	b.n	800b810 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2180      	movs	r1, #128	; 0x80
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f000 f840 	bl	800b84a <UART_WaitOnFlagUntilTimeout>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e036      	b.n	800b842 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10b      	bne.n	800b7f2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	3302      	adds	r3, #2
 800b7ee:	61bb      	str	r3, [r7, #24]
 800b7f0:	e007      	b.n	800b802 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	781a      	ldrb	r2, [r3, #0]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	3301      	adds	r3, #1
 800b800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b806:	b29b      	uxth	r3, r3
 800b808:	3b01      	subs	r3, #1
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b814:	b29b      	uxth	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1cf      	bne.n	800b7ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2200      	movs	r2, #0
 800b822:	2140      	movs	r1, #64	; 0x40
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f810 	bl	800b84a <UART_WaitOnFlagUntilTimeout>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d001      	beq.n	800b834 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e006      	b.n	800b842 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2220      	movs	r2, #32
 800b838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	e000      	b.n	800b842 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b840:	2302      	movs	r3, #2
  }
}
 800b842:	4618      	mov	r0, r3
 800b844:	3720      	adds	r7, #32
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}

0800b84a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b090      	sub	sp, #64	; 0x40
 800b84e:	af00      	add	r7, sp, #0
 800b850:	60f8      	str	r0, [r7, #12]
 800b852:	60b9      	str	r1, [r7, #8]
 800b854:	603b      	str	r3, [r7, #0]
 800b856:	4613      	mov	r3, r2
 800b858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b85a:	e050      	b.n	800b8fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b85e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b862:	d04c      	beq.n	800b8fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b866:	2b00      	cmp	r3, #0
 800b868:	d007      	beq.n	800b87a <UART_WaitOnFlagUntilTimeout+0x30>
 800b86a:	f7fe fad5 	bl	8009e18 <HAL_GetTick>
 800b86e:	4602      	mov	r2, r0
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b876:	429a      	cmp	r2, r3
 800b878:	d241      	bcs.n	800b8fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	330c      	adds	r3, #12
 800b880:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	330c      	adds	r3, #12
 800b898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b89a:	637a      	str	r2, [r7, #52]	; 0x34
 800b89c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e5      	bne.n	800b87a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3314      	adds	r3, #20
 800b8b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f023 0301 	bic.w	r3, r3, #1
 800b8c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3314      	adds	r3, #20
 800b8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8ce:	623a      	str	r2, [r7, #32]
 800b8d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	69f9      	ldr	r1, [r7, #28]
 800b8d4:	6a3a      	ldr	r2, [r7, #32]
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e5      	bne.n	800b8ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e00f      	b.n	800b91e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	4013      	ands	r3, r2
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	bf0c      	ite	eq
 800b90e:	2301      	moveq	r3, #1
 800b910:	2300      	movne	r3, #0
 800b912:	b2db      	uxtb	r3, r3
 800b914:	461a      	mov	r2, r3
 800b916:	79fb      	ldrb	r3, [r7, #7]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d09f      	beq.n	800b85c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3740      	adds	r7, #64	; 0x40
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68da      	ldr	r2, [r3, #12]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689a      	ldr	r2, [r3, #8]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	431a      	orrs	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	4313      	orrs	r3, r2
 800b956:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b962:	f023 030c 	bic.w	r3, r3, #12
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	6812      	ldr	r2, [r2, #0]
 800b96a:	68b9      	ldr	r1, [r7, #8]
 800b96c:	430b      	orrs	r3, r1
 800b96e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	430a      	orrs	r2, r1
 800b984:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a2c      	ldr	r2, [pc, #176]	; (800ba3c <UART_SetConfig+0x114>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d103      	bne.n	800b998 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b990:	f7ff f8ce 	bl	800ab30 <HAL_RCC_GetPCLK2Freq>
 800b994:	60f8      	str	r0, [r7, #12]
 800b996:	e002      	b.n	800b99e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b998:	f7ff f8b6 	bl	800ab08 <HAL_RCC_GetPCLK1Freq>
 800b99c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	009a      	lsls	r2, r3, #2
 800b9a8:	441a      	add	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b4:	4a22      	ldr	r2, [pc, #136]	; (800ba40 <UART_SetConfig+0x118>)
 800b9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ba:	095b      	lsrs	r3, r3, #5
 800b9bc:	0119      	lsls	r1, r3, #4
 800b9be:	68fa      	ldr	r2, [r7, #12]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009a      	lsls	r2, r3, #2
 800b9c8:	441a      	add	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <UART_SetConfig+0x118>)
 800b9d6:	fba3 0302 	umull	r0, r3, r3, r2
 800b9da:	095b      	lsrs	r3, r3, #5
 800b9dc:	2064      	movs	r0, #100	; 0x64
 800b9de:	fb00 f303 	mul.w	r3, r0, r3
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	011b      	lsls	r3, r3, #4
 800b9e6:	3332      	adds	r3, #50	; 0x32
 800b9e8:	4a15      	ldr	r2, [pc, #84]	; (800ba40 <UART_SetConfig+0x118>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9f4:	4419      	add	r1, r3
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	4413      	add	r3, r2
 800b9fe:	009a      	lsls	r2, r3, #2
 800ba00:	441a      	add	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	fbb2 f2f3 	udiv	r2, r2, r3
 800ba0c:	4b0c      	ldr	r3, [pc, #48]	; (800ba40 <UART_SetConfig+0x118>)
 800ba0e:	fba3 0302 	umull	r0, r3, r3, r2
 800ba12:	095b      	lsrs	r3, r3, #5
 800ba14:	2064      	movs	r0, #100	; 0x64
 800ba16:	fb00 f303 	mul.w	r3, r0, r3
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	011b      	lsls	r3, r3, #4
 800ba1e:	3332      	adds	r3, #50	; 0x32
 800ba20:	4a07      	ldr	r2, [pc, #28]	; (800ba40 <UART_SetConfig+0x118>)
 800ba22:	fba2 2303 	umull	r2, r3, r2, r3
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	f003 020f 	and.w	r2, r3, #15
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	440a      	add	r2, r1
 800ba32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	40013800 	.word	0x40013800
 800ba40:	51eb851f 	.word	0x51eb851f

0800ba44 <__assert_func>:
 800ba44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba46:	4614      	mov	r4, r2
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <__assert_func+0x2c>)
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	68d8      	ldr	r0, [r3, #12]
 800ba52:	b14c      	cbz	r4, 800ba68 <__assert_func+0x24>
 800ba54:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <__assert_func+0x30>)
 800ba56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba5a:	9100      	str	r1, [sp, #0]
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	4906      	ldr	r1, [pc, #24]	; (800ba78 <__assert_func+0x34>)
 800ba60:	f000 fa56 	bl	800bf10 <fiprintf>
 800ba64:	f000 fcc1 	bl	800c3ea <abort>
 800ba68:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <__assert_func+0x38>)
 800ba6a:	461c      	mov	r4, r3
 800ba6c:	e7f3      	b.n	800ba56 <__assert_func+0x12>
 800ba6e:	bf00      	nop
 800ba70:	200000d8 	.word	0x200000d8
 800ba74:	0800e48a 	.word	0x0800e48a
 800ba78:	0800e497 	.word	0x0800e497
 800ba7c:	0800e4c5 	.word	0x0800e4c5

0800ba80 <atoi>:
 800ba80:	220a      	movs	r2, #10
 800ba82:	2100      	movs	r1, #0
 800ba84:	f000 b954 	b.w	800bd30 <strtol>

0800ba88 <__itoa>:
 800ba88:	1e93      	subs	r3, r2, #2
 800ba8a:	2b22      	cmp	r3, #34	; 0x22
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	460c      	mov	r4, r1
 800ba90:	d904      	bls.n	800ba9c <__itoa+0x14>
 800ba92:	2300      	movs	r3, #0
 800ba94:	461c      	mov	r4, r3
 800ba96:	700b      	strb	r3, [r1, #0]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	bd10      	pop	{r4, pc}
 800ba9c:	2a0a      	cmp	r2, #10
 800ba9e:	d109      	bne.n	800bab4 <__itoa+0x2c>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	da07      	bge.n	800bab4 <__itoa+0x2c>
 800baa4:	232d      	movs	r3, #45	; 0x2d
 800baa6:	700b      	strb	r3, [r1, #0]
 800baa8:	2101      	movs	r1, #1
 800baaa:	4240      	negs	r0, r0
 800baac:	4421      	add	r1, r4
 800baae:	f000 f949 	bl	800bd44 <__utoa>
 800bab2:	e7f1      	b.n	800ba98 <__itoa+0x10>
 800bab4:	2100      	movs	r1, #0
 800bab6:	e7f9      	b.n	800baac <__itoa+0x24>

0800bab8 <itoa>:
 800bab8:	f7ff bfe6 	b.w	800ba88 <__itoa>

0800babc <malloc>:
 800babc:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <malloc+0xc>)
 800babe:	4601      	mov	r1, r0
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	f000 b82b 	b.w	800bb1c <_malloc_r>
 800bac6:	bf00      	nop
 800bac8:	200000d8 	.word	0x200000d8

0800bacc <free>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <free+0xc>)
 800bace:	4601      	mov	r1, r0
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	f000 bc91 	b.w	800c3f8 <_free_r>
 800bad6:	bf00      	nop
 800bad8:	200000d8 	.word	0x200000d8

0800badc <sbrk_aligned>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	4e0e      	ldr	r6, [pc, #56]	; (800bb18 <sbrk_aligned+0x3c>)
 800bae0:	460c      	mov	r4, r1
 800bae2:	6831      	ldr	r1, [r6, #0]
 800bae4:	4605      	mov	r5, r0
 800bae6:	b911      	cbnz	r1, 800baee <sbrk_aligned+0x12>
 800bae8:	f000 fc1a 	bl	800c320 <_sbrk_r>
 800baec:	6030      	str	r0, [r6, #0]
 800baee:	4621      	mov	r1, r4
 800baf0:	4628      	mov	r0, r5
 800baf2:	f000 fc15 	bl	800c320 <_sbrk_r>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d00a      	beq.n	800bb10 <sbrk_aligned+0x34>
 800bafa:	1cc4      	adds	r4, r0, #3
 800bafc:	f024 0403 	bic.w	r4, r4, #3
 800bb00:	42a0      	cmp	r0, r4
 800bb02:	d007      	beq.n	800bb14 <sbrk_aligned+0x38>
 800bb04:	1a21      	subs	r1, r4, r0
 800bb06:	4628      	mov	r0, r5
 800bb08:	f000 fc0a 	bl	800c320 <_sbrk_r>
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	d101      	bne.n	800bb14 <sbrk_aligned+0x38>
 800bb10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bb14:	4620      	mov	r0, r4
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	2000023c 	.word	0x2000023c

0800bb1c <_malloc_r>:
 800bb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb20:	1ccd      	adds	r5, r1, #3
 800bb22:	f025 0503 	bic.w	r5, r5, #3
 800bb26:	3508      	adds	r5, #8
 800bb28:	2d0c      	cmp	r5, #12
 800bb2a:	bf38      	it	cc
 800bb2c:	250c      	movcc	r5, #12
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	4607      	mov	r7, r0
 800bb32:	db01      	blt.n	800bb38 <_malloc_r+0x1c>
 800bb34:	42a9      	cmp	r1, r5
 800bb36:	d905      	bls.n	800bb44 <_malloc_r+0x28>
 800bb38:	230c      	movs	r3, #12
 800bb3a:	2600      	movs	r6, #0
 800bb3c:	603b      	str	r3, [r7, #0]
 800bb3e:	4630      	mov	r0, r6
 800bb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc18 <_malloc_r+0xfc>
 800bb48:	f000 f868 	bl	800bc1c <__malloc_lock>
 800bb4c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb50:	461c      	mov	r4, r3
 800bb52:	bb5c      	cbnz	r4, 800bbac <_malloc_r+0x90>
 800bb54:	4629      	mov	r1, r5
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7ff ffc0 	bl	800badc <sbrk_aligned>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	4604      	mov	r4, r0
 800bb60:	d155      	bne.n	800bc0e <_malloc_r+0xf2>
 800bb62:	f8d8 4000 	ldr.w	r4, [r8]
 800bb66:	4626      	mov	r6, r4
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	d145      	bne.n	800bbf8 <_malloc_r+0xdc>
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	d048      	beq.n	800bc02 <_malloc_r+0xe6>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	4631      	mov	r1, r6
 800bb74:	4638      	mov	r0, r7
 800bb76:	eb04 0903 	add.w	r9, r4, r3
 800bb7a:	f000 fbd1 	bl	800c320 <_sbrk_r>
 800bb7e:	4581      	cmp	r9, r0
 800bb80:	d13f      	bne.n	800bc02 <_malloc_r+0xe6>
 800bb82:	6821      	ldr	r1, [r4, #0]
 800bb84:	4638      	mov	r0, r7
 800bb86:	1a6d      	subs	r5, r5, r1
 800bb88:	4629      	mov	r1, r5
 800bb8a:	f7ff ffa7 	bl	800badc <sbrk_aligned>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d037      	beq.n	800bc02 <_malloc_r+0xe6>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	442b      	add	r3, r5
 800bb96:	6023      	str	r3, [r4, #0]
 800bb98:	f8d8 3000 	ldr.w	r3, [r8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d038      	beq.n	800bc12 <_malloc_r+0xf6>
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	42a2      	cmp	r2, r4
 800bba4:	d12b      	bne.n	800bbfe <_malloc_r+0xe2>
 800bba6:	2200      	movs	r2, #0
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	e00f      	b.n	800bbcc <_malloc_r+0xb0>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	1b52      	subs	r2, r2, r5
 800bbb0:	d41f      	bmi.n	800bbf2 <_malloc_r+0xd6>
 800bbb2:	2a0b      	cmp	r2, #11
 800bbb4:	d917      	bls.n	800bbe6 <_malloc_r+0xca>
 800bbb6:	1961      	adds	r1, r4, r5
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	6025      	str	r5, [r4, #0]
 800bbbc:	bf18      	it	ne
 800bbbe:	6059      	strne	r1, [r3, #4]
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	bf08      	it	eq
 800bbc4:	f8c8 1000 	streq.w	r1, [r8]
 800bbc8:	5162      	str	r2, [r4, r5]
 800bbca:	604b      	str	r3, [r1, #4]
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f104 060b 	add.w	r6, r4, #11
 800bbd2:	f000 f829 	bl	800bc28 <__malloc_unlock>
 800bbd6:	f026 0607 	bic.w	r6, r6, #7
 800bbda:	1d23      	adds	r3, r4, #4
 800bbdc:	1af2      	subs	r2, r6, r3
 800bbde:	d0ae      	beq.n	800bb3e <_malloc_r+0x22>
 800bbe0:	1b9b      	subs	r3, r3, r6
 800bbe2:	50a3      	str	r3, [r4, r2]
 800bbe4:	e7ab      	b.n	800bb3e <_malloc_r+0x22>
 800bbe6:	42a3      	cmp	r3, r4
 800bbe8:	6862      	ldr	r2, [r4, #4]
 800bbea:	d1dd      	bne.n	800bba8 <_malloc_r+0x8c>
 800bbec:	f8c8 2000 	str.w	r2, [r8]
 800bbf0:	e7ec      	b.n	800bbcc <_malloc_r+0xb0>
 800bbf2:	4623      	mov	r3, r4
 800bbf4:	6864      	ldr	r4, [r4, #4]
 800bbf6:	e7ac      	b.n	800bb52 <_malloc_r+0x36>
 800bbf8:	4634      	mov	r4, r6
 800bbfa:	6876      	ldr	r6, [r6, #4]
 800bbfc:	e7b4      	b.n	800bb68 <_malloc_r+0x4c>
 800bbfe:	4613      	mov	r3, r2
 800bc00:	e7cc      	b.n	800bb9c <_malloc_r+0x80>
 800bc02:	230c      	movs	r3, #12
 800bc04:	4638      	mov	r0, r7
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	f000 f80e 	bl	800bc28 <__malloc_unlock>
 800bc0c:	e797      	b.n	800bb3e <_malloc_r+0x22>
 800bc0e:	6025      	str	r5, [r4, #0]
 800bc10:	e7dc      	b.n	800bbcc <_malloc_r+0xb0>
 800bc12:	605b      	str	r3, [r3, #4]
 800bc14:	deff      	udf	#255	; 0xff
 800bc16:	bf00      	nop
 800bc18:	20000238 	.word	0x20000238

0800bc1c <__malloc_lock>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__malloc_lock+0x8>)
 800bc1e:	f000 bbcc 	b.w	800c3ba <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	20000380 	.word	0x20000380

0800bc28 <__malloc_unlock>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__malloc_unlock+0x8>)
 800bc2a:	f000 bbc7 	b.w	800c3bc <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	20000380 	.word	0x20000380

0800bc34 <_strtol_l.constprop.0>:
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3a:	4686      	mov	lr, r0
 800bc3c:	4690      	mov	r8, r2
 800bc3e:	d001      	beq.n	800bc44 <_strtol_l.constprop.0+0x10>
 800bc40:	2b24      	cmp	r3, #36	; 0x24
 800bc42:	d906      	bls.n	800bc52 <_strtol_l.constprop.0+0x1e>
 800bc44:	f000 fb8e 	bl	800c364 <__errno>
 800bc48:	2316      	movs	r3, #22
 800bc4a:	6003      	str	r3, [r0, #0]
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc52:	460d      	mov	r5, r1
 800bc54:	4835      	ldr	r0, [pc, #212]	; (800bd2c <_strtol_l.constprop.0+0xf8>)
 800bc56:	462a      	mov	r2, r5
 800bc58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc5c:	5d06      	ldrb	r6, [r0, r4]
 800bc5e:	f016 0608 	ands.w	r6, r6, #8
 800bc62:	d1f8      	bne.n	800bc56 <_strtol_l.constprop.0+0x22>
 800bc64:	2c2d      	cmp	r4, #45	; 0x2d
 800bc66:	d12e      	bne.n	800bcc6 <_strtol_l.constprop.0+0x92>
 800bc68:	2601      	movs	r6, #1
 800bc6a:	782c      	ldrb	r4, [r5, #0]
 800bc6c:	1c95      	adds	r5, r2, #2
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d057      	beq.n	800bd22 <_strtol_l.constprop.0+0xee>
 800bc72:	2b10      	cmp	r3, #16
 800bc74:	d109      	bne.n	800bc8a <_strtol_l.constprop.0+0x56>
 800bc76:	2c30      	cmp	r4, #48	; 0x30
 800bc78:	d107      	bne.n	800bc8a <_strtol_l.constprop.0+0x56>
 800bc7a:	782a      	ldrb	r2, [r5, #0]
 800bc7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bc80:	2a58      	cmp	r2, #88	; 0x58
 800bc82:	d149      	bne.n	800bd18 <_strtol_l.constprop.0+0xe4>
 800bc84:	2310      	movs	r3, #16
 800bc86:	786c      	ldrb	r4, [r5, #1]
 800bc88:	3502      	adds	r5, #2
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800bc90:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bc94:	fbbc f9f3 	udiv	r9, ip, r3
 800bc98:	4610      	mov	r0, r2
 800bc9a:	fb03 ca19 	mls	sl, r3, r9, ip
 800bc9e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bca2:	2f09      	cmp	r7, #9
 800bca4:	d814      	bhi.n	800bcd0 <_strtol_l.constprop.0+0x9c>
 800bca6:	463c      	mov	r4, r7
 800bca8:	42a3      	cmp	r3, r4
 800bcaa:	dd20      	ble.n	800bcee <_strtol_l.constprop.0+0xba>
 800bcac:	1c57      	adds	r7, r2, #1
 800bcae:	d007      	beq.n	800bcc0 <_strtol_l.constprop.0+0x8c>
 800bcb0:	4581      	cmp	r9, r0
 800bcb2:	d319      	bcc.n	800bce8 <_strtol_l.constprop.0+0xb4>
 800bcb4:	d101      	bne.n	800bcba <_strtol_l.constprop.0+0x86>
 800bcb6:	45a2      	cmp	sl, r4
 800bcb8:	db16      	blt.n	800bce8 <_strtol_l.constprop.0+0xb4>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	fb00 4003 	mla	r0, r0, r3, r4
 800bcc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcc4:	e7eb      	b.n	800bc9e <_strtol_l.constprop.0+0x6a>
 800bcc6:	2c2b      	cmp	r4, #43	; 0x2b
 800bcc8:	bf04      	itt	eq
 800bcca:	782c      	ldrbeq	r4, [r5, #0]
 800bccc:	1c95      	addeq	r5, r2, #2
 800bcce:	e7ce      	b.n	800bc6e <_strtol_l.constprop.0+0x3a>
 800bcd0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bcd4:	2f19      	cmp	r7, #25
 800bcd6:	d801      	bhi.n	800bcdc <_strtol_l.constprop.0+0xa8>
 800bcd8:	3c37      	subs	r4, #55	; 0x37
 800bcda:	e7e5      	b.n	800bca8 <_strtol_l.constprop.0+0x74>
 800bcdc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bce0:	2f19      	cmp	r7, #25
 800bce2:	d804      	bhi.n	800bcee <_strtol_l.constprop.0+0xba>
 800bce4:	3c57      	subs	r4, #87	; 0x57
 800bce6:	e7df      	b.n	800bca8 <_strtol_l.constprop.0+0x74>
 800bce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcec:	e7e8      	b.n	800bcc0 <_strtol_l.constprop.0+0x8c>
 800bcee:	1c53      	adds	r3, r2, #1
 800bcf0:	d108      	bne.n	800bd04 <_strtol_l.constprop.0+0xd0>
 800bcf2:	2322      	movs	r3, #34	; 0x22
 800bcf4:	4660      	mov	r0, ip
 800bcf6:	f8ce 3000 	str.w	r3, [lr]
 800bcfa:	f1b8 0f00 	cmp.w	r8, #0
 800bcfe:	d0a6      	beq.n	800bc4e <_strtol_l.constprop.0+0x1a>
 800bd00:	1e69      	subs	r1, r5, #1
 800bd02:	e006      	b.n	800bd12 <_strtol_l.constprop.0+0xde>
 800bd04:	b106      	cbz	r6, 800bd08 <_strtol_l.constprop.0+0xd4>
 800bd06:	4240      	negs	r0, r0
 800bd08:	f1b8 0f00 	cmp.w	r8, #0
 800bd0c:	d09f      	beq.n	800bc4e <_strtol_l.constprop.0+0x1a>
 800bd0e:	2a00      	cmp	r2, #0
 800bd10:	d1f6      	bne.n	800bd00 <_strtol_l.constprop.0+0xcc>
 800bd12:	f8c8 1000 	str.w	r1, [r8]
 800bd16:	e79a      	b.n	800bc4e <_strtol_l.constprop.0+0x1a>
 800bd18:	2430      	movs	r4, #48	; 0x30
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1b5      	bne.n	800bc8a <_strtol_l.constprop.0+0x56>
 800bd1e:	2308      	movs	r3, #8
 800bd20:	e7b3      	b.n	800bc8a <_strtol_l.constprop.0+0x56>
 800bd22:	2c30      	cmp	r4, #48	; 0x30
 800bd24:	d0a9      	beq.n	800bc7a <_strtol_l.constprop.0+0x46>
 800bd26:	230a      	movs	r3, #10
 800bd28:	e7af      	b.n	800bc8a <_strtol_l.constprop.0+0x56>
 800bd2a:	bf00      	nop
 800bd2c:	0800e4ec 	.word	0x0800e4ec

0800bd30 <strtol>:
 800bd30:	4613      	mov	r3, r2
 800bd32:	460a      	mov	r2, r1
 800bd34:	4601      	mov	r1, r0
 800bd36:	4802      	ldr	r0, [pc, #8]	; (800bd40 <strtol+0x10>)
 800bd38:	6800      	ldr	r0, [r0, #0]
 800bd3a:	f7ff bf7b 	b.w	800bc34 <_strtol_l.constprop.0>
 800bd3e:	bf00      	nop
 800bd40:	200000d8 	.word	0x200000d8

0800bd44 <__utoa>:
 800bd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd46:	b08b      	sub	sp, #44	; 0x2c
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	466e      	mov	r6, sp
 800bd4e:	4c1d      	ldr	r4, [pc, #116]	; (800bdc4 <__utoa+0x80>)
 800bd50:	f104 0c20 	add.w	ip, r4, #32
 800bd54:	4637      	mov	r7, r6
 800bd56:	6820      	ldr	r0, [r4, #0]
 800bd58:	6861      	ldr	r1, [r4, #4]
 800bd5a:	3408      	adds	r4, #8
 800bd5c:	c703      	stmia	r7!, {r0, r1}
 800bd5e:	4564      	cmp	r4, ip
 800bd60:	463e      	mov	r6, r7
 800bd62:	d1f7      	bne.n	800bd54 <__utoa+0x10>
 800bd64:	7921      	ldrb	r1, [r4, #4]
 800bd66:	6820      	ldr	r0, [r4, #0]
 800bd68:	7139      	strb	r1, [r7, #4]
 800bd6a:	1e91      	subs	r1, r2, #2
 800bd6c:	2922      	cmp	r1, #34	; 0x22
 800bd6e:	6038      	str	r0, [r7, #0]
 800bd70:	f04f 0100 	mov.w	r1, #0
 800bd74:	d904      	bls.n	800bd80 <__utoa+0x3c>
 800bd76:	7019      	strb	r1, [r3, #0]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	b00b      	add	sp, #44	; 0x2c
 800bd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd80:	1e58      	subs	r0, r3, #1
 800bd82:	4684      	mov	ip, r0
 800bd84:	fbb5 f7f2 	udiv	r7, r5, r2
 800bd88:	fb02 5617 	mls	r6, r2, r7, r5
 800bd8c:	3628      	adds	r6, #40	; 0x28
 800bd8e:	446e      	add	r6, sp
 800bd90:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bd94:	460c      	mov	r4, r1
 800bd96:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bd9a:	462e      	mov	r6, r5
 800bd9c:	42b2      	cmp	r2, r6
 800bd9e:	463d      	mov	r5, r7
 800bda0:	f101 0101 	add.w	r1, r1, #1
 800bda4:	d9ee      	bls.n	800bd84 <__utoa+0x40>
 800bda6:	2200      	movs	r2, #0
 800bda8:	545a      	strb	r2, [r3, r1]
 800bdaa:	1919      	adds	r1, r3, r4
 800bdac:	1aa5      	subs	r5, r4, r2
 800bdae:	42aa      	cmp	r2, r5
 800bdb0:	dae3      	bge.n	800bd7a <__utoa+0x36>
 800bdb2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bdb6:	780e      	ldrb	r6, [r1, #0]
 800bdb8:	3201      	adds	r2, #1
 800bdba:	7006      	strb	r6, [r0, #0]
 800bdbc:	f801 5901 	strb.w	r5, [r1], #-1
 800bdc0:	e7f4      	b.n	800bdac <__utoa+0x68>
 800bdc2:	bf00      	nop
 800bdc4:	0800e4c6 	.word	0x0800e4c6

0800bdc8 <std>:
 800bdc8:	2300      	movs	r3, #0
 800bdca:	b510      	push	{r4, lr}
 800bdcc:	4604      	mov	r4, r0
 800bdce:	e9c0 3300 	strd	r3, r3, [r0]
 800bdd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdd6:	6083      	str	r3, [r0, #8]
 800bdd8:	8181      	strh	r1, [r0, #12]
 800bdda:	6643      	str	r3, [r0, #100]	; 0x64
 800bddc:	81c2      	strh	r2, [r0, #14]
 800bdde:	6183      	str	r3, [r0, #24]
 800bde0:	4619      	mov	r1, r3
 800bde2:	2208      	movs	r2, #8
 800bde4:	305c      	adds	r0, #92	; 0x5c
 800bde6:	f000 fa21 	bl	800c22c <memset>
 800bdea:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <std+0x58>)
 800bdec:	6224      	str	r4, [r4, #32]
 800bdee:	6263      	str	r3, [r4, #36]	; 0x24
 800bdf0:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <std+0x5c>)
 800bdf2:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdf4:	4b0c      	ldr	r3, [pc, #48]	; (800be28 <std+0x60>)
 800bdf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdf8:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <std+0x64>)
 800bdfa:	6323      	str	r3, [r4, #48]	; 0x30
 800bdfc:	4b0c      	ldr	r3, [pc, #48]	; (800be30 <std+0x68>)
 800bdfe:	429c      	cmp	r4, r3
 800be00:	d006      	beq.n	800be10 <std+0x48>
 800be02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800be06:	4294      	cmp	r4, r2
 800be08:	d002      	beq.n	800be10 <std+0x48>
 800be0a:	33d0      	adds	r3, #208	; 0xd0
 800be0c:	429c      	cmp	r4, r3
 800be0e:	d105      	bne.n	800be1c <std+0x54>
 800be10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be18:	f000 bace 	b.w	800c3b8 <__retarget_lock_init_recursive>
 800be1c:	bd10      	pop	{r4, pc}
 800be1e:	bf00      	nop
 800be20:	0800c05d 	.word	0x0800c05d
 800be24:	0800c07f 	.word	0x0800c07f
 800be28:	0800c0b7 	.word	0x0800c0b7
 800be2c:	0800c0db 	.word	0x0800c0db
 800be30:	20000240 	.word	0x20000240

0800be34 <stdio_exit_handler>:
 800be34:	4a02      	ldr	r2, [pc, #8]	; (800be40 <stdio_exit_handler+0xc>)
 800be36:	4903      	ldr	r1, [pc, #12]	; (800be44 <stdio_exit_handler+0x10>)
 800be38:	4803      	ldr	r0, [pc, #12]	; (800be48 <stdio_exit_handler+0x14>)
 800be3a:	f000 b87b 	b.w	800bf34 <_fwalk_sglue>
 800be3e:	bf00      	nop
 800be40:	20000080 	.word	0x20000080
 800be44:	0800cb39 	.word	0x0800cb39
 800be48:	2000008c 	.word	0x2000008c

0800be4c <cleanup_stdio>:
 800be4c:	6841      	ldr	r1, [r0, #4]
 800be4e:	4b0c      	ldr	r3, [pc, #48]	; (800be80 <cleanup_stdio+0x34>)
 800be50:	b510      	push	{r4, lr}
 800be52:	4299      	cmp	r1, r3
 800be54:	4604      	mov	r4, r0
 800be56:	d001      	beq.n	800be5c <cleanup_stdio+0x10>
 800be58:	f000 fe6e 	bl	800cb38 <_fflush_r>
 800be5c:	68a1      	ldr	r1, [r4, #8]
 800be5e:	4b09      	ldr	r3, [pc, #36]	; (800be84 <cleanup_stdio+0x38>)
 800be60:	4299      	cmp	r1, r3
 800be62:	d002      	beq.n	800be6a <cleanup_stdio+0x1e>
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fe67 	bl	800cb38 <_fflush_r>
 800be6a:	68e1      	ldr	r1, [r4, #12]
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <cleanup_stdio+0x3c>)
 800be6e:	4299      	cmp	r1, r3
 800be70:	d004      	beq.n	800be7c <cleanup_stdio+0x30>
 800be72:	4620      	mov	r0, r4
 800be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be78:	f000 be5e 	b.w	800cb38 <_fflush_r>
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	bf00      	nop
 800be80:	20000240 	.word	0x20000240
 800be84:	200002a8 	.word	0x200002a8
 800be88:	20000310 	.word	0x20000310

0800be8c <global_stdio_init.part.0>:
 800be8c:	b510      	push	{r4, lr}
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <global_stdio_init.part.0+0x30>)
 800be90:	4c0b      	ldr	r4, [pc, #44]	; (800bec0 <global_stdio_init.part.0+0x34>)
 800be92:	4a0c      	ldr	r2, [pc, #48]	; (800bec4 <global_stdio_init.part.0+0x38>)
 800be94:	4620      	mov	r0, r4
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	2104      	movs	r1, #4
 800be9a:	2200      	movs	r2, #0
 800be9c:	f7ff ff94 	bl	800bdc8 <std>
 800bea0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bea4:	2201      	movs	r2, #1
 800bea6:	2109      	movs	r1, #9
 800bea8:	f7ff ff8e 	bl	800bdc8 <std>
 800beac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800beb0:	2202      	movs	r2, #2
 800beb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb6:	2112      	movs	r1, #18
 800beb8:	f7ff bf86 	b.w	800bdc8 <std>
 800bebc:	20000378 	.word	0x20000378
 800bec0:	20000240 	.word	0x20000240
 800bec4:	0800be35 	.word	0x0800be35

0800bec8 <__sfp_lock_acquire>:
 800bec8:	4801      	ldr	r0, [pc, #4]	; (800bed0 <__sfp_lock_acquire+0x8>)
 800beca:	f000 ba76 	b.w	800c3ba <__retarget_lock_acquire_recursive>
 800bece:	bf00      	nop
 800bed0:	20000381 	.word	0x20000381

0800bed4 <__sfp_lock_release>:
 800bed4:	4801      	ldr	r0, [pc, #4]	; (800bedc <__sfp_lock_release+0x8>)
 800bed6:	f000 ba71 	b.w	800c3bc <__retarget_lock_release_recursive>
 800beda:	bf00      	nop
 800bedc:	20000381 	.word	0x20000381

0800bee0 <__sinit>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	f7ff fff0 	bl	800bec8 <__sfp_lock_acquire>
 800bee8:	6a23      	ldr	r3, [r4, #32]
 800beea:	b11b      	cbz	r3, 800bef4 <__sinit+0x14>
 800beec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef0:	f7ff bff0 	b.w	800bed4 <__sfp_lock_release>
 800bef4:	4b04      	ldr	r3, [pc, #16]	; (800bf08 <__sinit+0x28>)
 800bef6:	6223      	str	r3, [r4, #32]
 800bef8:	4b04      	ldr	r3, [pc, #16]	; (800bf0c <__sinit+0x2c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1f5      	bne.n	800beec <__sinit+0xc>
 800bf00:	f7ff ffc4 	bl	800be8c <global_stdio_init.part.0>
 800bf04:	e7f2      	b.n	800beec <__sinit+0xc>
 800bf06:	bf00      	nop
 800bf08:	0800be4d 	.word	0x0800be4d
 800bf0c:	20000378 	.word	0x20000378

0800bf10 <fiprintf>:
 800bf10:	b40e      	push	{r1, r2, r3}
 800bf12:	b503      	push	{r0, r1, lr}
 800bf14:	4601      	mov	r1, r0
 800bf16:	ab03      	add	r3, sp, #12
 800bf18:	4805      	ldr	r0, [pc, #20]	; (800bf30 <fiprintf+0x20>)
 800bf1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1e:	6800      	ldr	r0, [r0, #0]
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	f000 fad9 	bl	800c4d8 <_vfiprintf_r>
 800bf26:	b002      	add	sp, #8
 800bf28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf2c:	b003      	add	sp, #12
 800bf2e:	4770      	bx	lr
 800bf30:	200000d8 	.word	0x200000d8

0800bf34 <_fwalk_sglue>:
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	4607      	mov	r7, r0
 800bf3a:	4688      	mov	r8, r1
 800bf3c:	4614      	mov	r4, r2
 800bf3e:	2600      	movs	r6, #0
 800bf40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf44:	f1b9 0901 	subs.w	r9, r9, #1
 800bf48:	d505      	bpl.n	800bf56 <_fwalk_sglue+0x22>
 800bf4a:	6824      	ldr	r4, [r4, #0]
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	d1f7      	bne.n	800bf40 <_fwalk_sglue+0xc>
 800bf50:	4630      	mov	r0, r6
 800bf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf56:	89ab      	ldrh	r3, [r5, #12]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d907      	bls.n	800bf6c <_fwalk_sglue+0x38>
 800bf5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf60:	3301      	adds	r3, #1
 800bf62:	d003      	beq.n	800bf6c <_fwalk_sglue+0x38>
 800bf64:	4629      	mov	r1, r5
 800bf66:	4638      	mov	r0, r7
 800bf68:	47c0      	blx	r8
 800bf6a:	4306      	orrs	r6, r0
 800bf6c:	3568      	adds	r5, #104	; 0x68
 800bf6e:	e7e9      	b.n	800bf44 <_fwalk_sglue+0x10>

0800bf70 <iprintf>:
 800bf70:	b40f      	push	{r0, r1, r2, r3}
 800bf72:	b507      	push	{r0, r1, r2, lr}
 800bf74:	4906      	ldr	r1, [pc, #24]	; (800bf90 <iprintf+0x20>)
 800bf76:	ab04      	add	r3, sp, #16
 800bf78:	6808      	ldr	r0, [r1, #0]
 800bf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7e:	6881      	ldr	r1, [r0, #8]
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	f000 faa9 	bl	800c4d8 <_vfiprintf_r>
 800bf86:	b003      	add	sp, #12
 800bf88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf8c:	b004      	add	sp, #16
 800bf8e:	4770      	bx	lr
 800bf90:	200000d8 	.word	0x200000d8

0800bf94 <putchar>:
 800bf94:	4b02      	ldr	r3, [pc, #8]	; (800bfa0 <putchar+0xc>)
 800bf96:	4601      	mov	r1, r0
 800bf98:	6818      	ldr	r0, [r3, #0]
 800bf9a:	6882      	ldr	r2, [r0, #8]
 800bf9c:	f000 be55 	b.w	800cc4a <_putc_r>
 800bfa0:	200000d8 	.word	0x200000d8

0800bfa4 <_puts_r>:
 800bfa4:	6a03      	ldr	r3, [r0, #32]
 800bfa6:	b570      	push	{r4, r5, r6, lr}
 800bfa8:	4605      	mov	r5, r0
 800bfaa:	460e      	mov	r6, r1
 800bfac:	6884      	ldr	r4, [r0, #8]
 800bfae:	b90b      	cbnz	r3, 800bfb4 <_puts_r+0x10>
 800bfb0:	f7ff ff96 	bl	800bee0 <__sinit>
 800bfb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfb6:	07db      	lsls	r3, r3, #31
 800bfb8:	d405      	bmi.n	800bfc6 <_puts_r+0x22>
 800bfba:	89a3      	ldrh	r3, [r4, #12]
 800bfbc:	0598      	lsls	r0, r3, #22
 800bfbe:	d402      	bmi.n	800bfc6 <_puts_r+0x22>
 800bfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfc2:	f000 f9fa 	bl	800c3ba <__retarget_lock_acquire_recursive>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	0719      	lsls	r1, r3, #28
 800bfca:	d513      	bpl.n	800bff4 <_puts_r+0x50>
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	b18b      	cbz	r3, 800bff4 <_puts_r+0x50>
 800bfd0:	3e01      	subs	r6, #1
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	60a3      	str	r3, [r4, #8]
 800bfdc:	b9e9      	cbnz	r1, 800c01a <_puts_r+0x76>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	da2e      	bge.n	800c040 <_puts_r+0x9c>
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	210a      	movs	r1, #10
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f000 f87b 	bl	800c0e2 <__swbuf_r>
 800bfec:	3001      	adds	r0, #1
 800bfee:	d007      	beq.n	800c000 <_puts_r+0x5c>
 800bff0:	250a      	movs	r5, #10
 800bff2:	e007      	b.n	800c004 <_puts_r+0x60>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4628      	mov	r0, r5
 800bff8:	f000 f8b0 	bl	800c15c <__swsetup_r>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d0e7      	beq.n	800bfd0 <_puts_r+0x2c>
 800c000:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c006:	07da      	lsls	r2, r3, #31
 800c008:	d405      	bmi.n	800c016 <_puts_r+0x72>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	059b      	lsls	r3, r3, #22
 800c00e:	d402      	bmi.n	800c016 <_puts_r+0x72>
 800c010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c012:	f000 f9d3 	bl	800c3bc <__retarget_lock_release_recursive>
 800c016:	4628      	mov	r0, r5
 800c018:	bd70      	pop	{r4, r5, r6, pc}
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	da04      	bge.n	800c028 <_puts_r+0x84>
 800c01e:	69a2      	ldr	r2, [r4, #24]
 800c020:	429a      	cmp	r2, r3
 800c022:	dc06      	bgt.n	800c032 <_puts_r+0x8e>
 800c024:	290a      	cmp	r1, #10
 800c026:	d004      	beq.n	800c032 <_puts_r+0x8e>
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	6022      	str	r2, [r4, #0]
 800c02e:	7019      	strb	r1, [r3, #0]
 800c030:	e7cf      	b.n	800bfd2 <_puts_r+0x2e>
 800c032:	4622      	mov	r2, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f854 	bl	800c0e2 <__swbuf_r>
 800c03a:	3001      	adds	r0, #1
 800c03c:	d1c9      	bne.n	800bfd2 <_puts_r+0x2e>
 800c03e:	e7df      	b.n	800c000 <_puts_r+0x5c>
 800c040:	250a      	movs	r5, #10
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	6022      	str	r2, [r4, #0]
 800c048:	701d      	strb	r5, [r3, #0]
 800c04a:	e7db      	b.n	800c004 <_puts_r+0x60>

0800c04c <puts>:
 800c04c:	4b02      	ldr	r3, [pc, #8]	; (800c058 <puts+0xc>)
 800c04e:	4601      	mov	r1, r0
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	f7ff bfa7 	b.w	800bfa4 <_puts_r>
 800c056:	bf00      	nop
 800c058:	200000d8 	.word	0x200000d8

0800c05c <__sread>:
 800c05c:	b510      	push	{r4, lr}
 800c05e:	460c      	mov	r4, r1
 800c060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c064:	f000 f94a 	bl	800c2fc <_read_r>
 800c068:	2800      	cmp	r0, #0
 800c06a:	bfab      	itete	ge
 800c06c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c06e:	89a3      	ldrhlt	r3, [r4, #12]
 800c070:	181b      	addge	r3, r3, r0
 800c072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c076:	bfac      	ite	ge
 800c078:	6563      	strge	r3, [r4, #84]	; 0x54
 800c07a:	81a3      	strhlt	r3, [r4, #12]
 800c07c:	bd10      	pop	{r4, pc}

0800c07e <__swrite>:
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	461f      	mov	r7, r3
 800c084:	898b      	ldrh	r3, [r1, #12]
 800c086:	4605      	mov	r5, r0
 800c088:	05db      	lsls	r3, r3, #23
 800c08a:	460c      	mov	r4, r1
 800c08c:	4616      	mov	r6, r2
 800c08e:	d505      	bpl.n	800c09c <__swrite+0x1e>
 800c090:	2302      	movs	r3, #2
 800c092:	2200      	movs	r2, #0
 800c094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c098:	f000 f91e 	bl	800c2d8 <_lseek_r>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	4632      	mov	r2, r6
 800c0a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	463b      	mov	r3, r7
 800c0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b2:	f000 b945 	b.w	800c340 <_write_r>

0800c0b6 <__sseek>:
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0be:	f000 f90b 	bl	800c2d8 <_lseek_r>
 800c0c2:	1c43      	adds	r3, r0, #1
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	bf15      	itete	ne
 800c0c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0d2:	81a3      	strheq	r3, [r4, #12]
 800c0d4:	bf18      	it	ne
 800c0d6:	81a3      	strhne	r3, [r4, #12]
 800c0d8:	bd10      	pop	{r4, pc}

0800c0da <__sclose>:
 800c0da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0de:	f000 b8eb 	b.w	800c2b8 <_close_r>

0800c0e2 <__swbuf_r>:
 800c0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e4:	460e      	mov	r6, r1
 800c0e6:	4614      	mov	r4, r2
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	b118      	cbz	r0, 800c0f4 <__swbuf_r+0x12>
 800c0ec:	6a03      	ldr	r3, [r0, #32]
 800c0ee:	b90b      	cbnz	r3, 800c0f4 <__swbuf_r+0x12>
 800c0f0:	f7ff fef6 	bl	800bee0 <__sinit>
 800c0f4:	69a3      	ldr	r3, [r4, #24]
 800c0f6:	60a3      	str	r3, [r4, #8]
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	071a      	lsls	r2, r3, #28
 800c0fc:	d525      	bpl.n	800c14a <__swbuf_r+0x68>
 800c0fe:	6923      	ldr	r3, [r4, #16]
 800c100:	b31b      	cbz	r3, 800c14a <__swbuf_r+0x68>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	b2f6      	uxtb	r6, r6
 800c108:	1a98      	subs	r0, r3, r2
 800c10a:	6963      	ldr	r3, [r4, #20]
 800c10c:	4637      	mov	r7, r6
 800c10e:	4283      	cmp	r3, r0
 800c110:	dc04      	bgt.n	800c11c <__swbuf_r+0x3a>
 800c112:	4621      	mov	r1, r4
 800c114:	4628      	mov	r0, r5
 800c116:	f000 fd0f 	bl	800cb38 <_fflush_r>
 800c11a:	b9e0      	cbnz	r0, 800c156 <__swbuf_r+0x74>
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	3b01      	subs	r3, #1
 800c120:	60a3      	str	r3, [r4, #8]
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	1c5a      	adds	r2, r3, #1
 800c126:	6022      	str	r2, [r4, #0]
 800c128:	701e      	strb	r6, [r3, #0]
 800c12a:	6962      	ldr	r2, [r4, #20]
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	429a      	cmp	r2, r3
 800c130:	d004      	beq.n	800c13c <__swbuf_r+0x5a>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	07db      	lsls	r3, r3, #31
 800c136:	d506      	bpl.n	800c146 <__swbuf_r+0x64>
 800c138:	2e0a      	cmp	r6, #10
 800c13a:	d104      	bne.n	800c146 <__swbuf_r+0x64>
 800c13c:	4621      	mov	r1, r4
 800c13e:	4628      	mov	r0, r5
 800c140:	f000 fcfa 	bl	800cb38 <_fflush_r>
 800c144:	b938      	cbnz	r0, 800c156 <__swbuf_r+0x74>
 800c146:	4638      	mov	r0, r7
 800c148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c14a:	4621      	mov	r1, r4
 800c14c:	4628      	mov	r0, r5
 800c14e:	f000 f805 	bl	800c15c <__swsetup_r>
 800c152:	2800      	cmp	r0, #0
 800c154:	d0d5      	beq.n	800c102 <__swbuf_r+0x20>
 800c156:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c15a:	e7f4      	b.n	800c146 <__swbuf_r+0x64>

0800c15c <__swsetup_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4b2a      	ldr	r3, [pc, #168]	; (800c208 <__swsetup_r+0xac>)
 800c160:	4605      	mov	r5, r0
 800c162:	6818      	ldr	r0, [r3, #0]
 800c164:	460c      	mov	r4, r1
 800c166:	b118      	cbz	r0, 800c170 <__swsetup_r+0x14>
 800c168:	6a03      	ldr	r3, [r0, #32]
 800c16a:	b90b      	cbnz	r3, 800c170 <__swsetup_r+0x14>
 800c16c:	f7ff feb8 	bl	800bee0 <__sinit>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c176:	0718      	lsls	r0, r3, #28
 800c178:	d422      	bmi.n	800c1c0 <__swsetup_r+0x64>
 800c17a:	06d9      	lsls	r1, r3, #27
 800c17c:	d407      	bmi.n	800c18e <__swsetup_r+0x32>
 800c17e:	2309      	movs	r3, #9
 800c180:	602b      	str	r3, [r5, #0]
 800c182:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c18a:	81a3      	strh	r3, [r4, #12]
 800c18c:	e034      	b.n	800c1f8 <__swsetup_r+0x9c>
 800c18e:	0758      	lsls	r0, r3, #29
 800c190:	d512      	bpl.n	800c1b8 <__swsetup_r+0x5c>
 800c192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c194:	b141      	cbz	r1, 800c1a8 <__swsetup_r+0x4c>
 800c196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c19a:	4299      	cmp	r1, r3
 800c19c:	d002      	beq.n	800c1a4 <__swsetup_r+0x48>
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f000 f92a 	bl	800c3f8 <_free_r>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	6363      	str	r3, [r4, #52]	; 0x34
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6063      	str	r3, [r4, #4]
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	f043 0308 	orr.w	r3, r3, #8
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	b94b      	cbnz	r3, 800c1d8 <__swsetup_r+0x7c>
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ce:	d003      	beq.n	800c1d8 <__swsetup_r+0x7c>
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f000 fcfd 	bl	800cbd2 <__smakebuf_r>
 800c1d8:	89a0      	ldrh	r0, [r4, #12]
 800c1da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1de:	f010 0301 	ands.w	r3, r0, #1
 800c1e2:	d00a      	beq.n	800c1fa <__swsetup_r+0x9e>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	60a3      	str	r3, [r4, #8]
 800c1e8:	6963      	ldr	r3, [r4, #20]
 800c1ea:	425b      	negs	r3, r3
 800c1ec:	61a3      	str	r3, [r4, #24]
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	b943      	cbnz	r3, 800c204 <__swsetup_r+0xa8>
 800c1f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1f6:	d1c4      	bne.n	800c182 <__swsetup_r+0x26>
 800c1f8:	bd38      	pop	{r3, r4, r5, pc}
 800c1fa:	0781      	lsls	r1, r0, #30
 800c1fc:	bf58      	it	pl
 800c1fe:	6963      	ldrpl	r3, [r4, #20]
 800c200:	60a3      	str	r3, [r4, #8]
 800c202:	e7f4      	b.n	800c1ee <__swsetup_r+0x92>
 800c204:	2000      	movs	r0, #0
 800c206:	e7f7      	b.n	800c1f8 <__swsetup_r+0x9c>
 800c208:	200000d8 	.word	0x200000d8

0800c20c <memcmp>:
 800c20c:	b510      	push	{r4, lr}
 800c20e:	3901      	subs	r1, #1
 800c210:	4402      	add	r2, r0
 800c212:	4290      	cmp	r0, r2
 800c214:	d101      	bne.n	800c21a <memcmp+0xe>
 800c216:	2000      	movs	r0, #0
 800c218:	e005      	b.n	800c226 <memcmp+0x1a>
 800c21a:	7803      	ldrb	r3, [r0, #0]
 800c21c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c220:	42a3      	cmp	r3, r4
 800c222:	d001      	beq.n	800c228 <memcmp+0x1c>
 800c224:	1b18      	subs	r0, r3, r4
 800c226:	bd10      	pop	{r4, pc}
 800c228:	3001      	adds	r0, #1
 800c22a:	e7f2      	b.n	800c212 <memcmp+0x6>

0800c22c <memset>:
 800c22c:	4603      	mov	r3, r0
 800c22e:	4402      	add	r2, r0
 800c230:	4293      	cmp	r3, r2
 800c232:	d100      	bne.n	800c236 <memset+0xa>
 800c234:	4770      	bx	lr
 800c236:	f803 1b01 	strb.w	r1, [r3], #1
 800c23a:	e7f9      	b.n	800c230 <memset+0x4>

0800c23c <strcat>:
 800c23c:	4602      	mov	r2, r0
 800c23e:	b510      	push	{r4, lr}
 800c240:	7814      	ldrb	r4, [r2, #0]
 800c242:	4613      	mov	r3, r2
 800c244:	3201      	adds	r2, #1
 800c246:	2c00      	cmp	r4, #0
 800c248:	d1fa      	bne.n	800c240 <strcat+0x4>
 800c24a:	3b01      	subs	r3, #1
 800c24c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c250:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c254:	2a00      	cmp	r2, #0
 800c256:	d1f9      	bne.n	800c24c <strcat+0x10>
 800c258:	bd10      	pop	{r4, pc}

0800c25a <strchr>:
 800c25a:	4603      	mov	r3, r0
 800c25c:	b2c9      	uxtb	r1, r1
 800c25e:	4618      	mov	r0, r3
 800c260:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c264:	b112      	cbz	r2, 800c26c <strchr+0x12>
 800c266:	428a      	cmp	r2, r1
 800c268:	d1f9      	bne.n	800c25e <strchr+0x4>
 800c26a:	4770      	bx	lr
 800c26c:	2900      	cmp	r1, #0
 800c26e:	bf18      	it	ne
 800c270:	2000      	movne	r0, #0
 800c272:	4770      	bx	lr

0800c274 <strcspn>:
 800c274:	4603      	mov	r3, r0
 800c276:	b570      	push	{r4, r5, r6, lr}
 800c278:	461e      	mov	r6, r3
 800c27a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c27e:	b144      	cbz	r4, 800c292 <strcspn+0x1e>
 800c280:	1e4a      	subs	r2, r1, #1
 800c282:	e001      	b.n	800c288 <strcspn+0x14>
 800c284:	42a5      	cmp	r5, r4
 800c286:	d004      	beq.n	800c292 <strcspn+0x1e>
 800c288:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c28c:	2d00      	cmp	r5, #0
 800c28e:	d1f9      	bne.n	800c284 <strcspn+0x10>
 800c290:	e7f2      	b.n	800c278 <strcspn+0x4>
 800c292:	1a30      	subs	r0, r6, r0
 800c294:	bd70      	pop	{r4, r5, r6, pc}

0800c296 <strspn>:
 800c296:	4603      	mov	r3, r0
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	461e      	mov	r6, r3
 800c29c:	f813 4b01 	ldrb.w	r4, [r3], #1
 800c2a0:	b13c      	cbz	r4, 800c2b2 <strspn+0x1c>
 800c2a2:	1e4a      	subs	r2, r1, #1
 800c2a4:	e001      	b.n	800c2aa <strspn+0x14>
 800c2a6:	42a5      	cmp	r5, r4
 800c2a8:	d0f7      	beq.n	800c29a <strspn+0x4>
 800c2aa:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	d1f9      	bne.n	800c2a6 <strspn+0x10>
 800c2b2:	1a30      	subs	r0, r6, r0
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2b8 <_close_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4d05      	ldr	r5, [pc, #20]	; (800c2d4 <_close_r+0x1c>)
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	f7f4 fa91 	bl	80007ea <_close>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_close_r+0x1a>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_close_r+0x1a>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	2000037c 	.word	0x2000037c

0800c2d8 <_lseek_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	4611      	mov	r1, r2
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	4d05      	ldr	r5, [pc, #20]	; (800c2f8 <_lseek_r+0x20>)
 800c2e4:	602a      	str	r2, [r5, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f7f4 faa3 	bl	8000832 <_lseek>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_lseek_r+0x1e>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_lseek_r+0x1e>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	2000037c 	.word	0x2000037c

0800c2fc <_read_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	4611      	mov	r1, r2
 800c304:	2200      	movs	r2, #0
 800c306:	4d05      	ldr	r5, [pc, #20]	; (800c31c <_read_r+0x20>)
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f7f4 fa50 	bl	80007b0 <_read>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_read_r+0x1e>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_read_r+0x1e>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	2000037c 	.word	0x2000037c

0800c320 <_sbrk_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	2300      	movs	r3, #0
 800c324:	4d05      	ldr	r5, [pc, #20]	; (800c33c <_sbrk_r+0x1c>)
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	602b      	str	r3, [r5, #0]
 800c32c:	f7f4 fa8e 	bl	800084c <_sbrk>
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d102      	bne.n	800c33a <_sbrk_r+0x1a>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b103      	cbz	r3, 800c33a <_sbrk_r+0x1a>
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	bd38      	pop	{r3, r4, r5, pc}
 800c33c:	2000037c 	.word	0x2000037c

0800c340 <_write_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4604      	mov	r4, r0
 800c344:	4608      	mov	r0, r1
 800c346:	4611      	mov	r1, r2
 800c348:	2200      	movs	r2, #0
 800c34a:	4d05      	ldr	r5, [pc, #20]	; (800c360 <_write_r+0x20>)
 800c34c:	602a      	str	r2, [r5, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	f7f3 ff18 	bl	8000184 <_write>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d102      	bne.n	800c35e <_write_r+0x1e>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	b103      	cbz	r3, 800c35e <_write_r+0x1e>
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	2000037c 	.word	0x2000037c

0800c364 <__errno>:
 800c364:	4b01      	ldr	r3, [pc, #4]	; (800c36c <__errno+0x8>)
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	200000d8 	.word	0x200000d8

0800c370 <__libc_init_array>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	2600      	movs	r6, #0
 800c374:	4d0c      	ldr	r5, [pc, #48]	; (800c3a8 <__libc_init_array+0x38>)
 800c376:	4c0d      	ldr	r4, [pc, #52]	; (800c3ac <__libc_init_array+0x3c>)
 800c378:	1b64      	subs	r4, r4, r5
 800c37a:	10a4      	asrs	r4, r4, #2
 800c37c:	42a6      	cmp	r6, r4
 800c37e:	d109      	bne.n	800c394 <__libc_init_array+0x24>
 800c380:	f000 fd0c 	bl	800cd9c <_init>
 800c384:	2600      	movs	r6, #0
 800c386:	4d0a      	ldr	r5, [pc, #40]	; (800c3b0 <__libc_init_array+0x40>)
 800c388:	4c0a      	ldr	r4, [pc, #40]	; (800c3b4 <__libc_init_array+0x44>)
 800c38a:	1b64      	subs	r4, r4, r5
 800c38c:	10a4      	asrs	r4, r4, #2
 800c38e:	42a6      	cmp	r6, r4
 800c390:	d105      	bne.n	800c39e <__libc_init_array+0x2e>
 800c392:	bd70      	pop	{r4, r5, r6, pc}
 800c394:	f855 3b04 	ldr.w	r3, [r5], #4
 800c398:	4798      	blx	r3
 800c39a:	3601      	adds	r6, #1
 800c39c:	e7ee      	b.n	800c37c <__libc_init_array+0xc>
 800c39e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a2:	4798      	blx	r3
 800c3a4:	3601      	adds	r6, #1
 800c3a6:	e7f2      	b.n	800c38e <__libc_init_array+0x1e>
 800c3a8:	0800e620 	.word	0x0800e620
 800c3ac:	0800e620 	.word	0x0800e620
 800c3b0:	0800e620 	.word	0x0800e620
 800c3b4:	0800e624 	.word	0x0800e624

0800c3b8 <__retarget_lock_init_recursive>:
 800c3b8:	4770      	bx	lr

0800c3ba <__retarget_lock_acquire_recursive>:
 800c3ba:	4770      	bx	lr

0800c3bc <__retarget_lock_release_recursive>:
 800c3bc:	4770      	bx	lr

0800c3be <strcpy>:
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3c4:	f803 2b01 	strb.w	r2, [r3], #1
 800c3c8:	2a00      	cmp	r2, #0
 800c3ca:	d1f9      	bne.n	800c3c0 <strcpy+0x2>
 800c3cc:	4770      	bx	lr

0800c3ce <memcpy>:
 800c3ce:	440a      	add	r2, r1
 800c3d0:	4291      	cmp	r1, r2
 800c3d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c3d6:	d100      	bne.n	800c3da <memcpy+0xc>
 800c3d8:	4770      	bx	lr
 800c3da:	b510      	push	{r4, lr}
 800c3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e0:	4291      	cmp	r1, r2
 800c3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3e6:	d1f9      	bne.n	800c3dc <memcpy+0xe>
 800c3e8:	bd10      	pop	{r4, pc}

0800c3ea <abort>:
 800c3ea:	2006      	movs	r0, #6
 800c3ec:	b508      	push	{r3, lr}
 800c3ee:	f000 fc89 	bl	800cd04 <raise>
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	f7f4 f9d2 	bl	800079c <_exit>

0800c3f8 <_free_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	2900      	cmp	r1, #0
 800c3fe:	d040      	beq.n	800c482 <_free_r+0x8a>
 800c400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c404:	1f0c      	subs	r4, r1, #4
 800c406:	2b00      	cmp	r3, #0
 800c408:	bfb8      	it	lt
 800c40a:	18e4      	addlt	r4, r4, r3
 800c40c:	f7ff fc06 	bl	800bc1c <__malloc_lock>
 800c410:	4a1c      	ldr	r2, [pc, #112]	; (800c484 <_free_r+0x8c>)
 800c412:	6813      	ldr	r3, [r2, #0]
 800c414:	b933      	cbnz	r3, 800c424 <_free_r+0x2c>
 800c416:	6063      	str	r3, [r4, #4]
 800c418:	6014      	str	r4, [r2, #0]
 800c41a:	4628      	mov	r0, r5
 800c41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c420:	f7ff bc02 	b.w	800bc28 <__malloc_unlock>
 800c424:	42a3      	cmp	r3, r4
 800c426:	d908      	bls.n	800c43a <_free_r+0x42>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	1821      	adds	r1, r4, r0
 800c42c:	428b      	cmp	r3, r1
 800c42e:	bf01      	itttt	eq
 800c430:	6819      	ldreq	r1, [r3, #0]
 800c432:	685b      	ldreq	r3, [r3, #4]
 800c434:	1809      	addeq	r1, r1, r0
 800c436:	6021      	streq	r1, [r4, #0]
 800c438:	e7ed      	b.n	800c416 <_free_r+0x1e>
 800c43a:	461a      	mov	r2, r3
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	b10b      	cbz	r3, 800c444 <_free_r+0x4c>
 800c440:	42a3      	cmp	r3, r4
 800c442:	d9fa      	bls.n	800c43a <_free_r+0x42>
 800c444:	6811      	ldr	r1, [r2, #0]
 800c446:	1850      	adds	r0, r2, r1
 800c448:	42a0      	cmp	r0, r4
 800c44a:	d10b      	bne.n	800c464 <_free_r+0x6c>
 800c44c:	6820      	ldr	r0, [r4, #0]
 800c44e:	4401      	add	r1, r0
 800c450:	1850      	adds	r0, r2, r1
 800c452:	4283      	cmp	r3, r0
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	d1e0      	bne.n	800c41a <_free_r+0x22>
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	4408      	add	r0, r1
 800c45e:	6010      	str	r0, [r2, #0]
 800c460:	6053      	str	r3, [r2, #4]
 800c462:	e7da      	b.n	800c41a <_free_r+0x22>
 800c464:	d902      	bls.n	800c46c <_free_r+0x74>
 800c466:	230c      	movs	r3, #12
 800c468:	602b      	str	r3, [r5, #0]
 800c46a:	e7d6      	b.n	800c41a <_free_r+0x22>
 800c46c:	6820      	ldr	r0, [r4, #0]
 800c46e:	1821      	adds	r1, r4, r0
 800c470:	428b      	cmp	r3, r1
 800c472:	bf01      	itttt	eq
 800c474:	6819      	ldreq	r1, [r3, #0]
 800c476:	685b      	ldreq	r3, [r3, #4]
 800c478:	1809      	addeq	r1, r1, r0
 800c47a:	6021      	streq	r1, [r4, #0]
 800c47c:	6063      	str	r3, [r4, #4]
 800c47e:	6054      	str	r4, [r2, #4]
 800c480:	e7cb      	b.n	800c41a <_free_r+0x22>
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	20000238 	.word	0x20000238

0800c488 <__sfputc_r>:
 800c488:	6893      	ldr	r3, [r2, #8]
 800c48a:	b410      	push	{r4}
 800c48c:	3b01      	subs	r3, #1
 800c48e:	2b00      	cmp	r3, #0
 800c490:	6093      	str	r3, [r2, #8]
 800c492:	da07      	bge.n	800c4a4 <__sfputc_r+0x1c>
 800c494:	6994      	ldr	r4, [r2, #24]
 800c496:	42a3      	cmp	r3, r4
 800c498:	db01      	blt.n	800c49e <__sfputc_r+0x16>
 800c49a:	290a      	cmp	r1, #10
 800c49c:	d102      	bne.n	800c4a4 <__sfputc_r+0x1c>
 800c49e:	bc10      	pop	{r4}
 800c4a0:	f7ff be1f 	b.w	800c0e2 <__swbuf_r>
 800c4a4:	6813      	ldr	r3, [r2, #0]
 800c4a6:	1c58      	adds	r0, r3, #1
 800c4a8:	6010      	str	r0, [r2, #0]
 800c4aa:	7019      	strb	r1, [r3, #0]
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	bc10      	pop	{r4}
 800c4b0:	4770      	bx	lr

0800c4b2 <__sfputs_r>:
 800c4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	460f      	mov	r7, r1
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	18d5      	adds	r5, r2, r3
 800c4bc:	42ac      	cmp	r4, r5
 800c4be:	d101      	bne.n	800c4c4 <__sfputs_r+0x12>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e007      	b.n	800c4d4 <__sfputs_r+0x22>
 800c4c4:	463a      	mov	r2, r7
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4cc:	f7ff ffdc 	bl	800c488 <__sfputc_r>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d1f3      	bne.n	800c4bc <__sfputs_r+0xa>
 800c4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4d8 <_vfiprintf_r>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	460d      	mov	r5, r1
 800c4de:	4614      	mov	r4, r2
 800c4e0:	4698      	mov	r8, r3
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	b09d      	sub	sp, #116	; 0x74
 800c4e6:	b118      	cbz	r0, 800c4f0 <_vfiprintf_r+0x18>
 800c4e8:	6a03      	ldr	r3, [r0, #32]
 800c4ea:	b90b      	cbnz	r3, 800c4f0 <_vfiprintf_r+0x18>
 800c4ec:	f7ff fcf8 	bl	800bee0 <__sinit>
 800c4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f2:	07d9      	lsls	r1, r3, #31
 800c4f4:	d405      	bmi.n	800c502 <_vfiprintf_r+0x2a>
 800c4f6:	89ab      	ldrh	r3, [r5, #12]
 800c4f8:	059a      	lsls	r2, r3, #22
 800c4fa:	d402      	bmi.n	800c502 <_vfiprintf_r+0x2a>
 800c4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4fe:	f7ff ff5c 	bl	800c3ba <__retarget_lock_acquire_recursive>
 800c502:	89ab      	ldrh	r3, [r5, #12]
 800c504:	071b      	lsls	r3, r3, #28
 800c506:	d501      	bpl.n	800c50c <_vfiprintf_r+0x34>
 800c508:	692b      	ldr	r3, [r5, #16]
 800c50a:	b99b      	cbnz	r3, 800c534 <_vfiprintf_r+0x5c>
 800c50c:	4629      	mov	r1, r5
 800c50e:	4630      	mov	r0, r6
 800c510:	f7ff fe24 	bl	800c15c <__swsetup_r>
 800c514:	b170      	cbz	r0, 800c534 <_vfiprintf_r+0x5c>
 800c516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c518:	07dc      	lsls	r4, r3, #31
 800c51a:	d504      	bpl.n	800c526 <_vfiprintf_r+0x4e>
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c520:	b01d      	add	sp, #116	; 0x74
 800c522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c526:	89ab      	ldrh	r3, [r5, #12]
 800c528:	0598      	lsls	r0, r3, #22
 800c52a:	d4f7      	bmi.n	800c51c <_vfiprintf_r+0x44>
 800c52c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c52e:	f7ff ff45 	bl	800c3bc <__retarget_lock_release_recursive>
 800c532:	e7f3      	b.n	800c51c <_vfiprintf_r+0x44>
 800c534:	2300      	movs	r3, #0
 800c536:	9309      	str	r3, [sp, #36]	; 0x24
 800c538:	2320      	movs	r3, #32
 800c53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c53e:	2330      	movs	r3, #48	; 0x30
 800c540:	f04f 0901 	mov.w	r9, #1
 800c544:	f8cd 800c 	str.w	r8, [sp, #12]
 800c548:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c6f8 <_vfiprintf_r+0x220>
 800c54c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c550:	4623      	mov	r3, r4
 800c552:	469a      	mov	sl, r3
 800c554:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c558:	b10a      	cbz	r2, 800c55e <_vfiprintf_r+0x86>
 800c55a:	2a25      	cmp	r2, #37	; 0x25
 800c55c:	d1f9      	bne.n	800c552 <_vfiprintf_r+0x7a>
 800c55e:	ebba 0b04 	subs.w	fp, sl, r4
 800c562:	d00b      	beq.n	800c57c <_vfiprintf_r+0xa4>
 800c564:	465b      	mov	r3, fp
 800c566:	4622      	mov	r2, r4
 800c568:	4629      	mov	r1, r5
 800c56a:	4630      	mov	r0, r6
 800c56c:	f7ff ffa1 	bl	800c4b2 <__sfputs_r>
 800c570:	3001      	adds	r0, #1
 800c572:	f000 80a9 	beq.w	800c6c8 <_vfiprintf_r+0x1f0>
 800c576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c578:	445a      	add	r2, fp
 800c57a:	9209      	str	r2, [sp, #36]	; 0x24
 800c57c:	f89a 3000 	ldrb.w	r3, [sl]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80a1 	beq.w	800c6c8 <_vfiprintf_r+0x1f0>
 800c586:	2300      	movs	r3, #0
 800c588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c58c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c590:	f10a 0a01 	add.w	sl, sl, #1
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	9307      	str	r3, [sp, #28]
 800c598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c59c:	931a      	str	r3, [sp, #104]	; 0x68
 800c59e:	4654      	mov	r4, sl
 800c5a0:	2205      	movs	r2, #5
 800c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a6:	4854      	ldr	r0, [pc, #336]	; (800c6f8 <_vfiprintf_r+0x220>)
 800c5a8:	f000 fbea 	bl	800cd80 <memchr>
 800c5ac:	9a04      	ldr	r2, [sp, #16]
 800c5ae:	b9d8      	cbnz	r0, 800c5e8 <_vfiprintf_r+0x110>
 800c5b0:	06d1      	lsls	r1, r2, #27
 800c5b2:	bf44      	itt	mi
 800c5b4:	2320      	movmi	r3, #32
 800c5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ba:	0713      	lsls	r3, r2, #28
 800c5bc:	bf44      	itt	mi
 800c5be:	232b      	movmi	r3, #43	; 0x2b
 800c5c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ca:	d015      	beq.n	800c5f8 <_vfiprintf_r+0x120>
 800c5cc:	4654      	mov	r4, sl
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	f04f 0c0a 	mov.w	ip, #10
 800c5d4:	9a07      	ldr	r2, [sp, #28]
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5dc:	3b30      	subs	r3, #48	; 0x30
 800c5de:	2b09      	cmp	r3, #9
 800c5e0:	d94d      	bls.n	800c67e <_vfiprintf_r+0x1a6>
 800c5e2:	b1b0      	cbz	r0, 800c612 <_vfiprintf_r+0x13a>
 800c5e4:	9207      	str	r2, [sp, #28]
 800c5e6:	e014      	b.n	800c612 <_vfiprintf_r+0x13a>
 800c5e8:	eba0 0308 	sub.w	r3, r0, r8
 800c5ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	46a2      	mov	sl, r4
 800c5f4:	9304      	str	r3, [sp, #16]
 800c5f6:	e7d2      	b.n	800c59e <_vfiprintf_r+0xc6>
 800c5f8:	9b03      	ldr	r3, [sp, #12]
 800c5fa:	1d19      	adds	r1, r3, #4
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	9103      	str	r1, [sp, #12]
 800c600:	2b00      	cmp	r3, #0
 800c602:	bfbb      	ittet	lt
 800c604:	425b      	neglt	r3, r3
 800c606:	f042 0202 	orrlt.w	r2, r2, #2
 800c60a:	9307      	strge	r3, [sp, #28]
 800c60c:	9307      	strlt	r3, [sp, #28]
 800c60e:	bfb8      	it	lt
 800c610:	9204      	strlt	r2, [sp, #16]
 800c612:	7823      	ldrb	r3, [r4, #0]
 800c614:	2b2e      	cmp	r3, #46	; 0x2e
 800c616:	d10c      	bne.n	800c632 <_vfiprintf_r+0x15a>
 800c618:	7863      	ldrb	r3, [r4, #1]
 800c61a:	2b2a      	cmp	r3, #42	; 0x2a
 800c61c:	d134      	bne.n	800c688 <_vfiprintf_r+0x1b0>
 800c61e:	9b03      	ldr	r3, [sp, #12]
 800c620:	3402      	adds	r4, #2
 800c622:	1d1a      	adds	r2, r3, #4
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	9203      	str	r2, [sp, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bfb8      	it	lt
 800c62c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c630:	9305      	str	r3, [sp, #20]
 800c632:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6fc <_vfiprintf_r+0x224>
 800c636:	2203      	movs	r2, #3
 800c638:	4650      	mov	r0, sl
 800c63a:	7821      	ldrb	r1, [r4, #0]
 800c63c:	f000 fba0 	bl	800cd80 <memchr>
 800c640:	b138      	cbz	r0, 800c652 <_vfiprintf_r+0x17a>
 800c642:	2240      	movs	r2, #64	; 0x40
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	eba0 000a 	sub.w	r0, r0, sl
 800c64a:	4082      	lsls	r2, r0
 800c64c:	4313      	orrs	r3, r2
 800c64e:	3401      	adds	r4, #1
 800c650:	9304      	str	r3, [sp, #16]
 800c652:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c656:	2206      	movs	r2, #6
 800c658:	4829      	ldr	r0, [pc, #164]	; (800c700 <_vfiprintf_r+0x228>)
 800c65a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c65e:	f000 fb8f 	bl	800cd80 <memchr>
 800c662:	2800      	cmp	r0, #0
 800c664:	d03f      	beq.n	800c6e6 <_vfiprintf_r+0x20e>
 800c666:	4b27      	ldr	r3, [pc, #156]	; (800c704 <_vfiprintf_r+0x22c>)
 800c668:	bb1b      	cbnz	r3, 800c6b2 <_vfiprintf_r+0x1da>
 800c66a:	9b03      	ldr	r3, [sp, #12]
 800c66c:	3307      	adds	r3, #7
 800c66e:	f023 0307 	bic.w	r3, r3, #7
 800c672:	3308      	adds	r3, #8
 800c674:	9303      	str	r3, [sp, #12]
 800c676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c678:	443b      	add	r3, r7
 800c67a:	9309      	str	r3, [sp, #36]	; 0x24
 800c67c:	e768      	b.n	800c550 <_vfiprintf_r+0x78>
 800c67e:	460c      	mov	r4, r1
 800c680:	2001      	movs	r0, #1
 800c682:	fb0c 3202 	mla	r2, ip, r2, r3
 800c686:	e7a6      	b.n	800c5d6 <_vfiprintf_r+0xfe>
 800c688:	2300      	movs	r3, #0
 800c68a:	f04f 0c0a 	mov.w	ip, #10
 800c68e:	4619      	mov	r1, r3
 800c690:	3401      	adds	r4, #1
 800c692:	9305      	str	r3, [sp, #20]
 800c694:	4620      	mov	r0, r4
 800c696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c69a:	3a30      	subs	r2, #48	; 0x30
 800c69c:	2a09      	cmp	r2, #9
 800c69e:	d903      	bls.n	800c6a8 <_vfiprintf_r+0x1d0>
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0c6      	beq.n	800c632 <_vfiprintf_r+0x15a>
 800c6a4:	9105      	str	r1, [sp, #20]
 800c6a6:	e7c4      	b.n	800c632 <_vfiprintf_r+0x15a>
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b0:	e7f0      	b.n	800c694 <_vfiprintf_r+0x1bc>
 800c6b2:	ab03      	add	r3, sp, #12
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	462a      	mov	r2, r5
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	4b13      	ldr	r3, [pc, #76]	; (800c708 <_vfiprintf_r+0x230>)
 800c6bc:	a904      	add	r1, sp, #16
 800c6be:	f3af 8000 	nop.w
 800c6c2:	4607      	mov	r7, r0
 800c6c4:	1c78      	adds	r0, r7, #1
 800c6c6:	d1d6      	bne.n	800c676 <_vfiprintf_r+0x19e>
 800c6c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ca:	07d9      	lsls	r1, r3, #31
 800c6cc:	d405      	bmi.n	800c6da <_vfiprintf_r+0x202>
 800c6ce:	89ab      	ldrh	r3, [r5, #12]
 800c6d0:	059a      	lsls	r2, r3, #22
 800c6d2:	d402      	bmi.n	800c6da <_vfiprintf_r+0x202>
 800c6d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d6:	f7ff fe71 	bl	800c3bc <__retarget_lock_release_recursive>
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	065b      	lsls	r3, r3, #25
 800c6de:	f53f af1d 	bmi.w	800c51c <_vfiprintf_r+0x44>
 800c6e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6e4:	e71c      	b.n	800c520 <_vfiprintf_r+0x48>
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	9300      	str	r3, [sp, #0]
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	4b06      	ldr	r3, [pc, #24]	; (800c708 <_vfiprintf_r+0x230>)
 800c6f0:	a904      	add	r1, sp, #16
 800c6f2:	f000 f87d 	bl	800c7f0 <_printf_i>
 800c6f6:	e7e4      	b.n	800c6c2 <_vfiprintf_r+0x1ea>
 800c6f8:	0800e5ec 	.word	0x0800e5ec
 800c6fc:	0800e5f2 	.word	0x0800e5f2
 800c700:	0800e5f6 	.word	0x0800e5f6
 800c704:	00000000 	.word	0x00000000
 800c708:	0800c4b3 	.word	0x0800c4b3

0800c70c <_printf_common>:
 800c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c710:	4616      	mov	r6, r2
 800c712:	4699      	mov	r9, r3
 800c714:	688a      	ldr	r2, [r1, #8]
 800c716:	690b      	ldr	r3, [r1, #16]
 800c718:	4607      	mov	r7, r0
 800c71a:	4293      	cmp	r3, r2
 800c71c:	bfb8      	it	lt
 800c71e:	4613      	movlt	r3, r2
 800c720:	6033      	str	r3, [r6, #0]
 800c722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c726:	460c      	mov	r4, r1
 800c728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c72c:	b10a      	cbz	r2, 800c732 <_printf_common+0x26>
 800c72e:	3301      	adds	r3, #1
 800c730:	6033      	str	r3, [r6, #0]
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	0699      	lsls	r1, r3, #26
 800c736:	bf42      	ittt	mi
 800c738:	6833      	ldrmi	r3, [r6, #0]
 800c73a:	3302      	addmi	r3, #2
 800c73c:	6033      	strmi	r3, [r6, #0]
 800c73e:	6825      	ldr	r5, [r4, #0]
 800c740:	f015 0506 	ands.w	r5, r5, #6
 800c744:	d106      	bne.n	800c754 <_printf_common+0x48>
 800c746:	f104 0a19 	add.w	sl, r4, #25
 800c74a:	68e3      	ldr	r3, [r4, #12]
 800c74c:	6832      	ldr	r2, [r6, #0]
 800c74e:	1a9b      	subs	r3, r3, r2
 800c750:	42ab      	cmp	r3, r5
 800c752:	dc2b      	bgt.n	800c7ac <_printf_common+0xa0>
 800c754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c758:	1e13      	subs	r3, r2, #0
 800c75a:	6822      	ldr	r2, [r4, #0]
 800c75c:	bf18      	it	ne
 800c75e:	2301      	movne	r3, #1
 800c760:	0692      	lsls	r2, r2, #26
 800c762:	d430      	bmi.n	800c7c6 <_printf_common+0xba>
 800c764:	4649      	mov	r1, r9
 800c766:	4638      	mov	r0, r7
 800c768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c76c:	47c0      	blx	r8
 800c76e:	3001      	adds	r0, #1
 800c770:	d023      	beq.n	800c7ba <_printf_common+0xae>
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	6922      	ldr	r2, [r4, #16]
 800c776:	f003 0306 	and.w	r3, r3, #6
 800c77a:	2b04      	cmp	r3, #4
 800c77c:	bf14      	ite	ne
 800c77e:	2500      	movne	r5, #0
 800c780:	6833      	ldreq	r3, [r6, #0]
 800c782:	f04f 0600 	mov.w	r6, #0
 800c786:	bf08      	it	eq
 800c788:	68e5      	ldreq	r5, [r4, #12]
 800c78a:	f104 041a 	add.w	r4, r4, #26
 800c78e:	bf08      	it	eq
 800c790:	1aed      	subeq	r5, r5, r3
 800c792:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c796:	bf08      	it	eq
 800c798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c79c:	4293      	cmp	r3, r2
 800c79e:	bfc4      	itt	gt
 800c7a0:	1a9b      	subgt	r3, r3, r2
 800c7a2:	18ed      	addgt	r5, r5, r3
 800c7a4:	42b5      	cmp	r5, r6
 800c7a6:	d11a      	bne.n	800c7de <_printf_common+0xd2>
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	e008      	b.n	800c7be <_printf_common+0xb2>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4652      	mov	r2, sl
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	47c0      	blx	r8
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	d103      	bne.n	800c7c2 <_printf_common+0xb6>
 800c7ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c2:	3501      	adds	r5, #1
 800c7c4:	e7c1      	b.n	800c74a <_printf_common+0x3e>
 800c7c6:	2030      	movs	r0, #48	; 0x30
 800c7c8:	18e1      	adds	r1, r4, r3
 800c7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7d4:	4422      	add	r2, r4
 800c7d6:	3302      	adds	r3, #2
 800c7d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7dc:	e7c2      	b.n	800c764 <_printf_common+0x58>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	4622      	mov	r2, r4
 800c7e2:	4649      	mov	r1, r9
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	47c0      	blx	r8
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d0e6      	beq.n	800c7ba <_printf_common+0xae>
 800c7ec:	3601      	adds	r6, #1
 800c7ee:	e7d9      	b.n	800c7a4 <_printf_common+0x98>

0800c7f0 <_printf_i>:
 800c7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	7e0f      	ldrb	r7, [r1, #24]
 800c7f6:	4691      	mov	r9, r2
 800c7f8:	2f78      	cmp	r7, #120	; 0x78
 800c7fa:	4680      	mov	r8, r0
 800c7fc:	460c      	mov	r4, r1
 800c7fe:	469a      	mov	sl, r3
 800c800:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c806:	d807      	bhi.n	800c818 <_printf_i+0x28>
 800c808:	2f62      	cmp	r7, #98	; 0x62
 800c80a:	d80a      	bhi.n	800c822 <_printf_i+0x32>
 800c80c:	2f00      	cmp	r7, #0
 800c80e:	f000 80d5 	beq.w	800c9bc <_printf_i+0x1cc>
 800c812:	2f58      	cmp	r7, #88	; 0x58
 800c814:	f000 80c1 	beq.w	800c99a <_printf_i+0x1aa>
 800c818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c820:	e03a      	b.n	800c898 <_printf_i+0xa8>
 800c822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c826:	2b15      	cmp	r3, #21
 800c828:	d8f6      	bhi.n	800c818 <_printf_i+0x28>
 800c82a:	a101      	add	r1, pc, #4	; (adr r1, 800c830 <_printf_i+0x40>)
 800c82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c830:	0800c889 	.word	0x0800c889
 800c834:	0800c89d 	.word	0x0800c89d
 800c838:	0800c819 	.word	0x0800c819
 800c83c:	0800c819 	.word	0x0800c819
 800c840:	0800c819 	.word	0x0800c819
 800c844:	0800c819 	.word	0x0800c819
 800c848:	0800c89d 	.word	0x0800c89d
 800c84c:	0800c819 	.word	0x0800c819
 800c850:	0800c819 	.word	0x0800c819
 800c854:	0800c819 	.word	0x0800c819
 800c858:	0800c819 	.word	0x0800c819
 800c85c:	0800c9a3 	.word	0x0800c9a3
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c95d 	.word	0x0800c95d
 800c868:	0800c819 	.word	0x0800c819
 800c86c:	0800c819 	.word	0x0800c819
 800c870:	0800c9c5 	.word	0x0800c9c5
 800c874:	0800c819 	.word	0x0800c819
 800c878:	0800c8c9 	.word	0x0800c8c9
 800c87c:	0800c819 	.word	0x0800c819
 800c880:	0800c819 	.word	0x0800c819
 800c884:	0800c965 	.word	0x0800c965
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	1d1a      	adds	r2, r3, #4
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	602a      	str	r2, [r5, #0]
 800c890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c898:	2301      	movs	r3, #1
 800c89a:	e0a0      	b.n	800c9de <_printf_i+0x1ee>
 800c89c:	6820      	ldr	r0, [r4, #0]
 800c89e:	682b      	ldr	r3, [r5, #0]
 800c8a0:	0607      	lsls	r7, r0, #24
 800c8a2:	f103 0104 	add.w	r1, r3, #4
 800c8a6:	6029      	str	r1, [r5, #0]
 800c8a8:	d501      	bpl.n	800c8ae <_printf_i+0xbe>
 800c8aa:	681e      	ldr	r6, [r3, #0]
 800c8ac:	e003      	b.n	800c8b6 <_printf_i+0xc6>
 800c8ae:	0646      	lsls	r6, r0, #25
 800c8b0:	d5fb      	bpl.n	800c8aa <_printf_i+0xba>
 800c8b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c8b6:	2e00      	cmp	r6, #0
 800c8b8:	da03      	bge.n	800c8c2 <_printf_i+0xd2>
 800c8ba:	232d      	movs	r3, #45	; 0x2d
 800c8bc:	4276      	negs	r6, r6
 800c8be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c2:	230a      	movs	r3, #10
 800c8c4:	4859      	ldr	r0, [pc, #356]	; (800ca2c <_printf_i+0x23c>)
 800c8c6:	e012      	b.n	800c8ee <_printf_i+0xfe>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	6820      	ldr	r0, [r4, #0]
 800c8cc:	1d19      	adds	r1, r3, #4
 800c8ce:	6029      	str	r1, [r5, #0]
 800c8d0:	0605      	lsls	r5, r0, #24
 800c8d2:	d501      	bpl.n	800c8d8 <_printf_i+0xe8>
 800c8d4:	681e      	ldr	r6, [r3, #0]
 800c8d6:	e002      	b.n	800c8de <_printf_i+0xee>
 800c8d8:	0641      	lsls	r1, r0, #25
 800c8da:	d5fb      	bpl.n	800c8d4 <_printf_i+0xe4>
 800c8dc:	881e      	ldrh	r6, [r3, #0]
 800c8de:	2f6f      	cmp	r7, #111	; 0x6f
 800c8e0:	bf0c      	ite	eq
 800c8e2:	2308      	moveq	r3, #8
 800c8e4:	230a      	movne	r3, #10
 800c8e6:	4851      	ldr	r0, [pc, #324]	; (800ca2c <_printf_i+0x23c>)
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8ee:	6865      	ldr	r5, [r4, #4]
 800c8f0:	2d00      	cmp	r5, #0
 800c8f2:	bfa8      	it	ge
 800c8f4:	6821      	ldrge	r1, [r4, #0]
 800c8f6:	60a5      	str	r5, [r4, #8]
 800c8f8:	bfa4      	itt	ge
 800c8fa:	f021 0104 	bicge.w	r1, r1, #4
 800c8fe:	6021      	strge	r1, [r4, #0]
 800c900:	b90e      	cbnz	r6, 800c906 <_printf_i+0x116>
 800c902:	2d00      	cmp	r5, #0
 800c904:	d04b      	beq.n	800c99e <_printf_i+0x1ae>
 800c906:	4615      	mov	r5, r2
 800c908:	fbb6 f1f3 	udiv	r1, r6, r3
 800c90c:	fb03 6711 	mls	r7, r3, r1, r6
 800c910:	5dc7      	ldrb	r7, [r0, r7]
 800c912:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c916:	4637      	mov	r7, r6
 800c918:	42bb      	cmp	r3, r7
 800c91a:	460e      	mov	r6, r1
 800c91c:	d9f4      	bls.n	800c908 <_printf_i+0x118>
 800c91e:	2b08      	cmp	r3, #8
 800c920:	d10b      	bne.n	800c93a <_printf_i+0x14a>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	07de      	lsls	r6, r3, #31
 800c926:	d508      	bpl.n	800c93a <_printf_i+0x14a>
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	6861      	ldr	r1, [r4, #4]
 800c92c:	4299      	cmp	r1, r3
 800c92e:	bfde      	ittt	le
 800c930:	2330      	movle	r3, #48	; 0x30
 800c932:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c936:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c93a:	1b52      	subs	r2, r2, r5
 800c93c:	6122      	str	r2, [r4, #16]
 800c93e:	464b      	mov	r3, r9
 800c940:	4621      	mov	r1, r4
 800c942:	4640      	mov	r0, r8
 800c944:	f8cd a000 	str.w	sl, [sp]
 800c948:	aa03      	add	r2, sp, #12
 800c94a:	f7ff fedf 	bl	800c70c <_printf_common>
 800c94e:	3001      	adds	r0, #1
 800c950:	d14a      	bne.n	800c9e8 <_printf_i+0x1f8>
 800c952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c956:	b004      	add	sp, #16
 800c958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	f043 0320 	orr.w	r3, r3, #32
 800c962:	6023      	str	r3, [r4, #0]
 800c964:	2778      	movs	r7, #120	; 0x78
 800c966:	4832      	ldr	r0, [pc, #200]	; (800ca30 <_printf_i+0x240>)
 800c968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	6829      	ldr	r1, [r5, #0]
 800c970:	061f      	lsls	r7, r3, #24
 800c972:	f851 6b04 	ldr.w	r6, [r1], #4
 800c976:	d402      	bmi.n	800c97e <_printf_i+0x18e>
 800c978:	065f      	lsls	r7, r3, #25
 800c97a:	bf48      	it	mi
 800c97c:	b2b6      	uxthmi	r6, r6
 800c97e:	07df      	lsls	r7, r3, #31
 800c980:	bf48      	it	mi
 800c982:	f043 0320 	orrmi.w	r3, r3, #32
 800c986:	6029      	str	r1, [r5, #0]
 800c988:	bf48      	it	mi
 800c98a:	6023      	strmi	r3, [r4, #0]
 800c98c:	b91e      	cbnz	r6, 800c996 <_printf_i+0x1a6>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	f023 0320 	bic.w	r3, r3, #32
 800c994:	6023      	str	r3, [r4, #0]
 800c996:	2310      	movs	r3, #16
 800c998:	e7a6      	b.n	800c8e8 <_printf_i+0xf8>
 800c99a:	4824      	ldr	r0, [pc, #144]	; (800ca2c <_printf_i+0x23c>)
 800c99c:	e7e4      	b.n	800c968 <_printf_i+0x178>
 800c99e:	4615      	mov	r5, r2
 800c9a0:	e7bd      	b.n	800c91e <_printf_i+0x12e>
 800c9a2:	682b      	ldr	r3, [r5, #0]
 800c9a4:	6826      	ldr	r6, [r4, #0]
 800c9a6:	1d18      	adds	r0, r3, #4
 800c9a8:	6961      	ldr	r1, [r4, #20]
 800c9aa:	6028      	str	r0, [r5, #0]
 800c9ac:	0635      	lsls	r5, r6, #24
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	d501      	bpl.n	800c9b6 <_printf_i+0x1c6>
 800c9b2:	6019      	str	r1, [r3, #0]
 800c9b4:	e002      	b.n	800c9bc <_printf_i+0x1cc>
 800c9b6:	0670      	lsls	r0, r6, #25
 800c9b8:	d5fb      	bpl.n	800c9b2 <_printf_i+0x1c2>
 800c9ba:	8019      	strh	r1, [r3, #0]
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4615      	mov	r5, r2
 800c9c0:	6123      	str	r3, [r4, #16]
 800c9c2:	e7bc      	b.n	800c93e <_printf_i+0x14e>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	1d1a      	adds	r2, r3, #4
 800c9ca:	602a      	str	r2, [r5, #0]
 800c9cc:	681d      	ldr	r5, [r3, #0]
 800c9ce:	6862      	ldr	r2, [r4, #4]
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 f9d5 	bl	800cd80 <memchr>
 800c9d6:	b108      	cbz	r0, 800c9dc <_printf_i+0x1ec>
 800c9d8:	1b40      	subs	r0, r0, r5
 800c9da:	6060      	str	r0, [r4, #4]
 800c9dc:	6863      	ldr	r3, [r4, #4]
 800c9de:	6123      	str	r3, [r4, #16]
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e6:	e7aa      	b.n	800c93e <_printf_i+0x14e>
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	47d0      	blx	sl
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	d0ad      	beq.n	800c952 <_printf_i+0x162>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	079b      	lsls	r3, r3, #30
 800c9fa:	d413      	bmi.n	800ca24 <_printf_i+0x234>
 800c9fc:	68e0      	ldr	r0, [r4, #12]
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	4298      	cmp	r0, r3
 800ca02:	bfb8      	it	lt
 800ca04:	4618      	movlt	r0, r3
 800ca06:	e7a6      	b.n	800c956 <_printf_i+0x166>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	4632      	mov	r2, r6
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	4640      	mov	r0, r8
 800ca10:	47d0      	blx	sl
 800ca12:	3001      	adds	r0, #1
 800ca14:	d09d      	beq.n	800c952 <_printf_i+0x162>
 800ca16:	3501      	adds	r5, #1
 800ca18:	68e3      	ldr	r3, [r4, #12]
 800ca1a:	9903      	ldr	r1, [sp, #12]
 800ca1c:	1a5b      	subs	r3, r3, r1
 800ca1e:	42ab      	cmp	r3, r5
 800ca20:	dcf2      	bgt.n	800ca08 <_printf_i+0x218>
 800ca22:	e7eb      	b.n	800c9fc <_printf_i+0x20c>
 800ca24:	2500      	movs	r5, #0
 800ca26:	f104 0619 	add.w	r6, r4, #25
 800ca2a:	e7f5      	b.n	800ca18 <_printf_i+0x228>
 800ca2c:	0800e5fd 	.word	0x0800e5fd
 800ca30:	0800e60e 	.word	0x0800e60e

0800ca34 <__sflush_r>:
 800ca34:	898a      	ldrh	r2, [r1, #12]
 800ca36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca38:	4605      	mov	r5, r0
 800ca3a:	0710      	lsls	r0, r2, #28
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	d457      	bmi.n	800caf0 <__sflush_r+0xbc>
 800ca40:	684b      	ldr	r3, [r1, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	dc04      	bgt.n	800ca50 <__sflush_r+0x1c>
 800ca46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	dc01      	bgt.n	800ca50 <__sflush_r+0x1c>
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d0fa      	beq.n	800ca4c <__sflush_r+0x18>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca5c:	682f      	ldr	r7, [r5, #0]
 800ca5e:	6a21      	ldr	r1, [r4, #32]
 800ca60:	602b      	str	r3, [r5, #0]
 800ca62:	d032      	beq.n	800caca <__sflush_r+0x96>
 800ca64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	075a      	lsls	r2, r3, #29
 800ca6a:	d505      	bpl.n	800ca78 <__sflush_r+0x44>
 800ca6c:	6863      	ldr	r3, [r4, #4]
 800ca6e:	1ac0      	subs	r0, r0, r3
 800ca70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca72:	b10b      	cbz	r3, 800ca78 <__sflush_r+0x44>
 800ca74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca76:	1ac0      	subs	r0, r0, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca7e:	4628      	mov	r0, r5
 800ca80:	6a21      	ldr	r1, [r4, #32]
 800ca82:	47b0      	blx	r6
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	89a3      	ldrh	r3, [r4, #12]
 800ca88:	d106      	bne.n	800ca98 <__sflush_r+0x64>
 800ca8a:	6829      	ldr	r1, [r5, #0]
 800ca8c:	291d      	cmp	r1, #29
 800ca8e:	d82b      	bhi.n	800cae8 <__sflush_r+0xb4>
 800ca90:	4a28      	ldr	r2, [pc, #160]	; (800cb34 <__sflush_r+0x100>)
 800ca92:	410a      	asrs	r2, r1
 800ca94:	07d6      	lsls	r6, r2, #31
 800ca96:	d427      	bmi.n	800cae8 <__sflush_r+0xb4>
 800ca98:	2200      	movs	r2, #0
 800ca9a:	6062      	str	r2, [r4, #4]
 800ca9c:	6922      	ldr	r2, [r4, #16]
 800ca9e:	04d9      	lsls	r1, r3, #19
 800caa0:	6022      	str	r2, [r4, #0]
 800caa2:	d504      	bpl.n	800caae <__sflush_r+0x7a>
 800caa4:	1c42      	adds	r2, r0, #1
 800caa6:	d101      	bne.n	800caac <__sflush_r+0x78>
 800caa8:	682b      	ldr	r3, [r5, #0]
 800caaa:	b903      	cbnz	r3, 800caae <__sflush_r+0x7a>
 800caac:	6560      	str	r0, [r4, #84]	; 0x54
 800caae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab0:	602f      	str	r7, [r5, #0]
 800cab2:	2900      	cmp	r1, #0
 800cab4:	d0ca      	beq.n	800ca4c <__sflush_r+0x18>
 800cab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caba:	4299      	cmp	r1, r3
 800cabc:	d002      	beq.n	800cac4 <__sflush_r+0x90>
 800cabe:	4628      	mov	r0, r5
 800cac0:	f7ff fc9a 	bl	800c3f8 <_free_r>
 800cac4:	2000      	movs	r0, #0
 800cac6:	6360      	str	r0, [r4, #52]	; 0x34
 800cac8:	e7c1      	b.n	800ca4e <__sflush_r+0x1a>
 800caca:	2301      	movs	r3, #1
 800cacc:	4628      	mov	r0, r5
 800cace:	47b0      	blx	r6
 800cad0:	1c41      	adds	r1, r0, #1
 800cad2:	d1c8      	bne.n	800ca66 <__sflush_r+0x32>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0c5      	beq.n	800ca66 <__sflush_r+0x32>
 800cada:	2b1d      	cmp	r3, #29
 800cadc:	d001      	beq.n	800cae2 <__sflush_r+0xae>
 800cade:	2b16      	cmp	r3, #22
 800cae0:	d101      	bne.n	800cae6 <__sflush_r+0xb2>
 800cae2:	602f      	str	r7, [r5, #0]
 800cae4:	e7b2      	b.n	800ca4c <__sflush_r+0x18>
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caec:	81a3      	strh	r3, [r4, #12]
 800caee:	e7ae      	b.n	800ca4e <__sflush_r+0x1a>
 800caf0:	690f      	ldr	r7, [r1, #16]
 800caf2:	2f00      	cmp	r7, #0
 800caf4:	d0aa      	beq.n	800ca4c <__sflush_r+0x18>
 800caf6:	0793      	lsls	r3, r2, #30
 800caf8:	bf18      	it	ne
 800cafa:	2300      	movne	r3, #0
 800cafc:	680e      	ldr	r6, [r1, #0]
 800cafe:	bf08      	it	eq
 800cb00:	694b      	ldreq	r3, [r1, #20]
 800cb02:	1bf6      	subs	r6, r6, r7
 800cb04:	600f      	str	r7, [r1, #0]
 800cb06:	608b      	str	r3, [r1, #8]
 800cb08:	2e00      	cmp	r6, #0
 800cb0a:	dd9f      	ble.n	800ca4c <__sflush_r+0x18>
 800cb0c:	4633      	mov	r3, r6
 800cb0e:	463a      	mov	r2, r7
 800cb10:	4628      	mov	r0, r5
 800cb12:	6a21      	ldr	r1, [r4, #32]
 800cb14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cb18:	47e0      	blx	ip
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	dc06      	bgt.n	800cb2c <__sflush_r+0xf8>
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	e790      	b.n	800ca4e <__sflush_r+0x1a>
 800cb2c:	4407      	add	r7, r0
 800cb2e:	1a36      	subs	r6, r6, r0
 800cb30:	e7ea      	b.n	800cb08 <__sflush_r+0xd4>
 800cb32:	bf00      	nop
 800cb34:	dfbffffe 	.word	0xdfbffffe

0800cb38 <_fflush_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	690b      	ldr	r3, [r1, #16]
 800cb3c:	4605      	mov	r5, r0
 800cb3e:	460c      	mov	r4, r1
 800cb40:	b913      	cbnz	r3, 800cb48 <_fflush_r+0x10>
 800cb42:	2500      	movs	r5, #0
 800cb44:	4628      	mov	r0, r5
 800cb46:	bd38      	pop	{r3, r4, r5, pc}
 800cb48:	b118      	cbz	r0, 800cb52 <_fflush_r+0x1a>
 800cb4a:	6a03      	ldr	r3, [r0, #32]
 800cb4c:	b90b      	cbnz	r3, 800cb52 <_fflush_r+0x1a>
 800cb4e:	f7ff f9c7 	bl	800bee0 <__sinit>
 800cb52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d0f3      	beq.n	800cb42 <_fflush_r+0xa>
 800cb5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb5c:	07d0      	lsls	r0, r2, #31
 800cb5e:	d404      	bmi.n	800cb6a <_fflush_r+0x32>
 800cb60:	0599      	lsls	r1, r3, #22
 800cb62:	d402      	bmi.n	800cb6a <_fflush_r+0x32>
 800cb64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb66:	f7ff fc28 	bl	800c3ba <__retarget_lock_acquire_recursive>
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	f7ff ff61 	bl	800ca34 <__sflush_r>
 800cb72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb74:	4605      	mov	r5, r0
 800cb76:	07da      	lsls	r2, r3, #31
 800cb78:	d4e4      	bmi.n	800cb44 <_fflush_r+0xc>
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	059b      	lsls	r3, r3, #22
 800cb7e:	d4e1      	bmi.n	800cb44 <_fflush_r+0xc>
 800cb80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb82:	f7ff fc1b 	bl	800c3bc <__retarget_lock_release_recursive>
 800cb86:	e7dd      	b.n	800cb44 <_fflush_r+0xc>

0800cb88 <__swhatbuf_r>:
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	460c      	mov	r4, r1
 800cb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb90:	4615      	mov	r5, r2
 800cb92:	2900      	cmp	r1, #0
 800cb94:	461e      	mov	r6, r3
 800cb96:	b096      	sub	sp, #88	; 0x58
 800cb98:	da0c      	bge.n	800cbb4 <__swhatbuf_r+0x2c>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cba2:	bf0c      	ite	eq
 800cba4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cba8:	2340      	movne	r3, #64	; 0x40
 800cbaa:	2000      	movs	r0, #0
 800cbac:	6031      	str	r1, [r6, #0]
 800cbae:	602b      	str	r3, [r5, #0]
 800cbb0:	b016      	add	sp, #88	; 0x58
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	466a      	mov	r2, sp
 800cbb6:	f000 f8ad 	bl	800cd14 <_fstat_r>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	dbed      	blt.n	800cb9a <__swhatbuf_r+0x12>
 800cbbe:	9901      	ldr	r1, [sp, #4]
 800cbc0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cbc4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cbc8:	4259      	negs	r1, r3
 800cbca:	4159      	adcs	r1, r3
 800cbcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbd0:	e7eb      	b.n	800cbaa <__swhatbuf_r+0x22>

0800cbd2 <__smakebuf_r>:
 800cbd2:	898b      	ldrh	r3, [r1, #12]
 800cbd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbd6:	079d      	lsls	r5, r3, #30
 800cbd8:	4606      	mov	r6, r0
 800cbda:	460c      	mov	r4, r1
 800cbdc:	d507      	bpl.n	800cbee <__smakebuf_r+0x1c>
 800cbde:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbe2:	6023      	str	r3, [r4, #0]
 800cbe4:	6123      	str	r3, [r4, #16]
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	6163      	str	r3, [r4, #20]
 800cbea:	b002      	add	sp, #8
 800cbec:	bd70      	pop	{r4, r5, r6, pc}
 800cbee:	466a      	mov	r2, sp
 800cbf0:	ab01      	add	r3, sp, #4
 800cbf2:	f7ff ffc9 	bl	800cb88 <__swhatbuf_r>
 800cbf6:	9900      	ldr	r1, [sp, #0]
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7fe ff8e 	bl	800bb1c <_malloc_r>
 800cc00:	b948      	cbnz	r0, 800cc16 <__smakebuf_r+0x44>
 800cc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc06:	059a      	lsls	r2, r3, #22
 800cc08:	d4ef      	bmi.n	800cbea <__smakebuf_r+0x18>
 800cc0a:	f023 0303 	bic.w	r3, r3, #3
 800cc0e:	f043 0302 	orr.w	r3, r3, #2
 800cc12:	81a3      	strh	r3, [r4, #12]
 800cc14:	e7e3      	b.n	800cbde <__smakebuf_r+0xc>
 800cc16:	89a3      	ldrh	r3, [r4, #12]
 800cc18:	6020      	str	r0, [r4, #0]
 800cc1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	9b00      	ldr	r3, [sp, #0]
 800cc22:	6120      	str	r0, [r4, #16]
 800cc24:	6163      	str	r3, [r4, #20]
 800cc26:	9b01      	ldr	r3, [sp, #4]
 800cc28:	b15b      	cbz	r3, 800cc42 <__smakebuf_r+0x70>
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc30:	f000 f882 	bl	800cd38 <_isatty_r>
 800cc34:	b128      	cbz	r0, 800cc42 <__smakebuf_r+0x70>
 800cc36:	89a3      	ldrh	r3, [r4, #12]
 800cc38:	f023 0303 	bic.w	r3, r3, #3
 800cc3c:	f043 0301 	orr.w	r3, r3, #1
 800cc40:	81a3      	strh	r3, [r4, #12]
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	431d      	orrs	r5, r3
 800cc46:	81a5      	strh	r5, [r4, #12]
 800cc48:	e7cf      	b.n	800cbea <__smakebuf_r+0x18>

0800cc4a <_putc_r>:
 800cc4a:	b570      	push	{r4, r5, r6, lr}
 800cc4c:	460d      	mov	r5, r1
 800cc4e:	4614      	mov	r4, r2
 800cc50:	4606      	mov	r6, r0
 800cc52:	b118      	cbz	r0, 800cc5c <_putc_r+0x12>
 800cc54:	6a03      	ldr	r3, [r0, #32]
 800cc56:	b90b      	cbnz	r3, 800cc5c <_putc_r+0x12>
 800cc58:	f7ff f942 	bl	800bee0 <__sinit>
 800cc5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc5e:	07d8      	lsls	r0, r3, #31
 800cc60:	d405      	bmi.n	800cc6e <_putc_r+0x24>
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	0599      	lsls	r1, r3, #22
 800cc66:	d402      	bmi.n	800cc6e <_putc_r+0x24>
 800cc68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc6a:	f7ff fba6 	bl	800c3ba <__retarget_lock_acquire_recursive>
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	3b01      	subs	r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	60a3      	str	r3, [r4, #8]
 800cc76:	da05      	bge.n	800cc84 <_putc_r+0x3a>
 800cc78:	69a2      	ldr	r2, [r4, #24]
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	db12      	blt.n	800cca4 <_putc_r+0x5a>
 800cc7e:	b2eb      	uxtb	r3, r5
 800cc80:	2b0a      	cmp	r3, #10
 800cc82:	d00f      	beq.n	800cca4 <_putc_r+0x5a>
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	6022      	str	r2, [r4, #0]
 800cc8a:	701d      	strb	r5, [r3, #0]
 800cc8c:	b2ed      	uxtb	r5, r5
 800cc8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc90:	07da      	lsls	r2, r3, #31
 800cc92:	d405      	bmi.n	800cca0 <_putc_r+0x56>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	059b      	lsls	r3, r3, #22
 800cc98:	d402      	bmi.n	800cca0 <_putc_r+0x56>
 800cc9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc9c:	f7ff fb8e 	bl	800c3bc <__retarget_lock_release_recursive>
 800cca0:	4628      	mov	r0, r5
 800cca2:	bd70      	pop	{r4, r5, r6, pc}
 800cca4:	4629      	mov	r1, r5
 800cca6:	4622      	mov	r2, r4
 800cca8:	4630      	mov	r0, r6
 800ccaa:	f7ff fa1a 	bl	800c0e2 <__swbuf_r>
 800ccae:	4605      	mov	r5, r0
 800ccb0:	e7ed      	b.n	800cc8e <_putc_r+0x44>

0800ccb2 <_raise_r>:
 800ccb2:	291f      	cmp	r1, #31
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	460d      	mov	r5, r1
 800ccba:	d904      	bls.n	800ccc6 <_raise_r+0x14>
 800ccbc:	2316      	movs	r3, #22
 800ccbe:	6003      	str	r3, [r0, #0]
 800ccc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ccc8:	b112      	cbz	r2, 800ccd0 <_raise_r+0x1e>
 800ccca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ccce:	b94b      	cbnz	r3, 800cce4 <_raise_r+0x32>
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f000 f853 	bl	800cd7c <_getpid_r>
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4601      	mov	r1, r0
 800ccda:	4620      	mov	r0, r4
 800ccdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cce0:	f000 b83a 	b.w	800cd58 <_kill_r>
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d00a      	beq.n	800ccfe <_raise_r+0x4c>
 800cce8:	1c59      	adds	r1, r3, #1
 800ccea:	d103      	bne.n	800ccf4 <_raise_r+0x42>
 800ccec:	2316      	movs	r3, #22
 800ccee:	6003      	str	r3, [r0, #0]
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	e7e7      	b.n	800ccc4 <_raise_r+0x12>
 800ccf4:	2400      	movs	r4, #0
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccfc:	4798      	blx	r3
 800ccfe:	2000      	movs	r0, #0
 800cd00:	e7e0      	b.n	800ccc4 <_raise_r+0x12>
	...

0800cd04 <raise>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <raise+0xc>)
 800cd06:	4601      	mov	r1, r0
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f7ff bfd2 	b.w	800ccb2 <_raise_r>
 800cd0e:	bf00      	nop
 800cd10:	200000d8 	.word	0x200000d8

0800cd14 <_fstat_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	2300      	movs	r3, #0
 800cd18:	4d06      	ldr	r5, [pc, #24]	; (800cd34 <_fstat_r+0x20>)
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	4608      	mov	r0, r1
 800cd1e:	4611      	mov	r1, r2
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	f7f3 fd6d 	bl	8000800 <_fstat>
 800cd26:	1c43      	adds	r3, r0, #1
 800cd28:	d102      	bne.n	800cd30 <_fstat_r+0x1c>
 800cd2a:	682b      	ldr	r3, [r5, #0]
 800cd2c:	b103      	cbz	r3, 800cd30 <_fstat_r+0x1c>
 800cd2e:	6023      	str	r3, [r4, #0]
 800cd30:	bd38      	pop	{r3, r4, r5, pc}
 800cd32:	bf00      	nop
 800cd34:	2000037c 	.word	0x2000037c

0800cd38 <_isatty_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	4d05      	ldr	r5, [pc, #20]	; (800cd54 <_isatty_r+0x1c>)
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f3 fd6b 	bl	800081e <_isatty>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_isatty_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_isatty_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	2000037c 	.word	0x2000037c

0800cd58 <_kill_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	4d06      	ldr	r5, [pc, #24]	; (800cd78 <_kill_r+0x20>)
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4608      	mov	r0, r1
 800cd62:	4611      	mov	r1, r2
 800cd64:	602b      	str	r3, [r5, #0]
 800cd66:	f7f3 fd09 	bl	800077c <_kill>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	d102      	bne.n	800cd74 <_kill_r+0x1c>
 800cd6e:	682b      	ldr	r3, [r5, #0]
 800cd70:	b103      	cbz	r3, 800cd74 <_kill_r+0x1c>
 800cd72:	6023      	str	r3, [r4, #0]
 800cd74:	bd38      	pop	{r3, r4, r5, pc}
 800cd76:	bf00      	nop
 800cd78:	2000037c 	.word	0x2000037c

0800cd7c <_getpid_r>:
 800cd7c:	f7f3 bcf7 	b.w	800076e <_getpid>

0800cd80 <memchr>:
 800cd80:	4603      	mov	r3, r0
 800cd82:	b510      	push	{r4, lr}
 800cd84:	b2c9      	uxtb	r1, r1
 800cd86:	4402      	add	r2, r0
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	d101      	bne.n	800cd92 <memchr+0x12>
 800cd8e:	2000      	movs	r0, #0
 800cd90:	e003      	b.n	800cd9a <memchr+0x1a>
 800cd92:	7804      	ldrb	r4, [r0, #0]
 800cd94:	3301      	adds	r3, #1
 800cd96:	428c      	cmp	r4, r1
 800cd98:	d1f6      	bne.n	800cd88 <memchr+0x8>
 800cd9a:	bd10      	pop	{r4, pc}

0800cd9c <_init>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr

0800cda8 <_fini>:
 800cda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdaa:	bf00      	nop
 800cdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdae:	bc08      	pop	{r3}
 800cdb0:	469e      	mov	lr, r3
 800cdb2:	4770      	bx	lr
